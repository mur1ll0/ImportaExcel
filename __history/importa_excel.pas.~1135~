unit importa_excel;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.Grids, Vcl.StdCtrls, Vcl.Buttons, ComObj, IniFiles,
  Vcl.FileCtrl, Data.DBXFirebird, Data.DB, Data.SqlExpr, importando, OleAuto,
  Vcl.Menus, empresa, Colunas, System.StrUtils, uSubstituir;

type
  TfrmPrinc = class(TForm)
    btnLoadOrigem: TBitBtn;
    opnDadosOrigem: TOpenDialog;
    StringGrid1: TStringGrid;
    FilePath: TEdit;
    btnAbrirOrigem: TBitBtn;
    SelectImport: TComboBox;
    ButImport: TBitBtn;
    DBPath: TEdit;
    ButOpenDB: TBitBtn;
    opnDadosDestino: TOpenDialog;
    conDestino: TSQLConnection;
    btnSalvar: TBitBtn;
    SaveDialog1: TSaveDialog;
    Menu: TMainMenu;
    t1: TMenuItem;
    Editar1: TMenuItem;
    Cabealho1: TMenuItem;
    Limpar: TMenuItem;
    LimpaClieForn: TMenuItem;
    LimpaGrupos: TMenuItem;
    LimpaSubGrupos: TMenuItem;
    LimpaMarcas: TMenuItem;
    LimpaProdutos: TMenuItem;
    LimpaTituP: TMenuItem;
    LimpaTituR: TMenuItem;
    AdicionarColuna: TMenuItem;
    AdicionarLinha: TMenuItem;
    DeletarColuna: TMenuItem;
    DeletarLinha: TMenuItem;
    DadosEmpr: TMenuItem;
    Colunas: TMenuItem;
    Label1: TLabel;
    StartLine: TEdit;
    Label2: TLabel;
    Label3: TLabel;
    conOrigem: TSQLConnection;
    btnTXT: TBitBtn;
    lblColUpdate: TLabel;
    N1: TMenuItem;
    mnuSubstituir: TMenuItem;

    function quantidadeEmpresas(colEmpr: Integer): Integer;
    procedure btnAbrirOrigemClick(Sender: TObject);
    procedure AutoSizeCol(Grid: TStringGrid; Column: integer);
    procedure RemoveWhiteRows(Grid: TStringGrid);
    procedure RemoveSpaces(Grid: TStringGrid);
    procedure btnLoadOrigemClick(Sender: TObject);
    procedure BtnOpenDB(Sender: TObject);
    procedure StringGrid1KeyDown(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure StringGrid1DblClick(Sender: TObject);
    procedure StringGrid1MouseDown(Sender: TObject; Button: TMouseButton;
      Shift: TShiftState; X, Y: Integer);
    procedure ButImportClick(Sender: TObject);
    procedure btnSalvarClick(Sender: TObject);
    procedure Cabealho1Click(Sender: TObject);
    procedure LimpaClieFornClick(Sender: TObject);
    procedure LimpaGruposClick(Sender: TObject);
    procedure LimpaSubGruposClick(Sender: TObject);
    procedure LimpaMarcasClick(Sender: TObject);
    procedure LimpaProdutosClick(Sender: TObject);
    procedure LimpaTituPClick(Sender: TObject);
    procedure LimpaTituRClick(Sender: TObject);
    procedure DeleteRow(Grid: TStringGrid; ARow: Integer);
    procedure AdicionarColunaClick(Sender: TObject);
    procedure AdicionarLinhaClick(Sender: TObject);
    procedure DeletarColunaClick(Sender: TObject);
    procedure DeletarLinhaClick(Sender: TObject);
    procedure DadosEmprClick(Sender: TObject);
    procedure ColunasClick(Sender: TObject);
    procedure btnTXTClick(Sender: TObject);
    procedure StringGrid1DrawCell(Sender: TObject; ACol, ARow: Integer;
      Rect: TRect; State: TGridDrawState);
    function VerificaUpdate(coluna: String): Integer;
    procedure mnuSubstituirClick(Sender: TObject);
    function getProdCodUpdate(line: Integer) : string;

  private
    { Private declarations }
  public
    { Public declarations }
    class function buscaCidade(Cidade, UF: string): String;
  end;

var
  frmPrinc: TfrmPrinc;
  colUpdate: Array of string;
  colUpdateCount: Integer;
  gridTemp: Array of Array of string;
  qtdEmpr: Integer;

implementation

//Função para definir a quantidade de empresas
function TfrmPrinc.quantidadeEmpresas(colEmpr: Integer): Integer;
var
  i, max: Integer;
begin
  max := 1;
  for i := StrToInt(StartLine.Text) to StringGrid1.RowCount-1 do begin
    if StrToInt(StringGrid1.Cells[colEmpr,i]) > max  then begin
      max := StrToInt(StringGrid1.Cells[colEmpr,i]);
    end;
  end;
  Result := max;
end;


//Função para tratar os numeros com ponto flutuante importados como texto
function corrigeFloat(nume:string): string;
var
  c : Char;
  flag : Integer;
begin
  {
  Flag para encontrar pontos e virgulas
  1- 1º Ponto
  2- 1ª Virgula
  3- Ponto é casa decimal
  4- Virgula é casa decimal
  }
  flag := 0;

  //Encontrar pontos e virgulas
  for c in nume do begin
    if flag = 0 then begin
      if c = '.'  then flag := 1;
      if c = ',' then flag := 2;
    end
    else begin
      if c = '.'  then flag := 3;
      if c = ',' then flag := 4;
    end;
  end;

  {
  Verificar a flag:
  1-Decimal separado por ponto, deixa assim
  2-Decimal separado por virgula, troca virgula por ponto
  3-Milhares separ. por virgulas, Decimal por ponto, tira virgulas
  4-Milhares separ. por pontos, Decimal por virgula, tira os pontos depois troca virgula por ponto
  }
  if flag = 2 then begin
    nume := stringreplace(nume, ',', '.',[rfReplaceAll, rfIgnoreCase]);
  end
  else if flag = 4 then begin
    nume := stringreplace(nume, '.', '',[rfReplaceAll, rfIgnoreCase]);
    nume := stringreplace(nume, ',', '.',[rfReplaceAll, rfIgnoreCase]);
  end
  else if flag = 3 then begin
    nume := stringreplace(nume, ',', '',[rfReplaceAll, rfIgnoreCase]);
  end;
  Result := nume;
end;


//Função para criar caixa de diálogos
function Mensagem(CONST Msg: string; DlgTypt: TmsgDlgType; button: TMsgDlgButtons;
  Caption: ARRAY OF string; dlgcaption: string): Integer;
var
  aMsgdlg: TForm;
  i: Integer;
  Dlgbutton: Tbutton;
  Captionindex: Integer;
begin
  aMsgdlg := createMessageDialog(Msg, DlgTypt, button);
  aMsgdlg.Caption := dlgcaption;
  aMsgdlg.BiDiMode := bdRightToLeft;
  Captionindex := 0;
  for i := 0 to aMsgdlg.componentcount - 1 Do
  begin
    if (aMsgdlg.components[i] is Tbutton) then
    Begin
      Dlgbutton := Tbutton(aMsgdlg.components[i]);
      if Captionindex <= High(Caption) then
        Dlgbutton.Caption := Caption[Captionindex];
      inc(Captionindex);
    end;
  end;
  Result := aMsgdlg.Showmodal;
end;


//Função para carregar apenas o cabeçalho de uma planilha na StringGrid
function XlsHeaderLoad(AGrid: TStringGrid; AXLSFile: string): Boolean;
const
  xlCellTypeLastCell = $0000000B;
var
  XLApp, Sheet: OLEVariant;
  RangeMatrix: Variant;
  x, y, k, r: Integer;
begin
  Result := False;
  // Create Excel-OLE Object
  XLApp := CreateOleObject('Excel.Application');
  try
    // Hide Excel
    XLApp.Visible := False;

    // Open the Workbook
    XLApp.Workbooks.Open(AXLSFile);

    // Sheet := XLApp.Workbooks[1].WorkSheets[1];
    Sheet := XLApp.Workbooks[ExtractFileName(AXLSFile)].WorkSheets[1];

    // In order to know the dimension of the WorkSheet, i.e the number of rows
    // and the number of columns, we activate the last non-empty cell of it

    Sheet.Cells.SpecialCells(xlCellTypeLastCell, EmptyParam).Activate;
    // Get the value of the last row
    x := XLApp.ActiveCell.Row;
    // Get the value of the last column
    y := XLApp.ActiveCell.Column;

    // Assign the Variant associated with the WorkSheet to the Delphi Variant
    RangeMatrix := XLApp.Range['A1', XLApp.Cells.Item[X, Y]].Value;


    //Verificar quantidade de colunas
    if AGrid.ColCount < y then AGrid.ColCount := y;
    //Testar se a primeira coluna não é um '0'
    if RangeMatrix[1, 1] <> '0' then
    begin
      //AGrid.ColCount := AGrid.ColCount +1;
      AGrid.Cells[0,0] := '0';
    end;

    //Iterar colunas
    for r := 1 to y do
    begin
      AGrid.Cells[r,0] := RangeMatrix[1, r];
    end;

    // Unassign the Delphi Variant Matrix
    RangeMatrix := Unassigned;


  finally
    // Quit Excel
    if not VarIsEmpty(XLApp) then
    begin
      // XLApp.DisplayAlerts := False;
      XLApp.Quit;
      XLAPP := Unassigned;
      Sheet := Unassigned;
      Result := True;
    end;
  end;
end;


//Função para carregar planilha na StringGrid
function Xls_To_StringGrid(AGrid: TStringGrid; AXLSFile: string): Boolean;
const
  xlCellTypeLastCell = $0000000B;
var
  XLApp, Sheet: OLEVariant;
  RangeMatrix: Variant;
  i, j, x, y, k, r: Integer;
  but: Integer;
begin
  Result := False;
  // Create Excel-OLE Object
  XLApp := CreateOleObject('Excel.Application');
  try
    try

      // Hide Excel
      XLApp.Visible := False;

      // Open the Workbook
      XLApp.Workbooks.Open(AXLSFile);

      but := 0;
      AGrid.RowCount := 0;
      AGrid.ColCount := 1;
      k := 0;
      j := 1;
      //Percorrer os WorkSheets
      for i := 1 to XLApp.Workbooks[ExtractFileName(AXLSFile)].WorkSheets.Count do
      begin
        Sheet := XLApp.Workbooks[ExtractFileName(AXLSFile)].WorkSheets[i];

        //Retirar Filtros, para que não fique linhas escondidas
        if (Sheet.AutoFilterMode = True) then
        begin
          Sheet.AutoFilterMode := False;
        end;

        //Receber valores da ultima linha e coluna
        x := Sheet.Cells.SpecialCells(xlCellTypeLastCell, EmptyParam).Row;
        y := Sheet.Cells.SpecialCells(xlCellTypeLastCell, EmptyParam).Column;

        //Setar tamanho do StringGrid
        AGrid.RowCount := AGrid.RowCount + x;
        if y > AGrid.ColCount  then
        begin
          AGrid.ColCount := y + 1;
        end;

        // Assign the Variant associated with the WorkSheet to the Delphi Variant
        RangeMatrix := Sheet.Range['A1', Sheet.Cells.Item[X, Y]].Value;

        //Iterar linhas
        while k < AGrid.RowCount-1 do
        begin
          if but = 1 then Break;

          AGrid.Cells[0,k] := IntToStr(k);
          //Iterar colunas
          for r := 1 to AGrid.ColCount-1 do
          begin
            try
              AGrid.Cells[r,k] := RangeMatrix[j,r];
            except
              on E:Exception do
              begin
                if but = 7 then Continue;

                but := Mensagem('Erro no arquivo Excel linha: '+IntToStr(j)+' coluna: '+IntToStr(r)+' ('+RangeMatrix[1,r]+')'+#13+E.Message+#13+'Continuar irá deixar célula em branco. Ignorar irá deixar célula em branco para todos os erros sem perguntar.', mtCustom,[mbYes, mbNo, mbOK],['Continuar', 'Ignorar','Parar'],'Erro no arquivo Excel');
                if (but = 6) then begin
                  AGrid.Cells[r,k] := '';
                end
                else if (but = 7) then begin
                  Continue;
                end
                else if (but = 1) then begin
                  raise Exception.Create('Erro no arquivo Excel. Verificar se existem células contendo:'+#13+'#DIV/0!'+#13+'#N/A'+#13+'#NAME?'+#13+'#NULL!'+#13+'#NUM!'+#13+'#REF!'+#13+'#VALUE!');
                end;
              end;
            end;
          end;
          k := k + 1;
          j := j + 1;
        end;

        //Fazer proximos WorksSheet começar da 2 linha
        j := 2;
        AGrid.RowCount := AGrid.RowCount - 1;
      end;

    except
      on E:Exception do
      begin
        ShowMessage(E.Message);
      end;
    end;

  finally
    // Unassign the Delphi Variant Matrix
    RangeMatrix := Unassigned;
    // Quit Excel
    if not VarIsEmpty(XLApp) then
    begin
      XLApp.DisplayAlerts := False;
      XLApp.Quit;
      XLAPP := Unassigned;
      Sheet := Unassigned;
      Result := True;
    end;
  end;
end;


//Função para carregar CSV na StringGrid
procedure CSV_To_StringGrid(StringGrid1: TStringGrid; AFileName: TFileName);
var
  oFileStrings:TStringList;
  oRowStrings:TStringList;
  i:integer;
begin
  oFileStrings := TStringList.Create;
  oRowStrings := TStringList.Create;
  try
    oFileStrings.LoadFromFile(AFileName);
    StringGrid1.RowCount := oFileStrings.Count;
    for i := 0 to oFileStrings.Count - 1 do
    begin
      oRowStrings.Clear;
      oRowStrings.Delimiter := ';';
      oRowStrings.StrictDelimiter := True;
      oRowStrings.DelimitedText := oFileStrings[i];
      oRowStrings.Insert(0,IntToStr(i));
      if oRowStrings.Count > StringGrid1.ColCount then
        StringGrid1.ColCount := oRowStrings.Count;
      StringGrid1.Rows[i].Assign(oRowStrings);
    end;
  finally
    oFileStrings.Free;
    oRowStrings.Free;
  end;
end;


//Botão para selecionar arquivo
procedure TfrmPrinc.btnAbrirOrigemClick(Sender: TObject);
var
  arquivo : String;

begin
  if opnDadosOrigem.Execute then
  begin
    arquivo := ExtractFilePath(Application.ExeName);
    FilePath.Text := opnDadosOrigem.FileName;
  end;

end;


//Botão para selecionar arquivo
procedure TfrmPrinc.BtnOpenDB(Sender: TObject);
var
  arquivo : String;

begin
  if opnDadosDestino.Execute then
  begin
    arquivo := ExtractFilePath(Application.ExeName);
    DBPath.Text := opnDadosDestino.FileName;
    conDestino.Params.Values['DataBase'] := DBPath.Text;
  end;

end;


//Função para redimensionar coluna
procedure TfrmPrinc.AutoSizeCol(Grid: TStringGrid; Column: integer);
var
  i, W, WMax: integer;
begin
  WMax := 0;
  for i := 0 to (Grid.RowCount - 1) do begin
    W := Grid.Canvas.TextWidth(Grid.Cells[Column, i]);
    if W > WMax then
      WMax := W;
  end;
  Grid.ColWidths[Column] := WMax + 10;

  //Se for uma coluna nova
  if Grid.ColWidths[Column] = 10 then
  begin
    Grid.ColWidths[Column] := 40;
  end;

end;


//Função para Remover linhas em branco
procedure TfrmPrinc.RemoveWhiteRows(Grid: TStringGrid);
var
  i, j: integer;
  remove: Boolean;
begin
  //Percorre linhas
  for i := 0 to (Grid.RowCount - 1) do begin
    remove := True;
    //Percorre colunas
    for j := 1 to (Grid.ColCount - 1) do begin
      if Grid.Cells[j,i] <> '' then begin
        remove := False;
        Break;
      end;
    end;

    if remove = True then begin
      DeleteRow(StringGrid1, i);
    end;
  end;
end;


//Função para Remover espaços no inicio e fim da string
procedure TfrmPrinc.RemoveSpaces(Grid: TStringGrid);
var
  i, j: integer;
begin
  //Percorre linhas
  for i := 0 to (Grid.RowCount - 1) do begin
    //Percorre colunas
    for j := 1 to (Grid.ColCount - 1) do begin
      Grid.Cells[j,i] := TrimLeft(Grid.Cells[j,i]);
      Grid.Cells[j,i] := TrimRight(Grid.Cells[j,i]);
      Grid.Cells[j,i] := stringreplace(Grid.Cells[j,i], ';', '',[rfReplaceAll, rfIgnoreCase]);
    end;
  end;
end;


//Botão para Carregar arquivo Excel na StringGrid
procedure TfrmPrinc.btnLoadOrigemClick(Sender: TObject);
var
  i: integer;
  fileExt :string;

begin
  //Limpar StringGrid
  StringGrid1.ColCount := 1;
  StringGrid1.RowCount := 1;

  //Carregar extensão do arquivo
  fileExt := LowerCase(ExtractFileExt(FilePath.Text));

  //Carregar arquivo de acordo com a extensão
  if (fileExt='.xls') or (fileExt='.xlsx') then
  begin
    //Carregar Excel na StringGrid
    Xls_To_StringGrid(StringGrid1, FilePath.Text);
  end
  else if (fileExt='.csv') then
  begin
    //Carregar CSV na StringGrid
    CSV_To_StringGrid(StringGrid1, FilePath.Text);
  end
  else if (fileExt='.fdb') then
  begin
    //Carregar FDB no conOrigem
    ShowMessage('Funcionalidade de carregar base ADMERP ainda não implementada');
    conOrigem.Params.Values['DataBase'] := FilePath.Text;
  end
  else
  begin
    //Mensagem de extenção não suportada
    ShowMessage('Extenção não suportada. ( '+fileExt+' )');
  end
  ;

  //Remover linhas em branco
  RemoveWhiteRows(StringGrid1);

  //Remover espaços no inicio e fim das strings
  RemoveSpaces(StringGrid1);

  //Redimensionar colunas
  for i := 0 to (StringGrid1.ColCount - 1) do
    AutoSizeCol(StringGrid1, i);

end;


//FUNÇÃO DO JEFINHO PARA REMOVER ACENTOS
function RemoveAcento(Str: string): string;
const
  ComAcento = 'àâêôûãõáéíóúçüÀÂÊÔÛÃÕÁÉÍÓÚÇÜ';
  SemAcento = 'aaeouaoaeioucuAAEOUAOAEIOUCU';
var
  x: Integer;
begin;
  for x := 1 to Length(Str) do
    if Pos(Str[x], ComAcento) <> 0 then
      Str[x] := SemAcento[Pos(Str[x], ComAcento)];
  Result := Str;
end;


//Função para buscar a coluna no StringGrid e retornar o indice
function BuscaColuna(Grid: TStringGrid; colName: String) : Integer;
var
  i: integer;
begin
  colName := UpperCase(colName);

  for i := 0 to Grid.ColCount-1 do
  begin
    if UpperCase(Grid.Cells[i,0]) = colName then
      Break;
  end;
  if i = Grid.ColCount then
  begin
    Result:=-1;
  end
  else begin
    Result:=i;
  end;
end;


//Função para cadastrar cliente/fornecedor no banco de dados. Retorna Gen_ID
function cadastraClieForn(colClieForn,dadosClieForn: string): Integer;
var
  gen_id: Integer;
  queryTemp: TSQLQuery;

begin
  try
    try
      frmPrinc.conDestino.Open;
      queryTemp := TSQLQuery.Create(nil);
      queryTemp.SQLConnection := frmPrinc.conDestino;
      queryTemp.SQL.Clear;

      //Desativar Trigger das cidades
      queryTemp.CommandText := 'ALTER TRIGGER clieforn_biu0 INACTIVE;';
      queryTemp.ExecSQL;
      //Executar INSERT
      queryTemp.CommandText := 'insert into clieforn ('+ colClieForn +') values ' + '(' + dadosClieForn + ');';
      queryTemp.ExecSQL;
      //Reativar Trigger das cidades
      queryTemp.CommandText := 'ALTER TRIGGER clieforn_biu0 ACTIVE;';
      queryTemp.ExecSQL;

      queryTemp.SQL.Clear;
      queryTemp.SQL.Add('select c.codi from clieforn c where c.codi = gen_id(gen_clieforn_id,0);');
      queryTemp.Open;

    except
      on e: exception do
      begin
        ShowMessage('Erro SQL: '+e.message+sLineBreak+queryTemp.CommandText);
      end;
    end;
  finally
    if queryTemp.IsEmpty then
    begin
      Result := -1;
    end
    else begin
      Result := queryTemp.FieldByName('CODI').AsInteger;
    end;
    queryTemp.Close;
    frmPrinc.conDestino.Close;
  end;
end;


//Função para buscar a cidade no banco.
class function TfrmPrinc.buscaCidade(Cidade, UF: string): String;
var
  queryTemp: TSQLQuery;

begin
  if (UpperCase( ExtractFileExt(frmPrinc.DBPath.Text) ) = '.TXT') or
     (UpperCase( ExtractFileExt(frmPrinc.DBPath.Text) ) = '.SQL')
  then Result := '(SELECT CID_CODI FROM CIDADE WHERE CID_DESC = '''+Cidade+''' AND CID_UF = '''+UF+''')'
  else
  begin
    try
      frmPrinc.conDestino.Open;
      queryTemp := TSQLQuery.Create(nil);
      queryTemp.SQLConnection := frmPrinc.conDestino;
      queryTemp.SQL.Clear;
      queryTemp.SQL.Add('SELECT * FROM CIDADE WHERE CID_DESC = :PDESC AND CID_UF = :PUF');
      queryTemp.ParamByName('PDESC').AsString := Cidade;
      queryTemp.ParamByName('PUF').AsString := UF;
      queryTemp.Open;
    finally
      if queryTemp.IsEmpty then
      begin
        Result := '';
      end
      else begin
        Result := queryTemp.FieldByName('CID_CODI').AsString;
      end;
      queryTemp.Close;
      frmPrinc.conDestino.Close;
    end;
  end;
end;


//FUNÇÃO PARA RECONHECER SE JA EXISTE O CODIGO DO TITULO PAGAR OU NAO
function temCodTituloP(Codigo: String): Boolean;
var
  queryTemp: TSQLQuery;

begin
  if (UpperCase( ExtractFileExt(frmPrinc.DBPath.Text) ) = '.TXT') or
     (UpperCase( ExtractFileExt(frmPrinc.DBPath.Text) ) = '.SQL')
  then Result := False
  else
  begin
    try
      frmPrinc.conDestino.Open;
      queryTemp := TSQLQuery.Create(nil);
      queryTemp.SQLConnection := frmPrinc.conDestino;
      queryTemp.SQL.Clear;
      queryTemp.SQL.Add('select tp.codi from titup tp where tp.codi = :PCODI');
      queryTemp.ParamByName('PCODI').AsString := Codigo;
      queryTemp.Open;

      if queryTemp.IsEmpty = True then
        Result := False
      else
        Result := True;
    finally
      queryTemp.Free;
      frmPrinc.conDestino.Close;
    end;
  end;
end;


//FUNÇÃO PARA RECONHECER SE JA EXISTE O CODIGO DO TITULO RECEBER OU NAO
function temCodTituloR(Codigo: String): Boolean;
var
  queryTemp: TSQLQuery;

begin
  if (UpperCase( ExtractFileExt(frmPrinc.DBPath.Text) ) = '.TXT') or
     (UpperCase( ExtractFileExt(frmPrinc.DBPath.Text) ) = '.SQL')
  then Result := False
  else
  begin
    try
      frmPrinc.conDestino.Open;
      queryTemp := TSQLQuery.Create(nil);
      queryTemp.SQLConnection := frmPrinc.conDestino;
      queryTemp.SQL.Clear;
      queryTemp.SQL.Add('select tr.codi from titur tr where tr.codi = :PCODI');
      queryTemp.ParamByName('PCODI').AsString := Codigo;
      queryTemp.Open;

      if queryTemp.IsEmpty = True then
        Result := False
      else
        Result := True;
    finally
      queryTemp.Free;
      frmPrinc.conDestino.Close;
    end;
  end;
end;


//FUNÇÃO PARA RECONHECER SE JA EXISTE O CODIGO DO GRUPO OU NAO
function temGrupo(Codigo: String): Boolean;
var
  queryTemp: TSQLQuery;

begin
  if (UpperCase( ExtractFileExt(frmPrinc.DBPath.Text) ) = '.TXT') or
     (UpperCase( ExtractFileExt(frmPrinc.DBPath.Text) ) = '.SQL')
  then Result := False
  else
  begin
    try
      frmPrinc.conDestino.Open;
      queryTemp := TSQLQuery.Create(nil);
      queryTemp.SQLConnection := frmPrinc.conDestino;
      queryTemp.SQL.Clear;
      queryTemp.SQL.Add('select g.codi from grup_prod g where g.codi = :PCODI');
      queryTemp.ParamByName('PCODI').AsString := Codigo;
      queryTemp.Open;

      if queryTemp.IsEmpty = True then
        Result := False
      else
        Result := True;
    finally
      queryTemp.Free;
      frmPrinc.conDestino.Close;
    end;
  end;
end;


//FUNÇÃO PARA RECONHECER SE JA EXISTE O CODIGO DO SUB GRUPO OU NAO
function temSubGrup(Codigo: String): Boolean;
var
  queryTemp: TSQLQuery;

begin
  if (UpperCase( ExtractFileExt(frmPrinc.DBPath.Text) ) = '.TXT') or
     (UpperCase( ExtractFileExt(frmPrinc.DBPath.Text) ) = '.SQL')
  then Result := False
  else
  begin
    try
      frmPrinc.conDestino.Open;
      queryTemp := TSQLQuery.Create(nil);
      queryTemp.SQLConnection := frmPrinc.conDestino;
      queryTemp.SQL.Clear;
      queryTemp.SQL.Add('select sg.codi from sub_grup_prod sg where sg.codi = :PCODI');
      queryTemp.ParamByName('PCODI').AsString := Codigo;
      queryTemp.Open;

      if queryTemp.IsEmpty = True then
        Result := False
      else
        Result := True;
    finally
      queryTemp.Free;
      frmPrinc.conDestino.Close;
    end;
  end;
end;


//FUNÇÃO PARA RECONHECER SE JA EXISTE O CODIGO DA MARCA OU NAO
function temMarca(Codigo: String): Boolean;
var
  queryTemp: TSQLQuery;

begin
  if (UpperCase( ExtractFileExt(frmPrinc.DBPath.Text) ) = '.TXT') or
     (UpperCase( ExtractFileExt(frmPrinc.DBPath.Text) ) = '.SQL')
  then Result := False
  else
  begin
    try
      frmPrinc.conDestino.Open;
      queryTemp := TSQLQuery.Create(nil);
      queryTemp.SQLConnection := frmPrinc.conDestino;
      queryTemp.SQL.Clear;
      queryTemp.SQL.Add('select m.codi from marca m where m.codi = :PCODI');
      queryTemp.ParamByName('PCODI').AsString := Codigo;
      queryTemp.Open;

      if queryTemp.IsEmpty = True then
        Result := False
      else
        Result := True;
    finally
      queryTemp.Free;
      frmPrinc.conDestino.Close;
    end;
  end;
end;


//FUNÇÃO PARA RETORNAR CODIGO DO CLIE/FORN PELO NOME
function getCodiClieForn(clieforn: String): Integer;
var
  queryTemp: TSQLQuery;

begin
  if (UpperCase( ExtractFileExt(frmPrinc.DBPath.Text) ) = '.TXT') or
     (UpperCase( ExtractFileExt(frmPrinc.DBPath.Text) ) = '.SQL')
  then Result := 0
  else
  begin
    try
      try
        frmPrinc.conDestino.Open;
        queryTemp := TSQLQuery.Create(nil);
        queryTemp.SQLConnection := frmPrinc.conDestino;
        queryTemp.SQL.Clear;
        //queryTemp.SQL.Add('select c.codi from clieforn c where c.nome = :PNOME');
        //queryTemp.ParamByName('PNOME').AsString := clieforn;
        queryTemp.CommandText := 'select c.codi from clieforn c where c.nome = ' + clieforn + ';';
        queryTemp.ExecSQL;
        queryTemp.Open;

        Result := queryTemp.FieldByName('CODI').AsInteger;

      except
        on e: exception do
        begin
          ShowMessage('Erro SQL: '+e.message+sLineBreak+queryTemp.CommandText);
        end;
      end;
    finally
      queryTemp.Free;
      frmPrinc.conDestino.Close;
    end;
  end;
end;


//FUNÇÃO PARA INSERTS SQL
function queryInsert(sql: string): Integer;
var
  gen_id: Integer;
  queryTemp: TSQLQuery;
  fileTXT: TextFile;

begin
  try
    try
      frmPrinc.conDestino.Open;
      queryTemp := TSQLQuery.Create(nil);
      queryTemp.SQLConnection := frmPrinc.conDestino;
      queryTemp.SQL.Clear;
      queryTemp.CommandText := sql;
      queryTemp.ExecSQL;

    except
      on e: exception do
      begin
        ShowMessage('Erro queryInsert SQL: '+e.message+sLineBreak+queryTemp.CommandText+'\nContinuando sem inserir.');
      end;
    end;
  finally
    if queryTemp.IsEmpty then
    begin
      Result := -1;
    end
    else begin
      Result := queryTemp.FieldByName('CODI').AsInteger;
    end;
    queryTemp.Close;
    frmPrinc.conDestino.Close;
  end;
end;


//FUNÇÃO PARA CONSULTAS SQL QUE RETORNAM 1 RESULTADO
function querySelect(sql: String): String;
var
  queryTemp: TSQLQuery;

begin
  if (UpperCase( ExtractFileExt(frmPrinc.DBPath.Text) ) = '.TXT') or
     (UpperCase( ExtractFileExt(frmPrinc.DBPath.Text) ) = '.SQL')
  then Result := ''

  else
    try
      try
        frmPrinc.conDestino.Open;
        queryTemp := TSQLQuery.Create(nil);
        queryTemp.SQLConnection := frmPrinc.conDestino;
        queryTemp.SQL.Clear;
        queryTemp.CommandText := sql;
        queryTemp.ExecSQL;
        queryTemp.Open;

        Result := queryTemp.Fields[0].AsString;

      except
        on e: exception do
        begin
          ShowMessage('Erro SQL: '+e.message+sLineBreak+queryTemp.CommandText);
        end;
      end;
    finally
      queryTemp.Free;
      frmPrinc.conDestino.Close;
    end;
end;


//Função que tenta transformar a string em numero e retorna TRUE se conseguir
function IsNumeric(S : String) : Boolean;
begin
  Result := True;
  Try
     StrToInt(S);
  Except
    Result := False;
  end;
end;


//Função para testar colunas com mesmo nome
function checkCol(grid: TStringGrid) : Boolean;
var
  i,j: Integer;
  temp: string;
begin
  Result := True;
  for i := 1 to grid.ColCount-1 do
  begin
    temp := grid.Cells[i,0];
    if temp='' then Continue;

    for j := 1 to grid.ColCount-1 do
    begin
      if i=j then Continue;
      if grid.Cells[j,0]=temp then
      begin
        ShowMessage('Colunas com mesmo nome ('+temp+'): '+IntToStr(i)+' e '+IntToStr(j));
        Result := False;
        Exit;
      end;
    end;
  end;
end;


//Função para encontrar o codigo do produto quando é Update e não usa CODI
function TfrmPrinc.getProdCodUpdate(line: Integer) : String;
var
  i,j: Integer;
  str, temp: string;
begin
  str := '';
  for j := 0 to colUpdateCount-1 do begin
    //Testa se alguma das colunas marcadas como update pode ser substituida pelo codigo
    if LowerCase(colUpdate[j]) = 'refe' then begin
      i := BuscaColuna(StringGrid1,'refe');
      if i <> -1 then begin
        temp := UpperCase(RemoveAcento(StringGrid1.Cells[i,line]));
        temp := stringreplace(temp, ',', '.',[rfReplaceAll, rfIgnoreCase]);

        if str <> '' then str := str + ' and ';
        str := str + 'refe = '+QuotedStr(temp);
      end;
    end;
    if LowerCase(colUpdate[j]) = 'refe_original' then begin
      i := BuscaColuna(StringGrid1,'refe_original');
      if i <> -1 then begin
        temp := UpperCase(RemoveAcento(StringGrid1.Cells[i,line]));
        temp := stringreplace(temp, ',', '.',[rfReplaceAll, rfIgnoreCase]);

        if str <> '' then str := str + ' and ';
        str := str + 'refe_original = '+QuotedStr(temp);
      end;
    end;
    if LowerCase(colUpdate[j]) = 'codi_barra' then begin
      i := BuscaColuna(StringGrid1,'codi_barra');
      if i <> -1 then begin
        temp := UpperCase(RemoveAcento(StringGrid1.Cells[i,line]));
        temp := stringreplace(temp, ',', '.',[rfReplaceAll, rfIgnoreCase]);

        if str <> '' then str := str + ' and ';
        str := str + 'codi_barra = '+QuotedStr(temp);
      end;
    end;
    if LowerCase(colUpdate[j]) = 'codi_barra_com' then begin
      i := BuscaColuna(StringGrid1,'codi_barra_com');
      if i <> -1 then begin
        temp := UpperCase(RemoveAcento(StringGrid1.Cells[i,line]));
        temp := stringreplace(temp, ',', '.',[rfReplaceAll, rfIgnoreCase]);

        if str <> '' then str := str + ' and ';
        str := str + 'codi_barra_com = '+QuotedStr(temp);
      end;
    end;
  end;
  if str = '' then Result := ''
  else Result := '(select codi from prod where ' +str+ ' )';
end;


//FIM DAS FUNÇÕES ANTES DA IMPORTAÇÃO
//------------------------------------------------------------------------------


//IMPORTAR DADOS
procedure TfrmPrinc.ButImportClick(Sender: TObject);
var
  SQL: TSQLDataSet;
  temp, temp2, max: String;
  colClieForn, dadosClieForn, condUpdateClieForn, dadosUpdateClieForn: String;
  colProd, dadosProd, condUpdateProd, dadosUpdateProd: String;
  colProdTrib, dadosProdTrib, condUpdateProdTrib, dadosUpdateProdTrib, colRegistroProdTrib, dadosRegistroProdTrib: String;
  colProdAdic, dadosProdAdic, condUpdateProdAdic, dadosUpdateProdAdic, colRegistroProdAdic, dadosRegistroProdAdic: String;
  colProdCust, dadosProdCust, condUpdateProdCust, dadosUpdateProdCust, colRegistroProdCust, dadosRegistroProdCust: String;
  colItens, dadosItens, condUpdateItens, dadosUpdateItens: String;
  colMVA, dadosMVA, colRegistroMVA, dadosRegistroMVA: String;
  colProdForn, dadosProdForn: String;
  colGrupo, dadosGrupo, condUpdateGrupo, dadosUpdateGrupo: String;
  colSubGrupo, dadosSubGrupo, condUpdateSubGrupo, dadosUpdateSubGrupo: String;
  colMarca, dadosMarca, condUpdateMarca, dadosUpdateMarca: String;
  colTituP, dadosTituP, condUpdateTituP, dadosUpdateTituP: string;
  colTituR, dadosTituR, condUpdateTituR, dadosUpdateTituR: string;
  colBTitu, dadosBTitu, condUpdateBTitu, dadosUpdateBTitu: string;
  prodCod, prodEmpr: string;
  i,j,k,l,status,count, but, butContinue: integer;
  saldo: Double;
  fileTXT: TextFile;

begin
  //Incicialmente, testar se existem colunas com mesmo nome
  if checkCol(StringGrid1)=False then Exit;
  //Se não tiver colunas iguais, segue importação.

  //Verificar se não selecionou um tipo de imporatação, finaliza
  if SelectImport.Text = 'Tipo de Importação' then begin
    ShowMessage('Selecione um tipo de Importação.');
    Exit;
  end;

  //Verificar se selecionou um destino para importar
  if DBPath.Text = 'Caminho do destino (TXT, SQL) ou DADOS (.FDB)' then begin
    ShowMessage('Selecione um destino para a Importação.');
    Exit;
  end;


  //Status se esta OK ou se tem erro, setado como OK
  status := 1;

  //Flag se o botão continuar foi clicado
  butContinue := 0;

  try
    try
      //Criar tela de loading
      frmImportando.Show;
      frmImportando.Label2.Font.Color := clBlack;

      //Carregar inicio da StartLine
      if not IsNumeric(StartLine.Text) then begin
        StartLine.Text := '1';
      end;
      if StrToInt(StartLine.Text) <= 0 then begin
        StartLine.Text := '1';
      end;
      if StrToInt(StartLine.Text) > StringGrid1.RowCount then begin
        ShowMessage('Inicio maior que o número máximo de linhas: '+IntToStr(StringGrid1.RowCount));
        Exit;
      end;

      //Buscar quantidade de empresas
      i:=BuscaColuna(StringGrid1,'empr');
      if (i<>-1) then
      begin
        qtdEmpr := quantidadeEmpresas(i);
      end
      else qtdEmpr := 1;


      for k := StrToInt(StartLine.Text) to StringGrid1.RowCount-1 do
      begin

        //Atualizar StartLine
        StartLine.Text := IntToStr(k);

        //Se clicou em cancelar, quebra o laço das linhas e finaliza importação.
        //if frmImportando.Active=False then break; - Usando Active, se minimizar a tela cancela.
        if frmImportando.Visible=False then break;


        //Atualizar Status
        frmImportando.atualizaItens(k,StringGrid1.RowCount-1);

        //----------------------------------------------------------------------
        //----------------------------------------------------------------------
        //Importar Clientes e Fornecedores
        if SelectImport.Text = 'Clie/Forn' then
        begin
          //ShowMessage('Importar Clie/Forn');

          frmImportando.atualizaStatus('Clie/Forn '+ IntToStr(k));

          colClieForn := '';
          dadosClieForn := '';
          condUpdateClieForn := '';
          dadosUpdateClieForn := '';

          //Carregar informações para importar
          //-------------------------------------------------------

          //Codigo é obrigatório, se não tiver preenche com o generator
          //CODI (CODIGO)
          i:=BuscaColuna(StringGrid1,'codi');
          if (i<>-1) then
          begin
            if (StringGrid1.Cells[i,k]='') then
            begin
              ShowMessage('Código em branco na linha '+IntToStr(k));
            end
            else begin
              StringGrid1.Cells[i,k] := stringreplace(StringGrid1.Cells[i,k], '.', '',[rfReplaceAll, rfIgnoreCase]);
              colClieForn := colClieForn + 'codi';
              dadosClieForn := dadosClieForn + '''' + StringGrid1.Cells[i,k] + '''';
              //Testa se é Update
              if VerificaUpdate('codi') = 1 then
                condUpdateClieForn := condUpdateClieForn + 'codi=' + '''' + StringGrid1.Cells[i,k] + ''''
              else dadosUpdateClieForn := dadosUpdateClieForn + 'codi=' + '''' + StringGrid1.Cells[i,k] + '''';
            end;
          end
          else begin
            colClieForn := colClieForn + 'codi';
            dadosClieForn := dadosClieForn + 'gen_id(gen_clieforn_id,1)';
          end;

          //Importar cidade se tiver, precisa ter o UF antes de importar a cidade
          //UF
          temp := '';
          i:=BuscaColuna(StringGrid1,'uf');
          if (i<>-1) then
          begin
            if (StringGrid1.Cells[i,k]<>'') then
            begin
              temp := UpperCase(RemoveAcento(StringGrid1.Cells[i,k]));
              colClieForn := colClieForn + ',uf';
              dadosClieForn := dadosClieForn + ',''' + temp + '''';
              //Testa se é Update
              if VerificaUpdate('uf') = 1 then begin
                if condUpdateClieForn <> '' then condUpdateClieForn := condUpdateClieForn + ' and ';
                condUpdateClieForn := condUpdateClieForn + 'uf=' + '''' + temp + '''';
              end
              else begin
                if dadosUpdateClieForn <> '' then dadosUpdateClieForn := dadosUpdateClieForn + ', ';
                dadosUpdateClieForn := dadosUpdateClieForn + 'uf=' + '''' + temp + '''';
              end;
            end;
          end;
          //CIDA (CIDADE)
          i:=BuscaColuna(StringGrid1,'cida');
          if ((i<>-1) and (temp<>'')) then
          begin
            temp2 := UpperCase(RemoveAcento(StringGrid1.Cells[i,k]));
            temp2 := stringreplace(temp2, '''', QuotedStr(''''),[rfReplaceAll, rfIgnoreCase]);
            temp := buscaCidade(temp2, temp);
            if (temp <> '') then
            begin
              colClieForn := colClieForn + ',cida,codi_cida';
              dadosClieForn := dadosClieForn + ',''' + temp2 + '''';
              dadosClieForn := dadosClieForn + ',''' + temp + '''';
              //Testa se é Update
              if VerificaUpdate('cida') = 1 then begin
                if condUpdateClieForn <> '' then condUpdateClieForn := condUpdateClieForn + ' and ';
                condUpdateClieForn := condUpdateClieForn + 'cida=' + '''' + temp2 + '''';
              end
              else begin
                if dadosUpdateClieForn <> '' then dadosUpdateClieForn := dadosUpdateClieForn + ', ';
                dadosUpdateClieForn := dadosUpdateClieForn + 'cida=' + '''' + temp2 + ''', codi_cida=' + temp;
              end;
            end;
          end;


          for i := 0 to StringGrid1.ColCount-1 do
          begin
            //EMPRESA
            if ((LowerCase(StringGrid1.Cells[i,0])='empresa') and (StringGrid1.Cells[i,0]<>'')) then
            begin
              colClieForn := colClieForn + ',empresa';
              temp := UpperCase(RemoveAcento(StringGrid1.Cells[i,k]));
              dadosClieForn := dadosClieForn + ',''' + temp + '''';
              //Testa se é Update
              if VerificaUpdate('empresa') = 1 then begin
                if condUpdateClieForn <> '' then condUpdateClieForn := condUpdateClieForn + ' and ';
                condUpdateClieForn := condUpdateClieForn + 'empresa=' + '''' + temp + '''';
              end
              else begin
                if dadosUpdateClieForn <> '' then dadosUpdateClieForn := dadosUpdateClieForn + ', ';
                dadosUpdateClieForn := dadosUpdateClieForn + 'empresa=' + '''' + temp + '''';
              end;
            end
            //GRUPO
            else if ((LowerCase(StringGrid1.Cells[i,0])='grupo') and (StringGrid1.Cells[i,0]<>'')) then
            begin
              temp := UpperCase(RemoveAcento(StringGrid1.Cells[i,k]));
              temp := stringreplace(temp, '''', ' ',[rfReplaceAll, rfIgnoreCase]);
              temp := (Copy(temp,1,50));
              //Se for letras, buscar código.
              if not (IsNumeric(temp)) then
              begin
                temp2 := querySelect('select g.codi from grupo_cliente g where g.descr = '''+temp+'''');
                //Se não encontrar a string, cadastrar sub grupo
                if temp2='' then begin
                  if UpperCase( ExtractFileExt(frmPrinc.DBPath.Text) ) = '.TXT' then begin
                    //Carregar arquivo TXT
                    AssignFile(fileTXT, DBPath.Text);
                    if not FileExists(DBPath.Text) then ReWrite(fileTXT)
                    else append(fileTXT);
                    WriteLn(fileTXT, 'insert into grupo_cliente (CODI,DESCR,COMISSAO) values (case when (select gc.codi from grupo_cliente gc where gc.descr='''+temp+''') is null then gen_id(gen_grupo_cliente_id,1 ) else (select gc.codi from grupo_cliente gc where gc.descr='''+temp+''') end,'''+temp+''',1);');
                    WriteLn(fileTXT, 'COMMIT WORK;');
                    CloseFile(fileTXT);
                  end
                  else begin
                    queryInsert('insert into grupo_cliente (CODI,DESCR,COMISSAO) values (gen_id(gen_grupo_cliente_id,1),'''+temp+''',1);');
                  end;
                  colClieForn := colClieForn + ',codi_grupo_clie';
                  dadosClieForn := dadosClieForn + ',' + 'gen_id(gen_grupo_cliente_id,0)';
                end
                else begin
                  colClieForn := colClieForn + ',codi_grupo_clie';
                  dadosClieForn := dadosClieForn + ',''' + temp2 + '''';
                  //Testa se é Update
                  if VerificaUpdate('grupo') = 1 then begin
                    ShowMessage('Só é possível utilizar o código do grupo como Update, não da pra usar a descrição.');
                    Exit;
                  end
                  else begin
                    if dadosUpdateClieForn <> '' then dadosUpdateClieForn := dadosUpdateClieForn + ', ';
                    dadosUpdateClieForn := dadosUpdateClieForn + 'grupo=' + '''' + temp + '''';
                  end;
                end;

              end
              else begin
                //Se for números, considera como código
                //Antes buscamos se existe o código cadastrado, se não encontrar colocamos o generator mesmo
                temp2 := querySelect('select g.codi from grupo_cliente g where g.codi = '''+temp+'''');
                //Se não encontrar o codigo, colocamos o generator
                if temp2='' then begin
                  colClieForn := colClieForn + ',codi_grupo_clie';
                  dadosClieForn := dadosClieForn + ',' + 'gen_id(gen_grupo_cliente_id,0)';
                end
                //Se encontrar usa o código
                else begin
                  colClieForn := colClieForn + ',codi_grupo_clie';
                  dadosClieForn := dadosClieForn + ',''' + temp2 + '''';
                end;
                //Testa se é Update
                if VerificaUpdate('grupo') = 1 then begin
                  if condUpdateClieForn <> '' then condUpdateClieForn := condUpdateClieForn + ' and ';
                  condUpdateClieForn := condUpdateClieForn + 'codi_grupo_clie=' + '''' + temp + '''';
                end
                else begin
                  if dadosUpdateClieForn <> '' then dadosUpdateClieForn := dadosUpdateClieForn + ', ';
                  dadosUpdateClieForn := dadosUpdateClieForn + 'codi_grupo_clie=' + '''' + temp + '''';
                end;
              end;
            end
            //NOME
            else if ((LowerCase(StringGrid1.Cells[i,0])='nome') and (StringGrid1.Cells[i,0]<>'')) then
            begin
              colClieForn := colClieForn + ',nome';
              temp := UpperCase(RemoveAcento(StringGrid1.Cells[i,k]));
              temp := stringreplace(temp, '''', QuotedStr(''''),[rfReplaceAll, rfIgnoreCase]);
              temp2 := (Copy(temp,1,60));
              dadosClieForn := dadosClieForn + ',''' + temp2 + '''';
              //Testa se é Update
              if VerificaUpdate('nome') = 1 then begin
                if condUpdateClieForn <> '' then condUpdateClieForn := condUpdateClieForn + ' and ';
                condUpdateClieForn := condUpdateClieForn + 'nome=' + '''' + temp2 + '''';
              end
              else begin
                if dadosUpdateClieForn <> '' then dadosUpdateClieForn := dadosUpdateClieForn + ', ';
                dadosUpdateClieForn := dadosUpdateClieForn + 'nome=' + '''' + temp2 + '''';
              end;

              //Testar se não existe coluna NOME_FANT, se não existir joga o valor da NOME
              count:=BuscaColuna(StringGrid1,'nome_fant');
              if (count=-1) then
              begin
                colClieForn := colClieForn + ',nome_fant';
                dadosClieForn := dadosClieForn + ',''' + temp2 + '''';
              end;
            end
            //NOME_FANT (NOME FANTASIA)
            else if (LowerCase(StringGrid1.Cells[i,0])='nome_fant') then
            begin
              colClieForn := colClieForn + ',nome_fant';
              temp := UpperCase(RemoveAcento(StringGrid1.Cells[i,k]));
              temp := stringreplace(temp, '''', QuotedStr(''''),[rfReplaceAll, rfIgnoreCase]);
              temp2 := (Copy(temp,1,60));
              dadosClieForn := dadosClieForn + ',''' + temp2 + '''';
              //Testa se é Update
              if VerificaUpdate('nome_fant') = 1 then begin
                if condUpdateClieForn <> '' then condUpdateClieForn := condUpdateClieForn + ' and ';
                condUpdateClieForn := condUpdateClieForn + 'nome_fant=' + '''' + temp2 + '''';
              end
              else begin
                if dadosUpdateClieForn <> '' then dadosUpdateClieForn := dadosUpdateClieForn + ', ';
                dadosUpdateClieForn := dadosUpdateClieForn + 'nome_fant=' + '''' + temp2 + '''';
              end;

              //Testar se não existe coluna NOME, se não existir joga o valor da NOME_FANT
              count:=BuscaColuna(StringGrid1,'nome');
              if (count=-1) then
              begin
                colClieForn := colClieForn + ',nome';
                dadosClieForn := dadosClieForn + ',''' + temp2 + '''';
              end;
            end
            //DATA_NASC
            else if (LowerCase(StringGrid1.Cells[i,0])='data_nasc') then
            begin
              temp := Trim(StringGrid1.Cells[i,k]);
              temp := stringreplace(temp, '-', '',[rfReplaceAll, rfIgnoreCase]);
              temp := stringreplace(temp, '/', '',[rfReplaceAll, rfIgnoreCase]);
              temp := stringreplace(temp, '.', '',[rfReplaceAll, rfIgnoreCase]);
              if temp.Length >= 8 then
              begin
                temp := (Copy(temp,1,2)) +'.'+ (Copy(temp,3,2)) +'.'+ (Copy(temp,5,4));
                colClieForn := colClieForn + ',data_nasc';
                dadosClieForn := dadosClieForn + ',''' + temp + '''';
                //Testa se é Update
                if VerificaUpdate('data_nasc') = 1 then begin
                  if condUpdateClieForn <> '' then condUpdateClieForn := condUpdateClieForn + ' and ';
                  condUpdateClieForn := condUpdateClieForn + 'data_nasc=' + '''' + temp + '''';
                end
                else begin
                  if dadosUpdateClieForn <> '' then dadosUpdateClieForn := dadosUpdateClieForn + ', ';
                  dadosUpdateClieForn := dadosUpdateClieForn + 'data_nasc=' + '''' + temp + '''';
                end;
              end
              else if temp.Length = 6 then begin
                temp2 := (Copy(DateToStr(Date()),9,2));
                //Testa os dois ultimos caracteres da data atual com nascimento do cliente
                //Se os caracteres da data de nascimento do cliente forem maiores, significa que é um século antes
                if StrToInt(temp2)<StrToInt(Copy(temp,5,2)) then temp2 := IntToStr(StrToInt(temp2)-1);
                temp := (Copy(temp,1,2)) +'.'+ (Copy(temp,3,2)) +'.'+ temp2 + (Copy(temp,5,2));
                colClieForn := colClieForn + ',data_nasc';
                dadosClieForn := dadosClieForn + ',''' + temp + '''';
                //Testa se é Update
                if VerificaUpdate('data_nasc') = 1 then begin
                  if condUpdateClieForn <> '' then condUpdateClieForn := condUpdateClieForn + ' and ';
                  condUpdateClieForn := condUpdateClieForn + 'data_nasc=' + '''' + temp + '''';
                end
                else begin
                  if dadosUpdateClieForn <> '' then dadosUpdateClieForn := dadosUpdateClieForn + ', ';
                  dadosUpdateClieForn := dadosUpdateClieForn + 'data_nasc=' + '''' + temp + '''';
                end;
              end;
            end
            //CPF
            else if (LowerCase(StringGrid1.Cells[i,0])='cpf') then
            begin
              temp := Trim(StringGrid1.Cells[i,k]);
              temp := stringreplace(temp, '-', '',[rfReplaceAll, rfIgnoreCase]);
              temp := stringreplace(temp, '/', '',[rfReplaceAll, rfIgnoreCase]);
              temp := stringreplace(temp, '.', '',[rfReplaceAll, rfIgnoreCase]);
              if temp.Length = 11 then
              begin
                temp := (Copy(temp,1,3))+ '.' + (Copy(temp,4,3)) + '.' + (Copy(temp,7,3)) + '-' + (Copy(temp,10,2));
                colClieForn := colClieForn + ',cpf';
                dadosClieForn := dadosClieForn + ',''' + temp + '''';
                //Setar tipo (Fisca ou Juridica)
                colClieForn := colClieForn + ',tipo';
                dadosClieForn := dadosClieForn + ',''' + 'F' + '''';
                //Testa se é Update
                if VerificaUpdate('cpf') = 1 then begin
                  if condUpdateClieForn <> '' then condUpdateClieForn := condUpdateClieForn + ' and ';
                  condUpdateClieForn := condUpdateClieForn + 'cpf=' + '''' + temp + '''';
                end
                else begin
                  if dadosUpdateClieForn <> '' then dadosUpdateClieForn := dadosUpdateClieForn + ', ';
                  dadosUpdateClieForn := dadosUpdateClieForn + 'cpf=' + '''' + temp + '''';
                  dadosUpdateClieForn := dadosUpdateClieForn + 'tipo=' + '''' + 'F' + '''';
                end;
              end;
            end
            //CNPJ
            else if (LowerCase(StringGrid1.Cells[i,0])='cnpj') then
            begin
              temp := Trim(StringGrid1.Cells[i,k]);
              temp := stringreplace(temp, '-', '',[rfReplaceAll, rfIgnoreCase]);
              temp := stringreplace(temp, '/', '',[rfReplaceAll, rfIgnoreCase]);
              temp := stringreplace(temp, '.', '',[rfReplaceAll, rfIgnoreCase]);
              if temp.Length = 14 then
              begin
                temp := (Copy(temp,1,2))+ '.' + (Copy(temp,3,3)) + '.' + (Copy(temp,6,3)) + '/' + (Copy(temp,9,4)) + '-' + (Copy(temp,13,2));
                colClieForn := colClieForn + ',cnpj';
                dadosClieForn := dadosClieForn + ',''' + temp + '''';
                //Setar tipo (Fisca ou Juridica)
                colClieForn := colClieForn + ',tipo';
                dadosClieForn := dadosClieForn + ',''' + 'J' + '''';
                //Testa se é Update
                if VerificaUpdate('cnpj') = 1 then begin
                  if condUpdateClieForn <> '' then condUpdateClieForn := condUpdateClieForn + ' and ';
                  condUpdateClieForn := condUpdateClieForn + 'cnpj=' + '''' + temp + '''';
                end
                else begin
                  if dadosUpdateClieForn <> '' then dadosUpdateClieForn := dadosUpdateClieForn + ', ';
                  dadosUpdateClieForn := dadosUpdateClieForn + 'cnpj=' + '''' + temp + '''';
                  dadosUpdateClieForn := dadosUpdateClieForn + 'tipo=' + '''' + 'J' + '''';
                end;
              end;
            end
            //CPF OU CNPJ NO MESMO CAMPO
            else if (LowerCase(StringGrid1.Cells[i,0])='cpf_cnpj') then
            begin
              temp := Trim(StringGrid1.Cells[i,k]);
              temp := stringreplace(temp, '-', '',[rfReplaceAll, rfIgnoreCase]);
              temp := stringreplace(temp, '/', '',[rfReplaceAll, rfIgnoreCase]);
              temp := stringreplace(temp, '.', '',[rfReplaceAll, rfIgnoreCase]);
              if temp.Length = 11 then
              begin
                temp2 := (Copy(temp,1,3))+ '.' + (Copy(temp,4,3)) + '.' + (Copy(temp,7,3)) + '-' + (Copy(temp,10,2));
                colClieForn := colClieForn + ',cpf';
                dadosClieForn := dadosClieForn + ',''' + temp2 + '''';
                //Setar tipo (Fisca ou Juridica)
                colClieForn := colClieForn + ',tipo';
                dadosClieForn := dadosClieForn + ',''' + 'F' + '''';
                //Testa se é Update
                if VerificaUpdate('cpf_cnpj') = 1 then begin
                  if condUpdateClieForn <> '' then condUpdateClieForn := condUpdateClieForn + ' and ';
                  condUpdateClieForn := condUpdateClieForn + 'cpf=' + '''' + temp + '''';
                end
                else begin
                  if dadosUpdateClieForn <> '' then dadosUpdateClieForn := dadosUpdateClieForn + ', ';
                  dadosUpdateClieForn := dadosUpdateClieForn + 'cpf=' + '''' + temp + '''';
                  dadosUpdateClieForn := dadosUpdateClieForn + 'tipo=' + '''' + 'F' + '''';
                end;
              end
              else if temp.Length = 14 then
              begin
                temp2 := (Copy(temp,1,2))+ '.' + (Copy(temp,3,3)) + '.' + (Copy(temp,6,3)) + '/' + (Copy(temp,9,4)) + '-' + (Copy(temp,13,2));
                colClieForn := colClieForn + ',cnpj';
                dadosClieForn := dadosClieForn + ',''' + temp2 + '''';
                //Setar tipo (Fisca ou Juridica)
                colClieForn := colClieForn + ',tipo';
                dadosClieForn := dadosClieForn + ',''' + 'J' + '''';
                //Testa se é Update
                if VerificaUpdate('cpf_cnpj') = 1 then begin
                  if condUpdateClieForn <> '' then condUpdateClieForn := condUpdateClieForn + ' and ';
                  condUpdateClieForn := condUpdateClieForn + 'cnpj=' + '''' + temp + '''';
                end
                else begin
                  if dadosUpdateClieForn <> '' then dadosUpdateClieForn := dadosUpdateClieForn + ', ';
                  dadosUpdateClieForn := dadosUpdateClieForn + 'cnpj=' + '''' + temp + '''';
                  dadosUpdateClieForn := dadosUpdateClieForn + 'tipo=' + '''' + 'F' + '''';
                end;
              end;
            end
            //RG
            else if (LowerCase(StringGrid1.Cells[i,0])='rg') then
            begin
              temp := Trim(StringGrid1.Cells[i,k]);
              temp := stringreplace(temp, '-', '',[rfReplaceAll, rfIgnoreCase]);
              temp := stringreplace(temp, '/', '',[rfReplaceAll, rfIgnoreCase]);
              temp := stringreplace(temp, '.', '',[rfReplaceAll, rfIgnoreCase]);
              temp := (Copy(temp,1,16));
              if temp.Length > 1 then
              begin
                colClieForn := colClieForn + ',rg';
                dadosClieForn := dadosClieForn + ',''' + temp + '''';
                //Testa se é Update
                if VerificaUpdate('rg') = 1 then begin
                  if condUpdateClieForn <> '' then condUpdateClieForn := condUpdateClieForn + ' and ';
                  condUpdateClieForn := condUpdateClieForn + 'rg=' + '''' + temp + '''';
                end
                else begin
                  if dadosUpdateClieForn <> '' then dadosUpdateClieForn := dadosUpdateClieForn + ', ';
                  dadosUpdateClieForn := dadosUpdateClieForn + 'rg=' + '''' + temp + '''';
                end;
              end
              else begin
                colClieForn := colClieForn + ',rg';
                dadosClieForn := dadosClieForn + ',''' + 'ISENTO' + '''';
              end;
            end
            //INSC (INSCRICAO ESTADUAL-IE)
            else if (LowerCase(StringGrid1.Cells[i,0])='insc') then
            begin
              temp := Trim(StringGrid1.Cells[i,k]);
              temp := stringreplace(temp, '-', '',[rfReplaceAll, rfIgnoreCase]);
              temp := stringreplace(temp, '/', '',[rfReplaceAll, rfIgnoreCase]);
              temp := stringreplace(temp, '.', '',[rfReplaceAll, rfIgnoreCase]);
              temp := (Copy(temp,1,20));
              if temp.Length > 1 then
              begin
                colClieForn := colClieForn + ',insc';
                dadosClieForn := dadosClieForn + ',''' + temp + '''';
                //Testa se é Update
                if VerificaUpdate('insc') = 1 then begin
                  if condUpdateClieForn <> '' then condUpdateClieForn := condUpdateClieForn + ' and ';
                  condUpdateClieForn := condUpdateClieForn + 'insc=' + '''' + temp + '''';
                end
                else begin
                  if dadosUpdateClieForn <> '' then dadosUpdateClieForn := dadosUpdateClieForn + ', ';
                  dadosUpdateClieForn := dadosUpdateClieForn + 'insc=' + '''' + temp + '''';
                end;
              end
              else begin
                colClieForn := colClieForn + ',insc';
                dadosClieForn := dadosClieForn + ',''' + 'ISENTO' + '''';
              end;
            end
            //INSCR_PRODUTOR (INSCRICAO DE PRODUTOR RURAL)
            else if (LowerCase(StringGrid1.Cells[i,0])='inscr_produtor') then
            begin
              temp := Trim(StringGrid1.Cells[i,k]);
              temp := stringreplace(temp, '-', '',[rfReplaceAll, rfIgnoreCase]);
              temp := stringreplace(temp, '/', '',[rfReplaceAll, rfIgnoreCase]);
              temp := stringreplace(temp, '.', '',[rfReplaceAll, rfIgnoreCase]);
              temp := (Copy(temp,1,20));
              if temp.Length > 1 then
              begin
                colClieForn := colClieForn + ',inscr_produtor';
                dadosClieForn := dadosClieForn + ',''' + temp + '''';
                //Testa se é Update
                if VerificaUpdate('inscr_produtor') = 1 then begin
                  if condUpdateClieForn <> '' then condUpdateClieForn := condUpdateClieForn + ' and ';
                  condUpdateClieForn := condUpdateClieForn + 'inscr_produtor=' + '''' + temp + '''';
                end
                else begin
                  if dadosUpdateClieForn <> '' then dadosUpdateClieForn := dadosUpdateClieForn + ', ';
                  dadosUpdateClieForn := dadosUpdateClieForn + 'inscr_produtor=' + '''' + temp + '''';
                end;
              end
              else begin
                colClieForn := colClieForn + ',inscr_produtor';
                dadosClieForn := dadosClieForn + ',''' + 'ISENTO' + '''';
              end;
            end
            //ENDE (ENDERECO)
            else if (LowerCase(StringGrid1.Cells[i,0])='ende') then
            begin
              colClieForn := colClieForn + ',ende';
              temp := UpperCase(RemoveAcento(StringGrid1.Cells[i,k]));
              temp := stringreplace(temp, '''', ' ',[rfReplaceAll, rfIgnoreCase]);
              temp := (Copy(temp,1,60));
              dadosClieForn := dadosClieForn + ',''' + temp + '''';
              //Testa se é Update
              if VerificaUpdate('ende') = 1 then begin
                if condUpdateClieForn <> '' then condUpdateClieForn := condUpdateClieForn + ' and ';
                condUpdateClieForn := condUpdateClieForn + 'ende=' + '''' + temp + '''';
              end
              else begin
                if dadosUpdateClieForn <> '' then dadosUpdateClieForn := dadosUpdateClieForn + ', ';
                dadosUpdateClieForn := dadosUpdateClieForn + 'ende=' + '''' + temp + '''';
              end;
            end
            //BAIR (BAIRRO)
            else if (LowerCase(StringGrid1.Cells[i,0])='bair') then
            begin
              colClieForn := colClieForn + ',bair';
              temp := UpperCase(RemoveAcento(StringGrid1.Cells[i,k]));
              temp := stringreplace(temp, '''', ' ',[rfReplaceAll, rfIgnoreCase]);
              temp := (Copy(temp,1,30));
              dadosClieForn := dadosClieForn + ',''' + temp + '''';
              //Testa se é Update
              if VerificaUpdate('bair') = 1 then begin
                if condUpdateClieForn <> '' then condUpdateClieForn := condUpdateClieForn + ' and ';
                condUpdateClieForn := condUpdateClieForn + 'bair=' + '''' + temp + '''';
              end
              else begin
                if dadosUpdateClieForn <> '' then dadosUpdateClieForn := dadosUpdateClieForn + ', ';
                dadosUpdateClieForn := dadosUpdateClieForn + 'bair=' + '''' + temp + '''';
              end;
            end
            //COMP (COMPLEMENTO)
            else if (LowerCase(StringGrid1.Cells[i,0])='comp') then
            begin
              colClieForn := colClieForn + ',comp';
              temp := UpperCase(RemoveAcento(StringGrid1.Cells[i,k]));
              temp := stringreplace(temp, '''', ' ',[rfReplaceAll, rfIgnoreCase]);
              temp := (Copy(temp,1,30));
              dadosClieForn := dadosClieForn + ',''' + temp + '''';
              //Testa se é Update
              if VerificaUpdate('comp') = 1 then begin
                if condUpdateClieForn <> '' then condUpdateClieForn := condUpdateClieForn + ' and ';
                condUpdateClieForn := condUpdateClieForn + 'comp=' + '''' + temp + '''';
              end
              else begin
                if dadosUpdateClieForn <> '' then dadosUpdateClieForn := dadosUpdateClieForn + ', ';
                dadosUpdateClieForn := dadosUpdateClieForn + 'comp=' + '''' + temp + '''';
              end;
            end
            //CEP
            else if (LowerCase(StringGrid1.Cells[i,0])='cep') then
            begin
              temp := Trim(StringGrid1.Cells[i,k]);
              temp := stringreplace(temp, '-', '',[rfReplaceAll, rfIgnoreCase]);
              temp := stringreplace(temp, '/', '',[rfReplaceAll, rfIgnoreCase]);
              temp := stringreplace(temp, '.', '',[rfReplaceAll, rfIgnoreCase]);
              colClieForn := colClieForn + ',cep';
              dadosClieForn := dadosClieForn + ',''' + temp + '''';
              //Testa se é Update
              if VerificaUpdate('cep') = 1 then begin
                if condUpdateClieForn <> '' then condUpdateClieForn := condUpdateClieForn + ' and ';
                condUpdateClieForn := condUpdateClieForn + 'cep=' + '''' + temp + '''';
              end
              else begin
                if dadosUpdateClieForn <> '' then dadosUpdateClieForn := dadosUpdateClieForn + ', ';
                dadosUpdateClieForn := dadosUpdateClieForn + 'cep=' + '''' + temp + '''';
              end;
            end
            //PROX (PROXIMIDADE)
            else if (LowerCase(StringGrid1.Cells[i,0])='prox') then
            begin
              temp := Trim(StringGrid1.Cells[i,k]);
              colClieForn := colClieForn + ',prox';
              dadosClieForn := dadosClieForn + ',''' + temp + '''';
              //Testa se é Update
              if VerificaUpdate('prox') = 1 then begin
                if condUpdateClieForn <> '' then condUpdateClieForn := condUpdateClieForn + ' and ';
                condUpdateClieForn := condUpdateClieForn + 'prox=' + '''' + temp + '''';
              end
              else begin
                if dadosUpdateClieForn <> '' then dadosUpdateClieForn := dadosUpdateClieForn + ', ';
                dadosUpdateClieForn := dadosUpdateClieForn + 'prox=' + '''' + temp + '''';
              end;
            end
            //FONE
            else if (LowerCase(StringGrid1.Cells[i,0])='fone') then
            begin
              temp := StringGrid1.Cells[i,k];
              colClieForn := colClieForn + ',fone';
              dadosClieForn := dadosClieForn + ',''' + temp + '''';
              //Testa se é Update
              if VerificaUpdate('fone') = 1 then begin
                if condUpdateClieForn <> '' then condUpdateClieForn := condUpdateClieForn + ' and ';
                condUpdateClieForn := condUpdateClieForn + 'fone=' + '''' + temp + '''';
              end
              else begin
                if dadosUpdateClieForn <> '' then dadosUpdateClieForn := dadosUpdateClieForn + ', ';
                dadosUpdateClieForn := dadosUpdateClieForn + 'fone=' + '''' + temp + '''';
              end;
            end
            //FONE2
            else if (LowerCase(StringGrid1.Cells[i,0])='fone2') then
            begin
              temp := StringGrid1.Cells[i,k];
              colClieForn := colClieForn + ',fone2';
              dadosClieForn := dadosClieForn + ',''' + temp + '''';
              //Testa se é Update
              if VerificaUpdate('fone2') = 1 then begin
                if condUpdateClieForn <> '' then condUpdateClieForn := condUpdateClieForn + ' and ';
                condUpdateClieForn := condUpdateClieForn + 'fone2=' + '''' + temp + '''';
              end
              else begin
                if dadosUpdateClieForn <> '' then dadosUpdateClieForn := dadosUpdateClieForn + ', ';
                dadosUpdateClieForn := dadosUpdateClieForn + 'fone2=' + '''' + temp + '''';
              end;
            end
            //FONE_FIRM
            else if (LowerCase(StringGrid1.Cells[i,0])='fone_firm') then
            begin
              temp := StringGrid1.Cells[i,k];
              colClieForn := colClieForn + ',fone_firm';
              dadosClieForn := dadosClieForn + ',''' + temp + '''';
              //Testa se é Update
              if VerificaUpdate('fone_firm') = 1 then begin
                if condUpdateClieForn <> '' then condUpdateClieForn := condUpdateClieForn + ' and ';
                condUpdateClieForn := condUpdateClieForn + 'fone_firm=' + '''' + temp + '''';
              end
              else begin
                if dadosUpdateClieForn <> '' then dadosUpdateClieForn := dadosUpdateClieForn + ', ';
                dadosUpdateClieForn := dadosUpdateClieForn + 'fone_firm=' + '''' + temp + '''';
              end;
            end
            //FAX
            else if (LowerCase(StringGrid1.Cells[i,0])='fax') then
            begin
              temp := StringGrid1.Cells[i,k];
              colClieForn := colClieForn + ',fax';
              dadosClieForn := dadosClieForn + ',''' + temp + '''';
              //Testa se é Update
              if VerificaUpdate('fax') = 1 then begin
                if condUpdateClieForn <> '' then condUpdateClieForn := condUpdateClieForn + ' and ';
                condUpdateClieForn := condUpdateClieForn + 'fax=' + '''' + temp + '''';
              end
              else begin
                if dadosUpdateClieForn <> '' then dadosUpdateClieForn := dadosUpdateClieForn + ', ';
                dadosUpdateClieForn := dadosUpdateClieForn + 'fax=' + '''' + temp + '''';
              end;
            end
            //FIRM (Firma ou Empresa que trabalha)
            else if (LowerCase(StringGrid1.Cells[i,0])='firm') then
            begin
              temp := UpperCase(RemoveAcento(StringGrid1.Cells[i,k]));
              temp := stringreplace(temp, '''', ' ',[rfReplaceAll, rfIgnoreCase]);
              temp := (Copy(temp,1,60));
              colClieForn := colClieForn + ',firm';
              dadosClieForn := dadosClieForn + ',''' + temp + '''';
              //Testa se é Update
              if VerificaUpdate('firm') = 1 then begin
                if condUpdateClieForn <> '' then condUpdateClieForn := condUpdateClieForn + ' and ';
                condUpdateClieForn := condUpdateClieForn + 'firm=' + '''' + temp + '''';
              end
              else begin
                if dadosUpdateClieForn <> '' then dadosUpdateClieForn := dadosUpdateClieForn + ', ';
                dadosUpdateClieForn := dadosUpdateClieForn + 'firm=' + '''' + temp + '''';
              end;
            end
            //TRABALHA_DESDE (Trabalha na empresa desde quando)
            else if (LowerCase(StringGrid1.Cells[i,0])='trabalha_desde') then
            begin
              temp := Trim(StringGrid1.Cells[i,k]);
              temp := stringreplace(temp, '-', '',[rfReplaceAll, rfIgnoreCase]);
              temp := stringreplace(temp, '/', '',[rfReplaceAll, rfIgnoreCase]);
              temp := stringreplace(temp, '.', '',[rfReplaceAll, rfIgnoreCase]);
              if temp.Length >= 8 then
              begin
                temp := (Copy(temp,1,2)) +'.'+ (Copy(temp,3,2)) +'.'+ (Copy(temp,5,4));
                colClieForn := colClieForn + ',desd';
                dadosClieForn := dadosClieForn + ',''' + temp + '''';
                //Testa se é Update
                if VerificaUpdate('desd') = 1 then begin
                  if condUpdateClieForn <> '' then condUpdateClieForn := condUpdateClieForn + ' and ';
                  condUpdateClieForn := condUpdateClieForn + 'desd=' + '''' + temp + '''';
                end
                else begin
                  if dadosUpdateClieForn <> '' then dadosUpdateClieForn := dadosUpdateClieForn + ', ';
                  dadosUpdateClieForn := dadosUpdateClieForn + 'desd=' + '''' + temp + '''';
                end;
              end
              else if temp.Length = 6 then begin
                temp2 := (Copy(DateToStr(Date()),9,2));
                //Testa os dois ultimos caracteres da data atual com a data desc
                //Se os caracteres da data de nascimento do cliente forem maiores, significa que é um século antes
                if StrToInt(temp2)<StrToInt(Copy(temp,5,2)) then temp2 := IntToStr(StrToInt(temp2)-1);
                temp := (Copy(temp,1,2)) +'.'+ (Copy(temp,3,2)) +'.'+ temp2 + (Copy(temp,5,2));
                colClieForn := colClieForn + ',desd';
                dadosClieForn := dadosClieForn + ',''' + temp + '''';
                //Testa se é Update
                if VerificaUpdate('desd') = 1 then begin
                  if condUpdateClieForn <> '' then condUpdateClieForn := condUpdateClieForn + ' and ';
                  condUpdateClieForn := condUpdateClieForn + 'desd=' + '''' + temp + '''';
                end
                else begin
                  if dadosUpdateClieForn <> '' then dadosUpdateClieForn := dadosUpdateClieForn + ', ';
                  dadosUpdateClieForn := dadosUpdateClieForn + 'desd=' + '''' + temp + '''';
                end;
              end;
            end
            //ENDE_FIRM (Endereço da empresa)
            else if (LowerCase(StringGrid1.Cells[i,0])='ende_firm') then
            begin
              temp := Trim(StringGrid1.Cells[i,k]);
              colClieForn := colClieForn + ',ende_firm';
              dadosClieForn := dadosClieForn + ',''' + temp + '''';
              //Testa se é Update
              if VerificaUpdate('ende_firm') = 1 then begin
                if condUpdateClieForn <> '' then condUpdateClieForn := condUpdateClieForn + ' and ';
                condUpdateClieForn := condUpdateClieForn + 'ende_firm=' + '''' + temp + '''';
              end
              else begin
                if dadosUpdateClieForn <> '' then dadosUpdateClieForn := dadosUpdateClieForn + ', ';
                dadosUpdateClieForn := dadosUpdateClieForn + 'ende_firm=' + '''' + temp + '''';
              end;
            end
            //CARG (Cargo da empresa)
            else if (LowerCase(StringGrid1.Cells[i,0])='carg') then
            begin
              temp := Trim(StringGrid1.Cells[i,k]);
              colClieForn := colClieForn + ',carg';
              dadosClieForn := dadosClieForn + ',''' + temp + '''';
              //Testa se é Update
              if VerificaUpdate('carg') = 1 then begin
                if condUpdateClieForn <> '' then condUpdateClieForn := condUpdateClieForn + ' and ';
                condUpdateClieForn := condUpdateClieForn + 'carg=' + '''' + temp + '''';
              end
              else begin
                if dadosUpdateClieForn <> '' then dadosUpdateClieForn := dadosUpdateClieForn + ', ';
                dadosUpdateClieForn := dadosUpdateClieForn + 'carg=' + '''' + temp + '''';
              end;
            end
            //SALA (Sala da empresa)
            else if (LowerCase(StringGrid1.Cells[i,0])='sala') then
            begin
              temp := Trim(StringGrid1.Cells[i,k]);
              colClieForn := colClieForn + ',sala';
              dadosClieForn := dadosClieForn + ',''' + temp + '''';
              //Testa se é Update
              if VerificaUpdate('sala') = 1 then begin
                if condUpdateClieForn <> '' then condUpdateClieForn := condUpdateClieForn + ' and ';
                condUpdateClieForn := condUpdateClieForn + 'sala=' + '''' + temp + '''';
              end
              else begin
                if dadosUpdateClieForn <> '' then dadosUpdateClieForn := dadosUpdateClieForn + ', ';
                dadosUpdateClieForn := dadosUpdateClieForn + 'sala=' + '''' + temp + '''';
              end;
            end
            //BAIR_FIRM (Bairro da empresa)
            else if (LowerCase(StringGrid1.Cells[i,0])='bair_firm') then
            begin
              temp := Trim(StringGrid1.Cells[i,k]);
              colClieForn := colClieForn + ',bair_firm';
              dadosClieForn := dadosClieForn + ',''' + temp + '''';
              //Testa se é Update
              if VerificaUpdate('bair_firm') = 1 then begin
                if condUpdateClieForn <> '' then condUpdateClieForn := condUpdateClieForn + ' and ';
                condUpdateClieForn := condUpdateClieForn + 'bair_firm=' + '''' + temp + '''';
              end
              else begin
                if dadosUpdateClieForn <> '' then dadosUpdateClieForn := dadosUpdateClieForn + ', ';
                dadosUpdateClieForn := dadosUpdateClieForn + 'bair_firm=' + '''' + temp + '''';
              end;
            end
            //CIDA_FIRM (Cidade da empresa)
            else if (LowerCase(StringGrid1.Cells[i,0])='cida_firm') then
            begin
              temp := Trim(StringGrid1.Cells[i,k]);
              colClieForn := colClieForn + ',cida_firm';
              dadosClieForn := dadosClieForn + ',''' + temp + '''';
              //Testa se é Update
              if VerificaUpdate('cida_firm') = 1 then begin
                if condUpdateClieForn <> '' then condUpdateClieForn := condUpdateClieForn + ' and ';
                condUpdateClieForn := condUpdateClieForn + 'cida_firm=' + '''' + temp + '''';
              end
              else begin
                if dadosUpdateClieForn <> '' then dadosUpdateClieForn := dadosUpdateClieForn + ', ';
                dadosUpdateClieForn := dadosUpdateClieForn + 'cida_firm=' + '''' + temp + '''';
              end;
            end
            //UF_FIRM (UF da empresa)
            else if (LowerCase(StringGrid1.Cells[i,0])='uf_firm') then
            begin
              temp := Trim(StringGrid1.Cells[i,k]);
              colClieForn := colClieForn + ',uf_firm';
              dadosClieForn := dadosClieForn + ',''' + temp + '''';
              //Testa se é Update
              if VerificaUpdate('uf_firm') = 1 then begin
                if condUpdateClieForn <> '' then condUpdateClieForn := condUpdateClieForn + ' and ';
                condUpdateClieForn := condUpdateClieForn + 'uf_firm=' + '''' + temp + '''';
              end
              else begin
                if dadosUpdateClieForn <> '' then dadosUpdateClieForn := dadosUpdateClieForn + ', ';
                dadosUpdateClieForn := dadosUpdateClieForn + 'uf_firm=' + '''' + temp + '''';
              end;
            end
            //CEP_FIRM (CEP da empresa)
            else if (LowerCase(StringGrid1.Cells[i,0])='cep_firm') then
            begin
              temp := Trim(StringGrid1.Cells[i,k]);
              colClieForn := colClieForn + ',cep_firm';
              dadosClieForn := dadosClieForn + ',''' + temp + '''';
              //Testa se é Update
              if VerificaUpdate('cep_firm') = 1 then begin
                if condUpdateClieForn <> '' then condUpdateClieForn := condUpdateClieForn + ' and ';
                condUpdateClieForn := condUpdateClieForn + 'cep_firm=' + '''' + temp + '''';
              end
              else begin
                if dadosUpdateClieForn <> '' then dadosUpdateClieForn := dadosUpdateClieForn + ', ';
                dadosUpdateClieForn := dadosUpdateClieForn + 'cep_firm=' + '''' + temp + '''';
              end;
            end
            //ESTA_CIVI (Estado Civil)
            else if (LowerCase(StringGrid1.Cells[i,0])='esta_civi') then
            begin
              temp := UpperCase(RemoveAcento(StringGrid1.Cells[i,k]));
              colClieForn := colClieForn + ',esta_civi';
              dadosClieForn := dadosClieForn + ',''' + temp + '''';
              //Testa se é Update
              if VerificaUpdate('esta_civi') = 1 then begin
                if condUpdateClieForn <> '' then condUpdateClieForn := condUpdateClieForn + ' and ';
                condUpdateClieForn := condUpdateClieForn + 'esta_civi=' + '''' + temp + '''';
              end
              else begin
                if dadosUpdateClieForn <> '' then dadosUpdateClieForn := dadosUpdateClieForn + ', ';
                dadosUpdateClieForn := dadosUpdateClieForn + 'esta_civi=' + '''' + temp + '''';
              end;
            end
            //NOME_PAI
            else if (LowerCase(StringGrid1.Cells[i,0])='nome_pai') then
            begin
              temp := UpperCase(RemoveAcento(StringGrid1.Cells[i,k]));
              temp := stringreplace(temp, '''', ' ',[rfReplaceAll, rfIgnoreCase]);
              temp := (Copy(temp,1,60));
              colClieForn := colClieForn + ',nome_pai';
              dadosClieForn := dadosClieForn + ',''' + temp + '''';
              //Testa se é Update
              if VerificaUpdate('nome_pai') = 1 then begin
                if condUpdateClieForn <> '' then condUpdateClieForn := condUpdateClieForn + ' and ';
                condUpdateClieForn := condUpdateClieForn + 'nome_pai=' + '''' + temp + '''';
              end
              else begin
                if dadosUpdateClieForn <> '' then dadosUpdateClieForn := dadosUpdateClieForn + ', ';
                dadosUpdateClieForn := dadosUpdateClieForn + 'nome_pai=' + '''' + temp + '''';
              end;
            end
            //NOME_MAE
            else if (LowerCase(StringGrid1.Cells[i,0])='nome_mae') then
            begin
              temp := UpperCase(RemoveAcento(StringGrid1.Cells[i,k]));
              temp := stringreplace(temp, '''', ' ',[rfReplaceAll, rfIgnoreCase]);
              temp := (Copy(temp,1,60));
              colClieForn := colClieForn + ',nome_mae';
              dadosClieForn := dadosClieForn + ',''' + temp + '''';
              //Testa se é Update
              if VerificaUpdate('nome_mae') = 1 then begin
                if condUpdateClieForn <> '' then condUpdateClieForn := condUpdateClieForn + ' and ';
                condUpdateClieForn := condUpdateClieForn + 'nome_mae=' + '''' + temp + '''';
              end
              else begin
                if dadosUpdateClieForn <> '' then dadosUpdateClieForn := dadosUpdateClieForn + ', ';
                dadosUpdateClieForn := dadosUpdateClieForn + 'nome_mae=' + '''' + temp + '''';
              end;
            end
            //CONJ (Nome do Conjuge)
            else if (LowerCase(StringGrid1.Cells[i,0])='conj') then
            begin
              temp := UpperCase(RemoveAcento(StringGrid1.Cells[i,k]));
              temp := stringreplace(temp, '''', ' ',[rfReplaceAll, rfIgnoreCase]);
              temp := (Copy(temp,1,60));
              colClieForn := colClieForn + ',conj';
              dadosClieForn := dadosClieForn + ',''' + temp + '''';
              //Testa se é Update
              if VerificaUpdate('conj') = 1 then begin
                if condUpdateClieForn <> '' then condUpdateClieForn := condUpdateClieForn + ' and ';
                condUpdateClieForn := condUpdateClieForn + 'conj=' + '''' + temp + '''';
              end
              else begin
                if dadosUpdateClieForn <> '' then dadosUpdateClieForn := dadosUpdateClieForn + ', ';
                dadosUpdateClieForn := dadosUpdateClieForn + 'conj=' + '''' + temp + '''';
              end;
            end
            //CONJ_FIRM (Trabalho do Conjuge)
            else if (LowerCase(StringGrid1.Cells[i,0])='conj_firm') then
            begin
              temp := UpperCase(RemoveAcento(StringGrid1.Cells[i,k]));
              temp := stringreplace(temp, '''', ' ',[rfReplaceAll, rfIgnoreCase]);
              temp := (Copy(temp,1,60));
              colClieForn := colClieForn + ',conj_firm';
              dadosClieForn := dadosClieForn + ',''' + temp + '''';
              //Testa se é Update
              if VerificaUpdate('conj_firm') = 1 then begin
                if condUpdateClieForn <> '' then condUpdateClieForn := condUpdateClieForn + ' and ';
                condUpdateClieForn := condUpdateClieForn + 'conj_firm=' + '''' + temp + '''';
              end
              else begin
                if dadosUpdateClieForn <> '' then dadosUpdateClieForn := dadosUpdateClieForn + ', ';
                dadosUpdateClieForn := dadosUpdateClieForn + 'conj_firm=' + '''' + temp + '''';
              end;
            end
            //CONJ_FIRM (Trabalho do Conjuge)
            else if (LowerCase(StringGrid1.Cells[i,0])='conj_firm') then
            begin
              temp := UpperCase(RemoveAcento(StringGrid1.Cells[i,k]));
              temp := stringreplace(temp, '''', ' ',[rfReplaceAll, rfIgnoreCase]);
              temp := (Copy(temp,1,60));
              colClieForn := colClieForn + ',conj_firm';
              dadosClieForn := dadosClieForn + ',''' + temp + '''';
              //Testa se é Update
              if VerificaUpdate('conj_firm') = 1 then begin
                if condUpdateClieForn <> '' then condUpdateClieForn := condUpdateClieForn + ' and ';
                condUpdateClieForn := condUpdateClieForn + 'conj_firm=' + '''' + temp + '''';
              end
              else begin
                if dadosUpdateClieForn <> '' then dadosUpdateClieForn := dadosUpdateClieForn + ', ';
                dadosUpdateClieForn := dadosUpdateClieForn + 'conj_firm=' + '''' + temp + '''';
              end;
            end
            //CONJ_SALA (Sala de Trabalho do Conjuge)
            else if (LowerCase(StringGrid1.Cells[i,0])='conj_sala') then
            begin
              temp := UpperCase(RemoveAcento(StringGrid1.Cells[i,k]));
              temp := stringreplace(temp, '''', ' ',[rfReplaceAll, rfIgnoreCase]);
              temp := (Copy(temp,1,60));
              colClieForn := colClieForn + ',conj_sala';
              dadosClieForn := dadosClieForn + ',''' + temp + '''';
              //Testa se é Update
              if VerificaUpdate('conj_sala') = 1 then begin
                if condUpdateClieForn <> '' then condUpdateClieForn := condUpdateClieForn + ' and ';
                condUpdateClieForn := condUpdateClieForn + 'conj_sala=' + '''' + temp + '''';
              end
              else begin
                if dadosUpdateClieForn <> '' then dadosUpdateClieForn := dadosUpdateClieForn + ', ';
                dadosUpdateClieForn := dadosUpdateClieForn + 'conj_sala=' + '''' + temp + '''';
              end;
            end
            //CONJ_CARG (Cargo do Conjuge)
            else if (LowerCase(StringGrid1.Cells[i,0])='conj_carg') then
            begin
              temp := UpperCase(RemoveAcento(StringGrid1.Cells[i,k]));
              temp := stringreplace(temp, '''', ' ',[rfReplaceAll, rfIgnoreCase]);
              temp := (Copy(temp,1,60));
              colClieForn := colClieForn + ',conj_carg';
              dadosClieForn := dadosClieForn + ',''' + temp + '''';
              //Testa se é Update
              if VerificaUpdate('conj_carg') = 1 then begin
                if condUpdateClieForn <> '' then condUpdateClieForn := condUpdateClieForn + ' and ';
                condUpdateClieForn := condUpdateClieForn + 'conj_carg=' + '''' + temp + '''';
              end
              else begin
                if dadosUpdateClieForn <> '' then dadosUpdateClieForn := dadosUpdateClieForn + ', ';
                dadosUpdateClieForn := dadosUpdateClieForn + 'conj_carg=' + '''' + temp + '''';
              end;
            end
            //DATA_CONJ (Data da união com conjuge)
            else if (LowerCase(StringGrid1.Cells[i,0])='data_conj') then
            begin
              temp := Trim(StringGrid1.Cells[i,k]);
              temp := stringreplace(temp, '-', '',[rfReplaceAll, rfIgnoreCase]);
              temp := stringreplace(temp, '/', '',[rfReplaceAll, rfIgnoreCase]);
              temp := stringreplace(temp, '.', '',[rfReplaceAll, rfIgnoreCase]);
              if temp.Length >= 8 then
              begin
                temp := (Copy(temp,1,2)) +'.'+ (Copy(temp,3,2)) +'.'+ (Copy(temp,5,4));
                colClieForn := colClieForn + ',data_conj';
                dadosClieForn := dadosClieForn + ',''' + temp + '''';
                //Testa se é Update
                if VerificaUpdate('data_conj') = 1 then begin
                  if condUpdateClieForn <> '' then condUpdateClieForn := condUpdateClieForn + ' and ';
                  condUpdateClieForn := condUpdateClieForn + 'data_conj=' + '''' + temp + '''';
                end
                else begin
                  if dadosUpdateClieForn <> '' then dadosUpdateClieForn := dadosUpdateClieForn + ', ';
                  dadosUpdateClieForn := dadosUpdateClieForn + 'data_conj=' + '''' + temp + '''';
                end;
              end
              else if temp.Length = 6 then begin
                temp2 := (Copy(DateToStr(Date()),9,2));
                //Testa os dois ultimos caracteres da data atual com a data desc
                //Se os caracteres da data de nascimento do cliente forem maiores, significa que é um século antes
                if StrToInt(temp2)<StrToInt(Copy(temp,5,2)) then temp2 := IntToStr(StrToInt(temp2)-1);
                temp := (Copy(temp,1,2)) +'.'+ (Copy(temp,3,2)) +'.'+ temp2 + (Copy(temp,5,2));
                colClieForn := colClieForn + ',data_conj';
                dadosClieForn := dadosClieForn + ',''' + temp + '''';
                //Testa se é Update
                if VerificaUpdate('data_conj') = 1 then begin
                  if condUpdateClieForn <> '' then condUpdateClieForn := condUpdateClieForn + ' and ';
                  condUpdateClieForn := condUpdateClieForn + 'data_conj=' + '''' + temp + '''';
                end
                else begin
                  if dadosUpdateClieForn <> '' then dadosUpdateClieForn := dadosUpdateClieForn + ', ';
                  dadosUpdateClieForn := dadosUpdateClieForn + 'data_conj=' + '''' + temp + '''';
                end;
              end;
            end
            //OBS
            else if (LowerCase(StringGrid1.Cells[i,0])='obs') then
            begin
              colClieForn := colClieForn + ',obs';
              temp := StringGrid1.Cells[i,k];
              temp := (Copy(temp,1,80));
              dadosClieForn := dadosClieForn + ',''' + temp + '''';
              //Testa se é Update
              if VerificaUpdate('obs') = 1 then begin
                if condUpdateClieForn <> '' then condUpdateClieForn := condUpdateClieForn + ' and ';
                condUpdateClieForn := condUpdateClieForn + 'obs=' + '''' + temp + '''';
              end
              else begin
                if dadosUpdateClieForn <> '' then dadosUpdateClieForn := dadosUpdateClieForn + ', ';
                dadosUpdateClieForn := dadosUpdateClieForn + 'obs=' + '''' + temp + '''';
              end;
            end
            //REFE_COME (Referencia Comercial)
            else if (LowerCase(StringGrid1.Cells[i,0])='refe_come') then
            begin
              temp := StringGrid1.Cells[i,k];
              if (temp.Length>220) then
              begin
                colClieForn := colClieForn + ',refe_come3';
                temp2 := (Copy(temp,221,110));
                dadosClieForn := dadosClieForn + ',''' + temp2 + '''';
                //Testa se é Update
                if VerificaUpdate('refe_come') = 1 then begin
                  ShowMessage('Referencia comercial não pode ser uma condição de Update. Sry mas não da.');
                  Exit;
                end
                else begin
                  if dadosUpdateClieForn <> '' then dadosUpdateClieForn := dadosUpdateClieForn + ', ';
                  dadosUpdateClieForn := dadosUpdateClieForn + 'refe_come3=' + '''' + temp2 + '''';
                end;
              end;
              if (temp.Length>110) then
              begin
                colClieForn := colClieForn + ',refe_come2';
                temp2 := (Copy(temp,111,110));
                dadosClieForn := dadosClieForn + ',''' + temp2 + '''';
                //Testa se é Update
                if VerificaUpdate('refe_come') = 1 then begin
                  ShowMessage('Referencia comercial não pode ser uma condição de Update. Sry mas não da.');
                  Exit;
                end
                else begin
                  if dadosUpdateClieForn <> '' then dadosUpdateClieForn := dadosUpdateClieForn + ', ';
                  dadosUpdateClieForn := dadosUpdateClieForn + 'refe_come2=' + '''' + temp2 + '''';
                end;
              end;
              colClieForn := colClieForn + ',refe_come1';
              temp2 := (Copy(temp,1,110));
              dadosClieForn := dadosClieForn + ',''' + temp2 + '''';
              //Testa se é Update
              if VerificaUpdate('refe_come') = 1 then begin
                ShowMessage('Referencia comercial não pode ser uma condição de Update. Sry mas não da.');
                Exit;
              end
              else begin
                if dadosUpdateClieForn <> '' then dadosUpdateClieForn := dadosUpdateClieForn + ', ';
                dadosUpdateClieForn := dadosUpdateClieForn + 'refe_come1=' + '''' + temp2 + '''';
              end;
            end
            //MAIL (EMAIL)
            else if (LowerCase(StringGrid1.Cells[i,0])='mail') then
            begin
              temp := Trim(StringGrid1.Cells[i,k]);
              colClieForn := colClieForn + ',mail';
              dadosClieForn := dadosClieForn + ',''' + temp + '''';
              //Testa se é Update
              if VerificaUpdate('mail') = 1 then begin
                if condUpdateClieForn <> '' then condUpdateClieForn := condUpdateClieForn + ' and ';
                condUpdateClieForn := condUpdateClieForn + 'mail=' + '''' + temp + '''';
              end
              else begin
                if dadosUpdateClieForn <> '' then dadosUpdateClieForn := dadosUpdateClieForn + ', ';
                dadosUpdateClieForn := dadosUpdateClieForn + 'mail=' + '''' + temp + '''';
              end;
            end
            //SEXO ('M' ou 'F')
            else if (LowerCase(StringGrid1.Cells[i,0])='sexo') then
            begin
              temp := UpperCase(Trim(StringGrid1.Cells[i,k]));
              if ((temp='MASCULINO') or (temp='MASC') or (temp='M')) then
              begin
                temp := 'M';
                colClieForn := colClieForn + ',sexo';
                dadosClieForn := dadosClieForn + ',''' + temp + '''';
                //Testa se é Update
                if VerificaUpdate('sexo') = 1 then begin
                  if condUpdateClieForn <> '' then condUpdateClieForn := condUpdateClieForn + ' and ';
                  condUpdateClieForn := condUpdateClieForn + 'sexo=' + '''' + temp + '''';
                end
                else begin
                  if dadosUpdateClieForn <> '' then dadosUpdateClieForn := dadosUpdateClieForn + ', ';
                  dadosUpdateClieForn := dadosUpdateClieForn + 'sexo=' + '''' + temp + '''';
                end;
              end
              else if ((temp='FEMININO') or (temp='FEM') or (temp='F')) then
              begin
                temp := 'F';
                colClieForn := colClieForn + ',sexo';
                dadosClieForn := dadosClieForn + ',''' + temp + '''';
                //Testa se é Update
                if VerificaUpdate('sexo') = 1 then begin
                  if condUpdateClieForn <> '' then condUpdateClieForn := condUpdateClieForn + ' and ';
                  condUpdateClieForn := condUpdateClieForn + 'sexo=' + '''' + temp + '''';
                end
                else begin
                  if dadosUpdateClieForn <> '' then dadosUpdateClieForn := dadosUpdateClieForn + ', ';
                  dadosUpdateClieForn := dadosUpdateClieForn + 'sexo=' + '''' + temp + '''';
                end;
              end
              else begin
                colClieForn := colClieForn + ',sexo';
                dadosClieForn := dadosClieForn + ',''' + 'F' + '''';
              end;
            end
            //TIPOCAD (A=AMBOS, C=CLIENTE, F=FORNECEDOR)
            else if (LowerCase(StringGrid1.Cells[i,0])='tipocad') then
            begin
              temp := StringGrid1.Cells[i,k];
              if ((temp='S') or (temp='1') or (temp='C')) then begin
                temp:='C';
              end
              else if ((temp='N') or (temp='2') or (temp='F')) then begin
                temp:='F';
              end
              else begin
                temp:='A';
              end;
              colClieForn := colClieForn + ',tipocad';
              dadosClieForn := dadosClieForn + ',''' + temp + '''';
              //Testa se é Update
              if VerificaUpdate('tipocad') = 1 then begin
                if condUpdateClieForn <> '' then condUpdateClieForn := condUpdateClieForn + ' and ';
                condUpdateClieForn := condUpdateClieForn + 'tipocad=' + '''' + temp + '''';
              end
              else begin
                if dadosUpdateClieForn <> '' then dadosUpdateClieForn := dadosUpdateClieForn + ', ';
                dadosUpdateClieForn := dadosUpdateClieForn + 'tipocad=' + '''' + temp + '''';
              end;
            end
            //ATIVO
            else if (LowerCase(StringGrid1.Cells[i,0])='ativo') then
            begin
              temp := UpperCase(Trim(StringGrid1.Cells[i,k]));
              if ((temp='S') or (temp='1') or (temp='A')) then
              begin
                temp := 'S';
                colClieForn := colClieForn + ',ativo';
                dadosClieForn := dadosClieForn + ',''' + temp + '''';
                //Testa se é Update
                if VerificaUpdate('ativo') = 1 then begin
                  if condUpdateClieForn <> '' then condUpdateClieForn := condUpdateClieForn + ' and ';
                  condUpdateClieForn := condUpdateClieForn + 'ativo=' + '''' + temp + '''';
                end
                else begin
                  if dadosUpdateClieForn <> '' then dadosUpdateClieForn := dadosUpdateClieForn + ', ';
                  dadosUpdateClieForn := dadosUpdateClieForn + 'ativo=' + '''' + temp + '''';
                end;
              end
              else if ((temp='N') or (temp='0') or (temp='I') or (temp='2')) then
              begin
                temp := 'N';
                colClieForn := colClieForn + ',ativo';
                dadosClieForn := dadosClieForn + ',''' + temp + '''';
                //Testa se é Update
                if VerificaUpdate('ativo') = 1 then begin
                  if condUpdateClieForn <> '' then condUpdateClieForn := condUpdateClieForn + ' and ';
                  condUpdateClieForn := condUpdateClieForn + 'ativo=' + '''' + temp + '''';
                end
                else begin
                  if dadosUpdateClieForn <> '' then dadosUpdateClieForn := dadosUpdateClieForn + ', ';
                  dadosUpdateClieForn := dadosUpdateClieForn + 'ativo=' + '''' + temp + '''';
                end;
              end;
            end
            ;

          //Fim do for das colunas
          end;

          //----------------------------------------
          //Gravar no banco de dados ClieForn
          if UpperCase( ExtractFileExt(DBPath.Text) ) = '.FDB' then begin
            try
              try
                //Abrir conexoes
                conDestino.Open;
                SQL := TSQLDataSet.Create(Nil);
                SQL.SQLConnection := conDestino;

                //Se for INSERT
                if colUpdateCount <= 0 then begin
                  frmImportando.atualizaStatus('Inserindo dados na tabela CLIEFORN.');

                  //Desativar Trigger das cidades
                  SQL.CommandText := 'ALTER TRIGGER clieforn_biu0 INACTIVE;';
                  SQL.ExecSQL;
                  //Executar INSERT
                  SQL.CommandText := 'insert into clieforn ('+ colClieForn +') values ' + '(' + dadosClieForn + ');';
                  SQL.ExecSQL;
                  //Reativar Trigger das cidades
                  SQL.CommandText := 'ALTER TRIGGER clieforn_biu0 ACTIVE;';
                  SQL.ExecSQL;
                end
                //Se for UPDATE
                else begin
                  frmImportando.atualizaStatus('Atualizando dados na tabela CLIEFORN.');

                  if dadosUpdateClieForn = '' then Exit;

                  //Executar UPDATE
                  SQL.CommandText := 'update clieforn set '+ dadosUpdateClieForn +' where ' + condUpdateClieForn + ';';
                  SQL.ExecSQL;
                end;

              except
                on e: exception do
                begin
                  ShowMessage('Erro SQL: '+e.message+sLineBreak+SQL.CommandText);
                  status := 0;
                  SQL.Free;
                  conDestino.Close;
                  break; //Quebra o for
                end;
              end;

            finally
              SQL.Free;
              conDestino.Close;
            end;
          end
          //Gravar comandos em TXT
          else if (UpperCase( ExtractFileExt(DBPath.Text) ) = '.TXT') or
                  (UpperCase( ExtractFileExt(DBPath.Text) ) = '.SQL')
          then begin
            try
              try
                //Carregar arquivo TXT
                AssignFile(fileTXT, DBPath.Text);
                if not FileExists(DBPath.Text) then ReWrite(fileTXT)
                else append(fileTXT);

                frmImportando.atualizaStatus('Comandos da CLIEFORN.');
                WriteLn(fileTXT, '----------Comandos da CLIEFORN----------');

                //Se for INSERT
                if colUpdateCount <= 0 then begin
                  //Desativar Trigger das cidades
                  WriteLn(fileTXT, 'ALTER TRIGGER clieforn_biu0 INACTIVE;');
                  WriteLn(fileTXT, 'COMMIT WORK;');
                  //Executar INSERT
                  WriteLn(fileTXT, 'insert into clieforn ('+ colClieForn +') values ' + '(' + dadosClieForn + ');');
                  WriteLn(fileTXT, 'COMMIT WORK;');
                  //Reativar Trigger das cidades
                  WriteLn(fileTXT, 'ALTER TRIGGER clieforn_biu0 ACTIVE;');
                  WriteLn(fileTXT, 'COMMIT WORK;');
                end
                //Se for UPDATE
                else begin
                  //Executar UPDATE
                  WriteLn(fileTXT, 'update clieforn set '+ dadosUpdateClieForn +' where ' + condUpdateClieForn + ';');
                  WriteLn(fileTXT, 'COMMIT WORK;');
                end;
              except
                on e: exception do
                begin
                  ShowMessage('Erro TXT: '+e.message);
                  status := 0;
                  CloseFile(fileTXT);
                  break; //Quebra o for
                end;
              end;
            finally
              CloseFile(fileTXT);
            end;
          end;


        end
        //----------------------------------------------------------------------------
        //Importar Produtos
        else if SelectImport.Text = 'Produtos' then
        begin

          frmImportando.atualizaStatus('Produto '+IntToStr(k));

          colProd := '';
          dadosProd := '';
          colProdTrib := '';
          dadosProdTrib := '';
          colProdAdic := '';
          dadosProdAdic := '';
          colProdCust := '';
          dadosProdCust := '';
          colMVA := '';
          dadosMVA := '';
          colItens := '';
          dadosItens := '';
          colProdForn := '';
          dadosProdForn := '';

          colRegistroProdTrib := '';
          colRegistroProdAdic := '';
          colRegistroProdCust := '';
          colRegistroMVA := '';
          dadosRegistroProdTrib := '';
          dadosRegistroProdAdic := '';
          dadosRegistroProdCust := '';
          dadosRegistroMVA := '';

          dadosUpdateProd := '';
          dadosUpdateProdTrib := '';
          dadosUpdateProdAdic := '';
          dadosUpdateProdCust := '';
          dadosUpdateItens := '';
          condUpdateProd := '';
          condUpdateProdTrib := '';
          condUpdateProdAdic := '';
          condUpdateProdCust := '';

          //Será a condição da PROD_ESTO
          condUpdateItens := '';

          prodCod := '';
          prodEmpr := '';

          //Carregar informações para importar
          //-------------------------------------------------------

          //Empresa é obrigatório, se não tiver preenche com 1
          //EMPR (EMPRESA)
          i:=BuscaColuna(StringGrid1,'empr');
          if (i<>-1) then
          begin
            prodEmpr := StringGrid1.Cells[i,k];
            colProd := colProd + 'empr';
            dadosProd := dadosProd + '''' + UpperCase(RemoveAcento(prodEmpr)) + '''';
            colProdTrib := colProdTrib + 'trib_prod_empr';
            dadosProdTrib := dadosProdTrib + '''' + UpperCase(RemoveAcento(prodEmpr)) + '''';
            colProdAdic := colProdAdic + 'adic_prod_empr';
            dadosProdAdic := dadosProdAdic + '''' + UpperCase(RemoveAcento(prodEmpr)) + '''';
            colProdCust := colProdCust + 'cust_prod_empr';
            dadosProdCust := dadosProdCust + '''' + UpperCase(RemoveAcento(prodEmpr)) + '''';
            colProdTrib := colProdTrib + ',trib_empr';
            dadosProdTrib := dadosProdTrib + ',''' + UpperCase(RemoveAcento(prodEmpr)) + '''';
            colProdAdic := colProdAdic + ',adic_empr';
            dadosProdAdic := dadosProdAdic + ',''' + UpperCase(RemoveAcento(prodEmpr)) + '''';
            colProdCust := colProdCust + ',cust_empr';
            dadosProdCust := dadosProdCust + ',''' + UpperCase(RemoveAcento(prodEmpr)) + '''';
            colMVA := colMVA + 'empr';
            dadosMVA := dadosMVA + '''' + UpperCase(RemoveAcento(prodEmpr)) + '''';
            colMVA := colMVA + ',mva_empr';
            dadosMVA := dadosMVA + ',''' + UpperCase(RemoveAcento(prodEmpr)) + '''';
            colProdForn := colProdForn + 'empr';
            dadosProdForn := dadosProdForn + '''' + prodEmpr + '''';
            colItens := colItens + 'empr';
            dadosItens := dadosItens + '''' + prodEmpr + '''';

            //Registros para outras empresas
            colRegistroProdTrib := colRegistroProdTrib + 'trib_prod_empr';
            dadosRegistroProdTrib := dadosRegistroProdTrib + '''' + UpperCase(RemoveAcento(prodEmpr)) + '''';
            colRegistroProdAdic := colRegistroProdAdic + 'adic_prod_empr';
            dadosRegistroProdAdic := dadosRegistroProdAdic + '''' + UpperCase(RemoveAcento(prodEmpr)) + '''';
            colRegistroProdCust := colRegistroProdCust + 'cust_prod_empr';
            dadosRegistroProdCust := dadosRegistroProdCust + '''' + UpperCase(RemoveAcento(prodEmpr)) + '''';
            colRegistroMVA := colRegistroMVA + 'empr';
            dadosRegistroMVA := dadosRegistroMVA + '''' + UpperCase(RemoveAcento(prodEmpr)) + '''';
//            colRegistroMVA := colRegistroMVA + ',mva_empr';
//            dadosRegistroMVA := dadosRegistroMVA + ',''' + UpperCase(RemoveAcento(prodEmpr)) + '''';

            //Testa se é Update
            if VerificaUpdate('empr') = 1 then begin
              if condUpdateProd <> '' then condUpdateProd := condUpdateProd + ' and ';
              condUpdateProd := condUpdateProd + 'empr=' + '''' + UpperCase(RemoveAcento(prodEmpr)) + '''';
              if condUpdateProdTrib <> '' then condUpdateProdTrib := condUpdateProdTrib + ' and ';
              condUpdateProdTrib := condUpdateProdTrib + 'trib_empr=' + '''' + UpperCase(RemoveAcento(prodEmpr)) + '''';
              if condUpdateProdAdic <> '' then condUpdateProdAdic := condUpdateProdAdic + ' and ';
              condUpdateProdAdic := condUpdateProdAdic + 'adic_empr=' + '''' + UpperCase(RemoveAcento(prodEmpr)) + '''';
              if condUpdateProdCust <> '' then condUpdateProdCust := condUpdateProdCust + ' and ';
              condUpdateProdCust := condUpdateProdCust + 'cust_empr=' + '''' + UpperCase(RemoveAcento(prodEmpr)) + '''';
              if condUpdateItens <> '' then condUpdateItens := condUpdateItens + ' and ';
              condUpdateItens := condUpdateItens + 'cod_empr=' + '''' + UpperCase(RemoveAcento(prodEmpr)) + '''';
            end
            else begin
              if dadosUpdateProd <> '' then dadosUpdateProd := dadosUpdateProd + ', ';
              dadosUpdateProd := dadosUpdateProd + 'empr=' + '''' + UpperCase(RemoveAcento(prodEmpr)) + '''';
              if dadosUpdateProdTrib <> '' then dadosUpdateProdTrib := dadosUpdateProdTrib + ', ';
              dadosUpdateProdTrib := dadosUpdateProdTrib + 'trib_empr=' + '''' + UpperCase(RemoveAcento(prodEmpr)) + '''';
              if dadosUpdateProdAdic <> '' then dadosUpdateProdAdic := dadosUpdateProdAdic + ', ';
              dadosUpdateProdAdic := dadosUpdateProdAdic + 'adic_empr' + '''' + UpperCase(RemoveAcento(prodEmpr)) + '''';
              if dadosUpdateProdCust <> '' then dadosUpdateProdCust := dadosUpdateProdCust + ', ';
              dadosUpdateProdCust := dadosUpdateProdCust + 'cust_empr=' + '''' + UpperCase(RemoveAcento(prodEmpr)) + '''';
              if dadosUpdateItens <> '' then dadosUpdateItens := dadosUpdateItens + ', ';
              dadosUpdateItens := dadosUpdateItens + 'empr=' + '''' + UpperCase(RemoveAcento(prodEmpr)) + '''';
            end;
          end
          else begin
            prodEmpr := '1';
            colProd := colProd + 'empr';
            dadosProd := dadosProd + '''' + '1' + '''';
            colProdTrib := colProdTrib + 'trib_prod_empr';
            dadosProdTrib := dadosProdTrib + '''' + '1' + '''';
            colProdAdic := colProdAdic + 'adic_prod_empr';
            dadosProdAdic := dadosProdAdic + '''' + '1' + '''';
            colProdCust := colProdCust + 'cust_prod_empr';
            dadosProdCust := dadosProdCust + '''' + '1' + '''';
            colProdTrib := colProdTrib + ',trib_empr';
            dadosProdTrib := dadosProdTrib + ',''' + '1' + '''';
            colProdAdic := colProdAdic + ',adic_empr';
            dadosProdAdic := dadosProdAdic + ',''' + '1' + '''';
            colProdCust := colProdCust + ',cust_empr';
            dadosProdCust := dadosProdCust + ',''' + '1' + '''';
            colMVA := colMVA + 'empr';
            dadosMVA := dadosMVA + '''' + '1' + '''';
            colMVA := colMVA + ',mva_empr';
            dadosMVA := dadosMVA + ',''' + '1' + '''';
            colProdForn := colProdForn + 'empr';
            dadosProdForn := dadosProdForn + '''' + '1' + '''';
            colItens := colItens + 'empr';
            dadosItens := dadosItens + '''' + '1' + '''';

            //Registros para outras empresas
            colRegistroProdTrib := colRegistroProdTrib + 'trib_prod_empr';
            dadosRegistroProdTrib := dadosRegistroProdTrib + '''' + '1' + '''';
            colRegistroProdAdic := colRegistroProdAdic + 'adic_prod_empr';
            dadosRegistroProdAdic := dadosRegistroProdAdic + '''' + '1' + '''';
            colRegistroProdCust := colRegistroProdCust + 'cust_prod_empr';
            dadosRegistroProdCust := dadosRegistroProdCust + '''' + '1' + '''';
            colRegistroMVA := colRegistroMVA + 'empr';
            dadosRegistroMVA := dadosRegistroMVA + '''' + '1' + '''';
//            colRegistroMVA := colRegistroMVA + ',mva_empr';
//            dadosRegistroMVA := dadosRegistroMVA + ',''' + '1' + '''';
          end;

          //Codigo é obrigatório, se não tiver preenche com o generator
          //CODI (CODIGO)
          i:=BuscaColuna(StringGrid1,'Codi');
          if (i<>-1) then
          begin
            prodCod := stringreplace(StringGrid1.Cells[i,k], '.', '',[rfReplaceAll, rfIgnoreCase]);
            StringGrid1.Cells[i,k] := prodCod;
            colProd := colProd + ',codi';
            dadosProd := dadosProd + ',''' + prodCod + '''';
            colProdTrib := colProdTrib + ',trib_id';
            dadosProdTrib := dadosProdTrib + ',' + 'gen_id(gen_prod_tributos_id,1)';
            colProdTrib := colProdTrib + ',trib_prod_codi';
            dadosProdTrib := dadosProdTrib + ',''' + prodCod + '''';
            colProdAdic := colProdAdic + ',adic_id';
            dadosProdAdic := dadosProdAdic + ',' + 'gen_id(gen_prod_adicionais_id,1)';
            colProdAdic := colProdAdic + ',adic_prod_codi';
            dadosProdAdic := dadosProdAdic + ',''' + prodCod + '''';
            colProdCust := colProdCust + ',cust_id';
            dadosProdCust := dadosProdCust + ',' + 'gen_id(gen_prod_custos_id,1)';
            colProdCust := colProdCust + ',cust_prod_codi';
            dadosProdCust := dadosProdCust + ',''' + prodCod + '''';
            colMVA := colMVA + ',id';
            dadosMVA := dadosMVA + ',' + 'gen_id(gen_mva_id,1)';
            colMVA := colMVA + ',codi_prod';
            dadosMVA := dadosMVA + ',''' + prodCod + '''';
            colItens := colItens + ',codi';
            dadosItens := dadosItens + ',gen_id(gen_itens_id,1)';
            colItens := colItens + ',prodcod';
            dadosItens := dadosItens + ',''' + prodCod + '''';
            colProdForn := colProdForn + ',prod';
            dadosProdForn := dadosProdForn + ',''' + prodCod + '''';
            colProdForn := colProdForn + ',id';
            dadosProdForn := dadosProdForn + ',' + 'gen_id(gen_prod_forn_id,1)';

            //Registros para outras empresas
            colRegistroProdTrib := colRegistroProdTrib + ',trib_id';
            dadosRegistroProdTrib := dadosRegistroProdTrib + ',' + 'gen_id(gen_prod_tributos_id,1)';
            colRegistroProdTrib := colRegistroProdTrib + ',trib_prod_codi';
            dadosRegistroProdTrib := dadosRegistroProdTrib + ',''' + prodCod + '''';
            colRegistroProdAdic := colRegistroProdAdic + ',adic_id';
            dadosRegistroProdAdic := dadosRegistroProdAdic + ',' + 'gen_id(gen_prod_adicionais_id,1)';
            colRegistroProdAdic := colRegistroProdAdic + ',adic_prod_codi';
            dadosRegistroProdAdic := dadosRegistroProdAdic + ',''' + prodCod + '''';
            colRegistroProdCust := colRegistroProdCust + ',cust_id';
            dadosRegistroProdCust := dadosRegistroProdCust + ',' + 'gen_id(gen_prod_custos_id,1)';
            colRegistroProdCust := colRegistroProdCust + ',cust_prod_codi';
            dadosRegistroProdCust := dadosRegistroProdCust + ',''' + prodCod + '''';
            colRegistroMVA := colRegistroMVA + ',id';
            dadosRegistroMVA := dadosRegistroMVA + ',' + 'gen_id(gen_mva_id,1)';
            colRegistroMVA := colRegistroMVA + ',codi_prod';
            dadosRegistroMVA := dadosRegistroMVA + ',''' + prodCod + '''';

            //Testa se é Update
            if VerificaUpdate('codi') = 1 then begin
              if condUpdateProd <> '' then condUpdateProd := condUpdateProd + ' and ';
              condUpdateProd := condUpdateProd + 'codi=' + '''' + UpperCase(RemoveAcento(prodCod)) + '''';
              if condUpdateProdTrib <> '' then condUpdateProdTrib := condUpdateProdTrib + ' and ';
              condUpdateProdTrib := condUpdateProdTrib + 'trib_prod_codi=' + '''' + UpperCase(RemoveAcento(prodCod)) + '''';
              if condUpdateProdAdic <> '' then condUpdateProdAdic := condUpdateProdAdic + ' and ';
              condUpdateProdAdic := condUpdateProdAdic + 'adic_prod_codi=' + '''' + UpperCase(RemoveAcento(prodCod)) + '''';
              if condUpdateProdCust <> '' then condUpdateProdCust := condUpdateProdCust + ' and ';
              condUpdateProdCust := condUpdateProdCust + 'cust_prod_codi=' + '''' + UpperCase(RemoveAcento(prodCod)) + '''';
              if condUpdateItens <> '' then condUpdateItens := condUpdateItens + ' and ';
              condUpdateItens := condUpdateItens + 'cod_prod=' + '''' + UpperCase(RemoveAcento(prodCod)) + '''';
            end
            else begin
              if dadosUpdateProd <> '' then dadosUpdateProd := dadosUpdateProd + ', ';
              dadosUpdateProd := dadosUpdateProd + 'codi=' + '''' + UpperCase(RemoveAcento(prodCod)) + '''';
              if dadosUpdateProdTrib <> '' then dadosUpdateProdTrib := dadosUpdateProdTrib + ', ';
              dadosUpdateProdTrib := dadosUpdateProdTrib + 'trib_prod_codi=' + '''' + UpperCase(RemoveAcento(prodCod)) + '''';
              if dadosUpdateProdAdic <> '' then dadosUpdateProdAdic := dadosUpdateProdAdic + ', ';
              dadosUpdateProdAdic := dadosUpdateProdAdic + 'adic_prod_codi' + '''' + UpperCase(RemoveAcento(prodCod)) + '''';
              if dadosUpdateProdCust <> '' then dadosUpdateProdCust := dadosUpdateProdCust + ', ';
              dadosUpdateProdCust := dadosUpdateProdCust + 'cust_prod_codi=' + '''' + UpperCase(RemoveAcento(prodCod)) + '''';
              if dadosUpdateItens <> '' then dadosUpdateItens := dadosUpdateItens + ', ';
              dadosUpdateItens := dadosUpdateItens + 'prodcod=' + '''' + UpperCase(RemoveAcento(prodCod)) + '''';
            end;
          end
          else begin
            colProd := colProd + ',codi';
            dadosProd := dadosProd + ',' + 'gen_id(gen_prod_id,1)';
            colProdTrib := colProdTrib + ',trib_prod_codi';
            dadosProdTrib := dadosProdTrib + ',' + 'gen_id(gen_prod_id,0)';
            colProdTrib := colProdTrib + ',trib_id';
            dadosProdTrib := dadosProdTrib + ',' + 'gen_id(gen_prod_tributos_id,1)';
            colProdAdic := colProdAdic + ',adic_prod_codi';
            dadosProdAdic := dadosProdAdic + ',' + 'gen_id(gen_prod_id,0)';
            colProdAdic := colProdAdic + ',adic_id';
            dadosProdAdic := dadosProdAdic + ',' + 'gen_id(gen_prod_adicionais_id,1)';
            colProdCust := colProdCust + ',cust_prod_codi';
            dadosProdCust := dadosProdCust + ',' + 'gen_id(gen_prod_id,0)';
            colProdCust := colProdCust + ',cust_id';
            dadosProdCust := dadosProdCust + ',' + 'gen_id(gen_prod_custos_id,1)';
            colMVA := colMVA + ',codi_prod';
            dadosMVA := dadosMVA + ',' + 'gen_id(gen_prod_id,0)';
            colMVA := colMVA + ',id';
            dadosMVA := dadosMVA + ',' + 'gen_id(gen_mva_id,1)';
            colItens := colItens + ',codi';
            dadosItens := dadosItens + ',gen_id(gen_itens_id,1)';
            colItens := colItens + ',prodcod';
            dadosItens := dadosItens + ',' + 'gen_id(gen_prod_id,0)';
            colProdForn := colProdForn + ',prod';
            dadosProdForn := dadosProdForn + ',gen_id(gen_prod_id,0)';
            colProdForn := colProdForn + ',id';
            dadosProdForn := dadosProdForn + ',' + 'gen_id(gen_prod_forn_id,1)';

            //Registros para outras empresas
            colRegistroProdTrib := colRegistroProdTrib + ',trib_id';
            dadosRegistroProdTrib := dadosRegistroProdTrib + ',' + 'gen_id(gen_prod_tributos_id,1)';
            colRegistroProdTrib := colRegistroProdTrib + ',trib_prod_codi';
            dadosRegistroProdTrib := dadosRegistroProdTrib + ',' + 'gen_id(gen_prod_id,0)';
            colRegistroProdAdic := colRegistroProdAdic + ',adic_id';
            dadosRegistroProdAdic := dadosRegistroProdAdic + ',' + 'gen_id(gen_prod_adicionais_id,1)';
            colRegistroProdAdic := colRegistroProdAdic + ',adic_prod_codi';
            dadosRegistroProdAdic := dadosRegistroProdAdic + ',' + 'gen_id(gen_prod_id,0)';
            colRegistroProdCust := colRegistroProdCust + ',cust_id';
            dadosRegistroProdCust := dadosRegistroProdCust + ',' + 'gen_id(gen_prod_custos_id,1)';
            colRegistroProdCust := colRegistroProdCust + ',cust_prod_codi';
            dadosRegistroProdCust := dadosRegistroProdCust + ',' + 'gen_id(gen_prod_id,0)';
            colRegistroMVA := colRegistroMVA + ',id';
            dadosRegistroMVA := dadosRegistroMVA + ',' + 'gen_id(gen_mva_id,1)';
            colRegistroMVA := colRegistroMVA + ',codi_prod';
            dadosRegistroMVA := dadosRegistroMVA + ',' + 'gen_id(gen_prod_id,0)';

            prodCod := getProdCodUpdate(k);
            if (prodCod = '') and (butContinue = 0) then begin
              but := Mensagem('Recomenda-se utilizar ao menos uma das seguintes colunas: CODI, REFE, REFE_ORIGINAL, CODI_BARRA, CODI_BARRA_COM',mtCustom,[mbYes, mbNo],['Continuar','Parar'],'Precisa mais informações');
              if (but = 6) then begin
                butContinue := 1;
              end
              else if (but = 7) then begin
                status := 0;
                Break;
              end;
            end;
          end;

          //Grupo, subgrupo, departamento, marca e tipo são obrigatórios, se não tiver colocar padroes
          //GRUP
          ///-----------------------------------------------------------------}
          i:=BuscaColuna(StringGrid1,'grup');
          if (i<>-1) then
          begin
            temp := UpperCase(RemoveAcento(StringGrid1.Cells[i,k]));
            temp := stringreplace(temp, '''', ' ',[rfReplaceAll, rfIgnoreCase]);
            temp := (Copy(temp,1,30));
            //Se for letras, buscar código.
            if not (IsNumeric(temp)) then
            begin
              temp2 := querySelect('select g.codi from grup_prod g where g.descr = '''+temp+'''');
              //Se não encontrar a string, cadastrar grupo
              if temp2='' then begin
                if UpperCase( ExtractFileExt(frmPrinc.DBPath.Text) ) = '.TXT' then begin
                    //Carregar arquivo TXT
                    AssignFile(fileTXT, DBPath.Text);
                    if not FileExists(DBPath.Text) then ReWrite(fileTXT)
                    else append(fileTXT);
                    WriteLn(fileTXT, 'insert into grup_prod (CODI,DESCR,EMPR) values (case when (select g.codi from grup_prod g where g.descr = '''+temp+''') is null then gen_id(gen_grup_prod_id,1 ) else (select g.codi from grup_prod g where g.descr = '''+temp+''') end,'''+temp+''',1);');
                    WriteLn(fileTXT, 'COMMIT WORK;');
                    CloseFile(fileTXT);
                  end
                else begin
                  queryInsert('insert into grup_prod (CODI,DESCR,EMPR) values (gen_id(gen_grup_prod_id,1),'''+temp+''',1);');
                end;
                colProd := colProd + ',grup';
                dadosProd := dadosProd + ',' + 'gen_id(gen_grup_prod_id,0)';
              end
              else begin
                colProd := colProd + ',grup';
                dadosProd := dadosProd + ',''' + temp2 + '''';
              end;
              //Testa se é Update
              if VerificaUpdate('grup') = 1 then begin
                if condUpdateProd <> '' then condUpdateProd := condUpdateProd + ' and ';
                condUpdateProd := condUpdateProd + 'grup=(select codi from grup_prod where descr='+''''+temp+''')';
                if condUpdateProdTrib <> '' then condUpdateProdTrib := condUpdateProdTrib + ' and ';
                condUpdateProdTrib := condUpdateProdTrib + 'trib_prod_codi in (select codi from prod where grup = (select codi from grup_prod where descr='+''''+temp+'''))';
                if condUpdateProdAdic <> '' then condUpdateProdAdic := condUpdateProdAdic + ' and ';
                condUpdateProdAdic := condUpdateProdAdic + 'adic_prod_codi in (select codi from prod where grup = (select codi from grup_prod where descr='+''''+temp+'''))';
                if condUpdateProdCust <> '' then condUpdateProdCust := condUpdateProdCust + ' and ';
                condUpdateProdCust := condUpdateProdCust + 'cust_prod_codi in (select codi from prod where grup = (select codi from grup_prod where descr='+''''+temp+'''))';
                if condUpdateItens <> '' then condUpdateItens := condUpdateItens + ' and ';
                condUpdateItens := condUpdateItens + 'cod_prod in (select codi from prod where grup = (select codi from grup_prod where descr='+''''+temp+'''))';
              end
              else begin
                if dadosUpdateProd <> '' then dadosUpdateProd := dadosUpdateProd + ', ';
                dadosUpdateProd := dadosUpdateProd + 'grup=' + '''' + temp + '''';
              end;
            end
            else begin
              //Se for números, considera como código
              //Antes buscamos se existe o código cadastrado, se não encontrar colocamos o generator mesmo
              temp2 := querySelect('select g.codi from grup_prod g where g.codi = '''+temp+'''');
              //Se não encontrar o codigo, colocamos o generator
              if temp2='' then begin
                colProd := colProd + ',grup';
                dadosProd := dadosProd + ',' + 'gen_id(gen_grup_prod_id,0)';
              end
              //Se encontrar usa o código
              else begin
                colProd := colProd + ',grup';
                dadosProd := dadosProd + ',''' + temp2 + '''';
              end;
              //Testa se é Update
              if VerificaUpdate('grup') = 1 then begin
                if condUpdateProd <> '' then condUpdateProd := condUpdateProd + ' and ';
                condUpdateProd := condUpdateProd + 'grup='+''''+temp+'''';
                if condUpdateProdTrib <> '' then condUpdateProdTrib := condUpdateProdTrib + ' and ';
                condUpdateProdTrib := condUpdateProdTrib + 'trib_prod_codi in (select codi from prod where grup = '+''''+temp+''')';
                if condUpdateProdAdic <> '' then condUpdateProdAdic := condUpdateProdAdic + ' and ';
                condUpdateProdAdic := condUpdateProdAdic + 'adic_prod_codi in (select codi from prod where grup = '+''''+temp+''')';
                if condUpdateProdCust <> '' then condUpdateProdCust := condUpdateProdCust + ' and ';
                condUpdateProdCust := condUpdateProdCust + 'cust_prod_codi in (select codi from prod where grup = '+''''+temp+''')';
                if condUpdateItens <> '' then condUpdateItens := condUpdateItens + ' and ';
                condUpdateItens := condUpdateItens + 'cod_prod in (select codi from prod where grup = '+''''+temp+''')';
              end
              else begin
                if dadosUpdateProd <> '' then dadosUpdateProd := dadosUpdateProd + ', ';
                dadosUpdateProd := dadosUpdateProd + 'grup=' + '''' + temp + '''';
              end;
            end;
          end
          else begin
            colProd := colProd + ',grup';
            dadosProd := dadosProd + ',''' + '1' + '''';
          end;
          //SUB_GRUP
          i:=BuscaColuna(StringGrid1,'sub_grup');
          if (i<>-1) then
          begin
            temp := UpperCase(RemoveAcento(StringGrid1.Cells[i,k]));
            temp := stringreplace(temp, '''', ' ',[rfReplaceAll, rfIgnoreCase]);
            temp := (Copy(temp,1,30));
            //Se for letras, buscar código.
            if not (IsNumeric(temp)) then
            begin
              temp2 := querySelect('select g.codi from sub_grup_prod g where g.descr = '''+temp+'''');
              //Se não encontrar a string, cadastrar sub grupo
              if temp2='' then begin
                if UpperCase( ExtractFileExt(frmPrinc.DBPath.Text) ) = '.TXT' then begin
                    //Carregar arquivo TXT
                    AssignFile(fileTXT, DBPath.Text);
                    if not FileExists(DBPath.Text) then ReWrite(fileTXT)
                    else append(fileTXT);
                    WriteLn(fileTXT, 'insert into sub_grup_prod (CODI,DESCR,EMPR) values (case when (select g.codi from sub_grup_prod g where g.descr = '''+temp+''') is null then gen_id(gen_sub_grup_prod_id,1 ) else (select g.codi from sub_grup_prod g where g.descr = '''+temp+''') end,'''+temp+''',1);');
                    WriteLn(fileTXT, 'COMMIT WORK;');
                    CloseFile(fileTXT);
                  end
                else begin
                  queryInsert('insert into sub_grup_prod (CODI,DESCR,EMPR) values (gen_id(gen_sub_grup_prod_id,1),'''+temp+''',1);');
                end;
                colProd := colProd + ',sub_grup';
                dadosProd := dadosProd + ',' + 'gen_id(gen_sub_grup_prod_id,0)';
              end
              else begin
                colProd := colProd + ',sub_grup';
                dadosProd := dadosProd + ',''' + temp2 + '''';
              end;
              //Testa se é Update
              if VerificaUpdate('sub_grup') = 1 then begin
                if condUpdateProd <> '' then condUpdateProd := condUpdateProd + ' and ';
                condUpdateProd := condUpdateProd + 'sub_grup=(select codi from sub_grup_prod where descr='+''''+temp+''')';
                if condUpdateProdTrib <> '' then condUpdateProdTrib := condUpdateProdTrib + ' and ';
                condUpdateProdTrib := condUpdateProdTrib + 'trib_prod_codi in (select codi from prod where sub_grup = (select codi from sub_grup_prod where descr='+''''+temp+'''))';
                if condUpdateProdAdic <> '' then condUpdateProdAdic := condUpdateProdAdic + ' and ';
                condUpdateProdAdic := condUpdateProdAdic + 'adic_prod_codi in (select codi from prod where sub_grup = (select codi from sub_grup_prod where descr='+''''+temp+'''))';
                if condUpdateProdCust <> '' then condUpdateProdCust := condUpdateProdCust + ' and ';
                condUpdateProdCust := condUpdateProdCust + 'cust_prod_codi in (select codi from prod where sub_grup = (select codi from sub_grup_prod where descr='+''''+temp+'''))';
                if condUpdateItens <> '' then condUpdateItens := condUpdateItens + ' and ';
                condUpdateItens := condUpdateItens + 'cod_prod in (select codi from prod where sub_grup = (select codi from sub_grup_prod where descr='+''''+temp+'''))';
              end
              else begin
                if dadosUpdateProd <> '' then dadosUpdateProd := dadosUpdateProd + ', ';
                dadosUpdateProd := dadosUpdateProd + 'sub_grup=' + '''' + temp + '''';
              end;
            end
            else begin
              //Se for números, considera como código
              //Antes buscamos se existe o código cadastrado, se não encontrar colocamos o generator mesmo
              temp2 := querySelect('select g.codi from sub_grup_prod g where g.codi = '''+temp+'''');
              //Se não encontrar o codigo, colocamos o generator
              if temp2='' then begin
                colProd := colProd + ',sub_grup';
                dadosProd := dadosProd + ',' + 'gen_id(gen_sub_grup_prod_id,0)';
              end
              //Se encontrar usa o código
              else begin
                colProd := colProd + ',sub_grup';
                dadosProd := dadosProd + ',''' + temp2 + '''';
              end;
              //Testa se é Update
              if VerificaUpdate('sub_grup') = 1 then begin
                if condUpdateProd <> '' then condUpdateProd := condUpdateProd + ' and ';
                condUpdateProd := condUpdateProd + 'sub_grup='+''''+temp+'''';
                if condUpdateProdTrib <> '' then condUpdateProdTrib := condUpdateProdTrib + ' and ';
                condUpdateProdTrib := condUpdateProdTrib + 'trib_prod_codi in (select codi from prod where sub_grup = '+''''+temp+''')';
                if condUpdateProdAdic <> '' then condUpdateProdAdic := condUpdateProdAdic + ' and ';
                condUpdateProdAdic := condUpdateProdAdic + 'adic_prod_codi in (select codi from prod where sub_grup = '+''''+temp+''')';
                if condUpdateProdCust <> '' then condUpdateProdCust := condUpdateProdCust + ' and ';
                condUpdateProdCust := condUpdateProdCust + 'cust_prod_codi in (select codi from prod where sub_grup = '+''''+temp+''')';
                if condUpdateItens <> '' then condUpdateItens := condUpdateItens + ' and ';
                condUpdateItens := condUpdateItens + 'cod_prod in (select codi from prod where sub_grup = '+''''+temp+''')';
              end
              else begin
                if dadosUpdateProd <> '' then dadosUpdateProd := dadosUpdateProd + ', ';
                dadosUpdateProd := dadosUpdateProd + 'sub_grup=' + '''' + temp + '''';
              end;
            end;
          end
          else begin
            colProd := colProd + ',sub_grup';
            dadosProd := dadosProd + ',''' + '1' + '''';
          end;
          //DEPARTAMENTO
          i:=BuscaColuna(StringGrid1,'departamento');
          if (i<>-1) then
          begin
            temp := UpperCase(RemoveAcento(StringGrid1.Cells[i,k]));
            temp := stringreplace(temp, '''', ' ',[rfReplaceAll, rfIgnoreCase]);
            temp := (Copy(temp,1,30));
            //Se for letras, buscar código.
            if not (IsNumeric(temp)) then
            begin
              temp2 := querySelect('select g.codi from departamento g where g.descr = '''+temp+'''');
              //Se não encontrar a string, cadastrar departamento
              if temp2='' then begin
                if UpperCase( ExtractFileExt(frmPrinc.DBPath.Text) ) = '.TXT' then begin
                    //Carregar arquivo TXT
                    AssignFile(fileTXT, DBPath.Text);
                    if not FileExists(DBPath.Text) then ReWrite(fileTXT)
                    else append(fileTXT);
                    WriteLn(fileTXT, 'insert into departamento (CODI,DESCR) values (case when (select g.codi from departamento g where g.descr = '''+temp+''') is null then (select max(g.codi) from departamento g) else (select g.codi from departamento g where g.descr = '''+temp+''') end,'''+temp+''');');
                    WriteLn(fileTXT, 'COMMIT WORK;');
                    CloseFile(fileTXT);
                  end
                else begin
                  temp2 := querySelect('select max(g.codi) from departamento g');
                  temp2 := IntToStr(StrToInt(temp2)+1);
                  queryInsert('insert into departamento (CODI,DESCR) values ('+temp2+','''+temp+''');');
                end;
                colProd := colProd + ',codi_departamento';
                dadosProd := dadosProd + ',' + temp2;
              end
              else begin
                colProd := colProd + ',codi_departamento';
                dadosProd := dadosProd + ',''' + temp2 + '''';
              end;
              //Testa se é Update
              if VerificaUpdate('departamento') = 1 then begin
                if condUpdateProd <> '' then condUpdateProd := condUpdateProd + ' and ';
                condUpdateProd := condUpdateProd + 'codi_departamento=(select codi from departamento where descr='+''''+temp+''')';
                if condUpdateProdTrib <> '' then condUpdateProdTrib := condUpdateProdTrib + ' and ';
                condUpdateProdTrib := condUpdateProdTrib + 'trib_prod_codi in (select codi from prod where codi_departamento = (select codi from departamento where descr='+''''+temp+'''))';
                if condUpdateProdAdic <> '' then condUpdateProdAdic := condUpdateProdAdic + ' and ';
                condUpdateProdAdic := condUpdateProdAdic + 'adic_prod_codi in (select codi from prod where codi_departamento = (select codi from departamento where descr='+''''+temp+'''))';
                if condUpdateProdCust <> '' then condUpdateProdCust := condUpdateProdCust + ' and ';
                condUpdateProdCust := condUpdateProdCust + 'cust_prod_codi in (select codi from prod where codi_departamento = (select codi from departamento where descr='+''''+temp+'''))';
                if condUpdateItens <> '' then condUpdateItens := condUpdateItens + ' and ';
                condUpdateItens := condUpdateItens + 'cod_prod in (select codi from prod where codi_departamento = (select codi from departamento where descr='+''''+temp+'''))';
              end
              else begin
                if dadosUpdateProd <> '' then dadosUpdateProd := dadosUpdateProd + ', ';
                dadosUpdateProd := dadosUpdateProd + 'codi_departamento=' + '''' + temp + '''';
              end;
            end
            else begin
              //Se for números, considera como código
              //Antes buscamos se existe o código cadastrado, se não encontrar colocamos o generator mesmo
              temp2 := querySelect('select g.codi from departamento g where g.codi = '''+temp+'''');
              //Se não encontrar o codigo, colocamos o generator
              if temp2='' then begin
                temp2 := querySelect('select max(g.codi) from departamento g');
                colProd := colProd + ',codi_departamento';
                dadosProd := dadosProd + ',' + temp2;
              end
              //Se encontrar usa o código
              else begin
                colProd := colProd + ',codi_departamento';
                dadosProd := dadosProd + ',''' + temp2 + '''';
              end;
              //Testa se é Update
              if VerificaUpdate('departamento') = 1 then begin
                if condUpdateProd <> '' then condUpdateProd := condUpdateProd + ' and ';
                condUpdateProd := condUpdateProd + 'codi_departamento='+''''+temp+'''';
                if condUpdateProdTrib <> '' then condUpdateProdTrib := condUpdateProdTrib + ' and ';
                condUpdateProdTrib := condUpdateProdTrib + 'trib_prod_codi in (select codi from prod where departamento = '+''''+temp+''')';
                if condUpdateProdAdic <> '' then condUpdateProdAdic := condUpdateProdAdic + ' and ';
                condUpdateProdAdic := condUpdateProdAdic + 'adic_prod_codi in (select codi from prod where departamento = '+''''+temp+''')';
                if condUpdateProdCust <> '' then condUpdateProdCust := condUpdateProdCust + ' and ';
                condUpdateProdCust := condUpdateProdCust + 'cust_prod_codi in (select codi from prod where departamento = '+''''+temp+''')';
                if condUpdateItens <> '' then condUpdateItens := condUpdateItens + ' and ';
                condUpdateItens := condUpdateItens + 'cod_prod in (select codi from prod where departamento = '+''''+temp+''')';
              end
              else begin
                if dadosUpdateProd <> '' then dadosUpdateProd := dadosUpdateProd + ', ';
                dadosUpdateProd := dadosUpdateProd + 'codi_departamento=' + '''' + temp + '''';
              end;
            end;
          end
          else begin
            colProd := colProd + ',codi_departamento';
            dadosProd := dadosProd + ',''' + '0' + '''';
          end;
          //MARCA
          i:=BuscaColuna(StringGrid1,'marca');
          if (i<>-1) then
          begin
            temp := UpperCase(RemoveAcento(StringGrid1.Cells[i,k]));
            temp := stringreplace(temp, '''', ' ',[rfReplaceAll, rfIgnoreCase]);
            temp := (Copy(temp,1,50));
            //Se for letras, buscar código.
            if not (IsNumeric(temp)) then
            begin
              temp2 := querySelect('select g.codi from marca g where g.descr = '''+temp+'''');
              //Se não encontrar a string, cadastrar marca
              if temp2='' then begin
                if UpperCase( ExtractFileExt(frmPrinc.DBPath.Text) ) = '.TXT' then begin
                    //Carregar arquivo TXT
                    AssignFile(fileTXT, DBPath.Text);
                    if not FileExists(DBPath.Text) then ReWrite(fileTXT)
                    else append(fileTXT);
                    WriteLn(fileTXT, 'insert into marca (CODI,DESCR) values (case when (select g.codi from marca g where g.descr = '''+temp+''') is null then gen_id(gen_marca_id,1) else (select g.codi from marca g where g.descr = '''+temp+''') end,'''+temp+''');');
                    WriteLn(fileTXT, 'COMMIT WORK;');
                    CloseFile(fileTXT);
                  end
                else begin
                  queryInsert('insert into marca (CODI,DESCR) values (gen_id(gen_marca_id,1),'''+temp+''');');
                end;
                colProd := colProd + ',marca';
                dadosProd := dadosProd + ',' + 'gen_id(gen_marca_id,0)';
              end
              else begin
                colProd := colProd + ',marca';
                dadosProd := dadosProd + ',''' + temp2 + '''';
              end;
              //Testa se é Update
              if VerificaUpdate('marca') = 1 then begin
                if condUpdateProd <> '' then condUpdateProd := condUpdateProd + ' and ';
                condUpdateProd := condUpdateProd + 'marca=(select codi from marca where descr='+''''+temp+''')';
                if condUpdateProdTrib <> '' then condUpdateProdTrib := condUpdateProdTrib + ' and ';
                condUpdateProdTrib := condUpdateProdTrib + 'trib_prod_codi in (select codi from prod where marca = (select codi from marca where descr='+''''+temp+'''))';
                if condUpdateProdAdic <> '' then condUpdateProdAdic := condUpdateProdAdic + ' and ';
                condUpdateProdAdic := condUpdateProdAdic + 'adic_prod_codi in (select codi from prod where marca = (select codi from marca where descr='+''''+temp+'''))';
                if condUpdateProdCust <> '' then condUpdateProdCust := condUpdateProdCust + ' and ';
                condUpdateProdCust := condUpdateProdCust + 'cust_prod_codi in (select codi from prod where marca = (select codi from marca where descr='+''''+temp+'''))';
                if condUpdateItens <> '' then condUpdateItens := condUpdateItens + ' and ';
                condUpdateItens := condUpdateItens + 'cod_prod in (select codi from prod where marca = (select codi from marca where descr='+''''+temp+'''))';
              end
              else begin
                if dadosUpdateProd <> '' then dadosUpdateProd := dadosUpdateProd + ', ';
                dadosUpdateProd := dadosUpdateProd + 'marca=' + '''' + temp + '''';
              end;
            end
            else begin
              //Se for números, considera como código
              //Antes buscamos se existe o código cadastrado, se não encontrar colocamos o generator mesmo
              temp2 := querySelect('select g.codi from marca g where g.codi = '''+temp+'''');
              //Se não encontrar o codigo, colocamos o generator
              if temp2='' then begin
                colProd := colProd + ',marca';
                dadosProd := dadosProd + ',' + 'gen_id(gen_marca_id,0)';
              end
              //Se encontrar usa o código
              else begin
                colProd := colProd + ',marca';
                dadosProd := dadosProd + ',''' + temp2 + '''';
              end;
              //Testa se é Update
              if VerificaUpdate('marca') = 1 then begin
                if condUpdateProd <> '' then condUpdateProd := condUpdateProd + ' and ';
                condUpdateProd := condUpdateProd + 'marca='+''''+temp+'''';
                if condUpdateProdTrib <> '' then condUpdateProdTrib := condUpdateProdTrib + ' and ';
                condUpdateProdTrib := condUpdateProdTrib + 'trib_prod_codi in (select codi from prod where marca = '+''''+temp+''')';
                if condUpdateProdAdic <> '' then condUpdateProdAdic := condUpdateProdAdic + ' and ';
                condUpdateProdAdic := condUpdateProdAdic + 'adic_prod_codi in (select codi from prod where marca = '+''''+temp+''')';
                if condUpdateProdCust <> '' then condUpdateProdCust := condUpdateProdCust + ' and ';
                condUpdateProdCust := condUpdateProdCust + 'cust_prod_codi in (select codi from prod where marca = '+''''+temp+''')';
                if condUpdateItens <> '' then condUpdateItens := condUpdateItens + ' and ';
                condUpdateItens := condUpdateItens + 'cod_prod in (select codi from prod where marca = '+''''+temp+''')';
              end
              else begin
                if dadosUpdateProd <> '' then dadosUpdateProd := dadosUpdateProd + ', ';
                dadosUpdateProd := dadosUpdateProd + 'marca=' + '''' + temp + '''';
              end;
            end;
          end;
          //TIPO
          i:=BuscaColuna(StringGrid1,'tipo');
          if (i<>-1) then
          begin
            colProd := colProd + ',codi_tipo';
            if StringGrid1.Cells[i,k] <> '' then begin
              dadosProd := dadosProd + ',''' + UpperCase(RemoveAcento(StringGrid1.Cells[i,k])) + '''';
              //Testa se é Update
              if VerificaUpdate('tipo') = 1 then begin
                if condUpdateProd <> '' then condUpdateProd := condUpdateProd + ' and ';
                condUpdateProd := condUpdateProd + 'codi_tipo='+''''+UpperCase(RemoveAcento(StringGrid1.Cells[i,k]))+'''';
                if condUpdateProdTrib <> '' then condUpdateProdTrib := condUpdateProdTrib + ' and ';
                condUpdateProdTrib := condUpdateProdTrib + 'trib_prod_codi in (select codi from prod where codi_tipo = '+''''+UpperCase(RemoveAcento(StringGrid1.Cells[i,k]))+''')';
                if condUpdateProdAdic <> '' then condUpdateProdAdic := condUpdateProdAdic + ' and ';
                condUpdateProdAdic := condUpdateProdAdic + 'adic_prod_codi in (select codi from prod where codi_tipo = '+''''+UpperCase(RemoveAcento(StringGrid1.Cells[i,k]))+''')';
                if condUpdateProdCust <> '' then condUpdateProdCust := condUpdateProdCust + ' and ';
                condUpdateProdCust := condUpdateProdCust + 'cust_prod_codi in (select codi from prod where codi_tipo = '+''''+UpperCase(RemoveAcento(StringGrid1.Cells[i,k]))+''')';
                if condUpdateItens <> '' then condUpdateItens := condUpdateItens + ' and ';
                condUpdateItens := condUpdateItens + 'cod_prod in (select codi from prod where codi_tipo = '+''''+UpperCase(RemoveAcento(StringGrid1.Cells[i,k]))+''')';
              end
              else begin
                if dadosUpdateProd <> '' then dadosUpdateProd := dadosUpdateProd + ', ';
                dadosUpdateProd := dadosUpdateProd + 'codi_tipo=' + '''' + UpperCase(RemoveAcento(StringGrid1.Cells[i,k])) + '''';
              end;
            end else begin
              dadosProd := dadosProd + ',''' + '0' + '''';
            end;
          end
          else begin
            colProd := colProd + ',codi_tipo';
            dadosProd := dadosProd + ',''' + '0' + '''';
          end;

          //PS (Produto ou serviço) Padrão deixar 'P' pois sempre importamos produtos
          colProd := colProd + ',ps';
          dadosProd := dadosProd + ',''' + 'P' + '''';

          //Quantidade é obrigatório, se não tiver põe 0
          //QTD
          i:=BuscaColuna(StringGrid1,'qtd');
          if (i<>-1) then
          begin
            if StringGrid1.Cells[i,k]='' then
            begin
              temp := '0';
            end
            else begin
              temp := StringGrid1.Cells[i,k];
            end;
            temp := corrigeFloat(temp);
            dadosItens := dadosItens + ',' + temp;
            colItens := colItens + ',qtd';
            //Testa se é Update
            if VerificaUpdate('qtd') = 1 then begin
              if condUpdateProd <> '' then condUpdateProd := condUpdateProd + ' and ';
              condUpdateProd := condUpdateProd + 'codi in (select cod_prod from prod_esto where qtd = '+temp+')';
              if condUpdateProdTrib <> '' then condUpdateProdTrib := condUpdateProdTrib + ' and ';
              condUpdateProdTrib := condUpdateProdTrib + 'trib_prod_codi in (select cod_prod from prod_esto where qtd = '+temp+')';
              if condUpdateProdAdic <> '' then condUpdateProdAdic := condUpdateProdAdic + ' and ';
              condUpdateProdAdic := condUpdateProdAdic + 'adic_prod_codi in (select cod_prod from prod_esto where qtd = '+temp+')';
              if condUpdateProdCust <> '' then condUpdateProdCust := condUpdateProdCust + ' and ';
              condUpdateProdCust := condUpdateProdCust + 'cust_prod_codi in (select cod_prod from prod_esto where qtd = '+temp+')';
              if condUpdateItens <> '' then condUpdateItens := condUpdateItens + ' and ';
              condUpdateItens := condUpdateItens + 'cod_prod in (select cod_prod from prod_esto where qtd = '+temp+')';
            end
            else begin
              {
               Comando para inserir na ITENS quando a diferenca de estoque for diferente de 0
              }
              //Comando Insert na itens - Ainda nao tem condição no WHERE, pois irá usar condUpdateItens concatenado
              dadosUpdateItens := dadosUpdateItens + ' insert into ITENS (CODI,PRODCOD,NUME,TIPO,EPV,QTD,EMPR) '+
                  '    select '+
                  '        gen_id(gen_itens_id,1) CODI, '+
                  '        '+prodCod+' PRODCOD, '+
                  '        gen_id(gen_prod_ajus_id,0)+1 NUME, '+
                  '        case '+
                  '            when ('+temp+'-pe.qtd) > 0 then 6 '+
                  '            when ('+temp+'-pe.qtd) < 0 then 3 '+
                  '        end TIPO, '+
                  '        ''A'' EPV, '+
                  '        ABS('+temp+'-pe.qtd) QTD, '+
                  '        '+prodEmpr+' EMPR '+
                  '    from prod_esto pe '+
                  '    where ('+temp+'-pe.qtd) <> 0 ';
            end;
            //Setar tipo do item
            colItens := colItens + ',tipo';
            dadosItens := dadosItens + ',''' + '6' + '''';
          end;

          //EST
          i:=BuscaColuna(StringGrid1,'est');
          if (i<>-1) then
          begin
            if StringGrid1.Cells[i,k]='' then
            begin
              temp := '0';
            end
            else begin
              temp := StringGrid1.Cells[i,k];
            end;
            temp := corrigeFloat(temp);
            dadosItens := dadosItens + ',' + temp;
            colItens := colItens + ',qtd';
            //Testa se é Update
            if VerificaUpdate('est') = 1 then begin
              if condUpdateProd <> '' then condUpdateProd := condUpdateProd + ' and ';
              condUpdateProd := condUpdateProd + 'codi in (select cod_prod from prod_esto where qtd = '+temp+')';
              if condUpdateProdTrib <> '' then condUpdateProdTrib := condUpdateProdTrib + ' and ';
              condUpdateProdTrib := condUpdateProdTrib + 'trib_prod_codi in (select cod_prod from prod_esto where qtd = '+temp+')';
              if condUpdateProdAdic <> '' then condUpdateProdAdic := condUpdateProdAdic + ' and ';
              condUpdateProdAdic := condUpdateProdAdic + 'adic_prod_codi in (select cod_prod from prod_esto where qtd = '+temp+')';
              if condUpdateProdCust <> '' then condUpdateProdCust := condUpdateProdCust + ' and ';
              condUpdateProdCust := condUpdateProdCust + 'cust_prod_codi in (select cod_prod from prod_esto where qtd = '+temp+')';
              if condUpdateItens <> '' then condUpdateItens := condUpdateItens + ' and ';
              condUpdateItens := condUpdateItens + 'cod_prod in (select cod_prod from prod_esto where qtd = '+temp+')';
            end
            else begin
              {
               Comando para inserir na ITENS quando a diferenca de estoque for diferente de 0
              }
              //Comando Insert na itens - Ainda nao tem condição no WHERE, pois irá usar condUpdateItens concatenado
              dadosUpdateItens := dadosUpdateItens + ' insert into ITENS (CODI,PRODCOD,NUME,TIPO,EPV,QTD,EMPR) '+
                  '    select '+
                  '        gen_id(gen_itens_id,1) CODI, '+
                  '        '+prodCod+' PRODCOD, '+
                  '        gen_id(gen_prod_ajus_id,0)+1 NUME, '+
                  '        case '+
                  '            when ('+temp+'-pe.qtd) > 0 then 5 '+
                  '            when ('+temp+'-pe.qtd) < 0 then 2 '+
                  '        end TIPO, '+
                  '        ''A'' EPV, '+
                  '        ABS('+temp+'-pe.qtd) QTD, '+
                  '        '+prodEmpr+' EMPR '+
                  '    from prod_esto pe '+
                  '    where ('+temp+'-pe.qtd) <> 0 ';
            end;
            //Setar tipo do item
            colItens := colItens + ',tipo';
            dadosItens := dadosItens + ',''' + '5' + '''';
          end;

          //MAX
          i:=BuscaColuna(StringGrid1,'max');
          if (i<>-1) then
          begin
            if StringGrid1.Cells[i,k]='' then
            begin
              temp := '0';
            end
            else begin
              temp := StringGrid1.Cells[i,k];
            end;
            temp := corrigeFloat(temp);
            dadosItens := dadosItens + ',' + temp;
            colItens := colItens + ',qtd';
            //Testa se é Update
            if VerificaUpdate('est') = 1 then begin
              if condUpdateProd <> '' then condUpdateProd := condUpdateProd + ' and ';
              condUpdateProd := condUpdateProd + 'codi in (select cod_prod from prod_esto where qtd_max = '+temp+')';
              if condUpdateProdTrib <> '' then condUpdateProdTrib := condUpdateProdTrib + ' and ';
              condUpdateProdTrib := condUpdateProdTrib + 'trib_prod_codi in (select cod_prod from prod_esto where qtd_max = '+temp+')';
              if condUpdateProdAdic <> '' then condUpdateProdAdic := condUpdateProdAdic + ' and ';
              condUpdateProdAdic := condUpdateProdAdic + 'adic_prod_codi in (select cod_prod from prod_esto where qtd_max = '+temp+')';
              if condUpdateProdCust <> '' then condUpdateProdCust := condUpdateProdCust + ' and ';
              condUpdateProdCust := condUpdateProdCust + 'cust_prod_codi in (select cod_prod from prod_esto where qtd_max = '+temp+')';
              if condUpdateItens <> '' then condUpdateItens := condUpdateItens + ' and ';
              condUpdateItens := condUpdateItens + 'cod_prod in (select cod_prod from prod_esto where qtd_max = '+temp+')';
            end
            else begin
              {
               Comando para inserir na ITENS quando a diferenca de estoque for diferente de 0
              }
              //Comando Insert na itens - Ainda nao tem condição no WHERE, pois irá usar condUpdateItens concatenado
              dadosUpdateItens := dadosUpdateItens + ' insert into ITENS (CODI,PRODCOD,NUME,TIPO,EPV,QTD,EMPR) '+
                  '    select '+
                  '        gen_id(gen_itens_id,1) CODI, '+
                  '        '+prodCod+' PRODCOD, '+
                  '        gen_id(gen_prod_ajus_id,0)+1 NUME, '+
                  '        case '+
                  '            when ('+temp+'-pe.qtd) > 0 then 4 '+
                  '            when ('+temp+'-pe.qtd) < 0 then 1 '+
                  '        end TIPO, '+
                  '        ''A'' EPV, '+
                  '        ABS('+temp+'-pe.qtd) QTD, '+
                  '        '+prodEmpr+' EMPR '+
                  '    from prod_esto pe '+
                  '    where ('+temp+'-pe.qtd) <> 0 ';
            end;
            //Setar tipo do item
            colItens := colItens + ',tipo';
            dadosItens := dadosItens + ',''' + '4' + '''';
          end;

          //Se não tiver informação de estoque, coloca padrões
          if (BuscaColuna(StringGrid1,'qtd')=-1) and (BuscaColuna(StringGrid1,'est')=-1) and (BuscaColuna(StringGrid1,'max')=-1) then begin
            colItens := colItens + ',qtd';
            dadosItens := dadosItens + ',''' + '0' + '''';
            //Setar tipo do item
            colItens := colItens + ',tipo';
            dadosItens := dadosItens + ',''' + '6' + '''';
          end;
          //Campos adicionais para a itens
          colItens := colItens + ',epv';
          dadosItens := dadosItens + ',''' + 'A' + '''';
          colItens := colItens + ',nume';
          dadosItens := dadosItens + ',' + 'gen_id(gen_prod_ajus_id,0)';

          //Fornecedor é obrigatório, se não tiver põe 1
          //FORN
          i:=BuscaColuna(StringGrid1,'forn');
          if (i<>-1) then
          begin
            colProdForn := colProdForn + ',forn';
            dadosProdForn := dadosProdForn + ',''' + StringGrid1.Cells[i,k] + '''';
          end
          else begin
            colProdForn := colProdForn + ',forn';
            dadosProdForn := dadosProdForn + ',''' + '1' + '''';
          end;



          for i := 0 to StringGrid1.ColCount-1 do
          begin
            //COLEÇÃO
            ///-----------------------------------------------------------------}
            if (LowerCase(StringGrid1.Cells[i,0])='colecao') then
            begin
              temp := UpperCase(RemoveAcento(StringGrid1.Cells[i,k]));
              temp := stringreplace(temp, '''', ' ',[rfReplaceAll, rfIgnoreCase]);
              temp := (Copy(temp,1,30));
              if temp <> '' then
              begin
                temp2 := querySelect('select pc.codi from prod_colecao pc where pc.descri= '''+temp+'''');
                //Se não encontrar a string, cadastrar grupo
                if temp2='' then begin
                  if UpperCase( ExtractFileExt(frmPrinc.DBPath.Text) ) = '.TXT' then begin
                      //Carregar arquivo TXT
                      AssignFile(fileTXT, DBPath.Text);
                      if not FileExists(DBPath.Text) then ReWrite(fileTXT)
                      else append(fileTXT);
                      WriteLn(fileTXT, 'insert into prod_colecao (CODI,DESCRI) values (case when (select pc.codi from prod_colecao pc where pc.descri= '''+temp+''') is null then gen_id(gen_prod_colecao_id,1 ) else (select pc.codi from prod_colecao pc where pc.descri= '''+temp+''') end,'''+temp+''');');
                      WriteLn(fileTXT, 'COMMIT WORK;');
                      CloseFile(fileTXT);
                    end
                  else begin
                    queryInsert('insert into prod_colecao (CODI,DESCRI) values (gen_id(gen_prod_colecao_id,1),'''+temp+''');');
                  end;
                  colProd := colProd + ',codi_colecao';
                  dadosProd := dadosProd + ',' + 'gen_id(gen_prod_colecao_id,0)';
                end
                else begin
                  colProd := colProd + ',codi_colecao';
                  dadosProd := dadosProd + ',''' + temp2 + '''';
                end;
                //Testa se é Update
                if VerificaUpdate('colecao') = 1 then begin
                  if condUpdateProd <> '' then condUpdateProd := condUpdateProd + ' and ';
                  condUpdateProd := condUpdateProd + 'codi_colecao=(select codi from prod_colecao where DESCRI='+''''+temp+''')';
                  if condUpdateProdTrib <> '' then condUpdateProdTrib := condUpdateProdTrib + ' and ';
                  condUpdateProdTrib := condUpdateProdTrib + 'trib_prod_codi in (select codi from prod where codi_colecao = (select codi from prod_colecao where DESCRI='+''''+temp+'''))';
                  if condUpdateProdAdic <> '' then condUpdateProdAdic := condUpdateProdAdic + ' and ';
                  condUpdateProdAdic := condUpdateProdAdic + 'adic_prod_codi in (select codi from prod where codi_colecao = (select codi from prod_colecao where DESCRI='+''''+temp+'''))';
                  if condUpdateProdCust <> '' then condUpdateProdCust := condUpdateProdCust + ' and ';
                  condUpdateProdCust := condUpdateProdCust + 'cust_prod_codi in (select codi from prod where codi_colecao = (select codi from prod_colecao where DESCRI='+''''+temp+'''))';
                  if condUpdateItens <> '' then condUpdateItens := condUpdateItens + ' and ';
                  condUpdateItens := condUpdateItens + 'cod_prod in (select codi from prod where codi_colecao = (select codi from prod_colecao where DESCRI='+''''+temp+'''))';
                end
                else begin
                  if dadosUpdateProd <> '' then dadosUpdateProd := dadosUpdateProd + ', ';
                  dadosUpdateProd := dadosUpdateProd + 'codi_colecao=' + '''' + temp + '''';
                end;
              end;
            end
            //DESCR
            else if (LowerCase(StringGrid1.Cells[i,0])='descr') then
            begin
              colProd := colProd + ',descr';
              temp := UpperCase(RemoveAcento(StringGrid1.Cells[i,k]));
              temp := stringreplace(temp, '''', QuotedStr(''''),[rfReplaceAll, rfIgnoreCase]);
              temp := (Copy(temp,1,120));
              dadosProd := dadosProd + ',''' + temp + '''';
              //Testa se é Update
              if VerificaUpdate('descr') = 1 then begin
                if condUpdateProd <> '' then condUpdateProd := condUpdateProd + ' and ';
                condUpdateProd := condUpdateProd + 'descr='+''''+temp+'''';
                if condUpdateProdTrib <> '' then condUpdateProdTrib := condUpdateProdTrib + ' and ';
                condUpdateProdTrib := condUpdateProdTrib + 'trib_prod_codi in (select codi from prod where descr = '+''''+temp+''')';
                if condUpdateProdAdic <> '' then condUpdateProdAdic := condUpdateProdAdic + ' and ';
                condUpdateProdAdic := condUpdateProdAdic + 'adic_prod_codi in (select codi from prod where descr = '+''''+temp+''')';
                if condUpdateProdCust <> '' then condUpdateProdCust := condUpdateProdCust + ' and ';
                condUpdateProdCust := condUpdateProdCust + 'cust_prod_codi in (select codi from prod where descr = '+''''+temp+''')';
                if condUpdateItens <> '' then condUpdateItens := condUpdateItens + ' and ';
                condUpdateItens := condUpdateItens + 'cod_prod in (select codi from prod where descr = '+''''+temp+''')';
              end
              else begin
                if dadosUpdateProd <> '' then dadosUpdateProd := dadosUpdateProd + ', ';
                dadosUpdateProd := dadosUpdateProd + 'descr=' + '''' + temp + '''';
              end;
            end
            //DESCR2 (DESCRIÇÃO COMPLEMENTAR)
            else if (LowerCase(StringGrid1.Cells[i,0])='descr2') then
            begin
              colProd := colProd + ',descr2';
              temp := UpperCase(RemoveAcento(StringGrid1.Cells[i,k]));
              temp := stringreplace(temp, '''', QuotedStr(''''),[rfReplaceAll, rfIgnoreCase]);
              temp := (Copy(temp,1,255));
              dadosProd := dadosProd + ',''' + temp + '''';
              //Testa se é Update
              if VerificaUpdate('descr2') = 1 then begin
                if condUpdateProd <> '' then condUpdateProd := condUpdateProd + ' and ';
                condUpdateProd := condUpdateProd + 'descr2='+''''+temp+'''';
                if condUpdateProdTrib <> '' then condUpdateProdTrib := condUpdateProdTrib + ' and ';
                condUpdateProdTrib := condUpdateProdTrib + 'trib_prod_codi in (select codi from prod where descr2 = '+''''+temp+''')';
                if condUpdateProdAdic <> '' then condUpdateProdAdic := condUpdateProdAdic + ' and ';
                condUpdateProdAdic := condUpdateProdAdic + 'adic_prod_codi in (select codi from prod where descr2 = '+''''+temp+''')';
                if condUpdateProdCust <> '' then condUpdateProdCust := condUpdateProdCust + ' and ';
                condUpdateProdCust := condUpdateProdCust + 'cust_prod_codi in (select codi from prod where descr2 = '+''''+temp+''')';
                if condUpdateItens <> '' then condUpdateItens := condUpdateItens + ' and ';
                condUpdateItens := condUpdateItens + 'cod_prod in (select codi from prod where descr2 = '+''''+temp+''')';
              end
              else begin
                if dadosUpdateProd <> '' then dadosUpdateProd := dadosUpdateProd + ', ';
                dadosUpdateProd := dadosUpdateProd + 'descr2=' + '''' + temp + '''';
              end;
            end
            //REFE (Referencia)
            else if (LowerCase(StringGrid1.Cells[i,0])='refe') then
            begin
              temp := UpperCase(RemoveAcento(StringGrid1.Cells[i,k]));
              temp := stringreplace(temp, ',', '.',[rfReplaceAll, rfIgnoreCase]);
              colProd := colProd + ',refe';
              dadosProd := dadosProd + ',''' + temp + '''';

              //Testa se é Update
              if VerificaUpdate('refe') = 1 then begin
                if condUpdateProd <> '' then condUpdateProd := condUpdateProd + ' and ';
                condUpdateProd := condUpdateProd + 'refe='+''''+temp+'''';
                if condUpdateProdTrib <> '' then condUpdateProdTrib := condUpdateProdTrib + ' and ';
                condUpdateProdTrib := condUpdateProdTrib + 'trib_prod_codi in (select codi from prod where refe = '+''''+temp+''')';
                if condUpdateProdAdic <> '' then condUpdateProdAdic := condUpdateProdAdic + ' and ';
                condUpdateProdAdic := condUpdateProdAdic + 'adic_prod_codi in (select codi from prod where refe = '+''''+temp+''')';
                if condUpdateProdCust <> '' then condUpdateProdCust := condUpdateProdCust + ' and ';
                condUpdateProdCust := condUpdateProdCust + 'cust_prod_codi in (select codi from prod where refe = '+''''+temp+''')';
                if condUpdateItens <> '' then condUpdateItens := condUpdateItens + ' and ';
                condUpdateItens := condUpdateItens + 'cod_prod in (select codi from prod where refe = '+''''+temp+''')';
              end
              else begin
                if dadosUpdateProd <> '' then dadosUpdateProd := dadosUpdateProd + ', ';
                dadosUpdateProd := dadosUpdateProd + 'refe=' + '''' + temp + '''';
              end;
            end
            //REFE_ORIGINAL (Referencia Original)
            else if (LowerCase(StringGrid1.Cells[i,0])='refe_original') then
            begin
              temp := UpperCase(RemoveAcento(StringGrid1.Cells[i,k]));
              temp := stringreplace(temp, ',', '.',[rfReplaceAll, rfIgnoreCase]);
              colProd := colProd + ',refe_original';
              dadosProd := dadosProd + ',''' + temp + '''';

              //Testa se é Update
              if VerificaUpdate('refe_original') = 1 then begin
                if condUpdateProd <> '' then condUpdateProd := condUpdateProd + ' and ';
                condUpdateProd := condUpdateProd + 'refe_original='+''''+temp+'''';
                if condUpdateProdTrib <> '' then condUpdateProdTrib := condUpdateProdTrib + ' and ';
                condUpdateProdTrib := condUpdateProdTrib + 'trib_prod_codi in (select codi from prod where refe_original = '+''''+temp+''')';
                if condUpdateProdAdic <> '' then condUpdateProdAdic := condUpdateProdAdic + ' and ';
                condUpdateProdAdic := condUpdateProdAdic + 'adic_prod_codi in (select codi from prod where refe_original = '+''''+temp+''')';
                if condUpdateProdCust <> '' then condUpdateProdCust := condUpdateProdCust + ' and ';
                condUpdateProdCust := condUpdateProdCust + 'cust_prod_codi in (select codi from prod where refe_original = '+''''+temp+''')';
                if condUpdateItens <> '' then condUpdateItens := condUpdateItens + ' and ';
                condUpdateItens := condUpdateItens + 'cod_prod in (select codi from prod where refe_original = '+''''+temp+''')';
              end
              else begin
                if dadosUpdateProd <> '' then dadosUpdateProd := dadosUpdateProd + ', ';
                dadosUpdateProd := dadosUpdateProd + 'refe_original=' + '''' + temp + '''';
              end;
            end
            //LOCALIZACAO (Localização)
            else if (LowerCase(StringGrid1.Cells[i,0])='localizacao') then
            begin
              temp := UpperCase(StringGrid1.Cells[i,k]);
              temp := stringreplace(temp, ',', '.',[rfReplaceAll, rfIgnoreCase]);
              colProdAdic := colProdAdic + ',adic_localizacao';
              dadosProdAdic := dadosProdAdic + ',''' + temp + '''';
              //Testa se é Update
              if VerificaUpdate('localizacao') = 1 then begin
                if condUpdateProd <> '' then condUpdateProd := condUpdateProd + ' and ';
                condUpdateProd := condUpdateProd + 'adic_localizacao='+''''+temp+'''';
                if condUpdateProdTrib <> '' then condUpdateProdTrib := condUpdateProdTrib + ' and ';
                condUpdateProdTrib := condUpdateProdTrib + 'trib_prod_codi in (select codi from prod where adic_localizacao = '+''''+temp+''')';
                if condUpdateProdAdic <> '' then condUpdateProdAdic := condUpdateProdAdic + ' and ';
                condUpdateProdAdic := condUpdateProdAdic + 'adic_prod_codi in (select codi from prod where adic_localizacao = '+''''+temp+''')';
                if condUpdateProdCust <> '' then condUpdateProdCust := condUpdateProdCust + ' and ';
                condUpdateProdCust := condUpdateProdCust + 'cust_prod_codi in (select codi from prod where adic_localizacao = '+''''+temp+''')';
                if condUpdateItens <> '' then condUpdateItens := condUpdateItens + ' and ';
                condUpdateItens := condUpdateItens + 'cod_prod in (select codi from prod where adic_localizacao = '+''''+temp+''')';
              end
              else begin
                if dadosUpdateProd <> '' then dadosUpdateProd := dadosUpdateProd + ', ';
                dadosUpdateProd := dadosUpdateProd + 'adic_localizacao=' + '''' + temp + '''';
              end;
            end
            //CODI_BARRA (Codigo de barras unitario)
            else if (LowerCase(StringGrid1.Cells[i,0])='codi_barra') then
            begin
              temp := UpperCase(RemoveAcento(StringGrid1.Cells[i,k]));
              temp := stringreplace(temp, ',', ' ',[rfReplaceAll, rfIgnoreCase]);
              colProd := colProd + ',codi_barra';
              dadosProd := dadosProd + ',''' + temp + '''';

              //Testa se é Update
              if VerificaUpdate('codi_barra') = 1 then begin
                if condUpdateProd <> '' then condUpdateProd := condUpdateProd + ' and ';
                condUpdateProd := condUpdateProd + 'codi_barra='+''''+temp+'''';
                if condUpdateProdTrib <> '' then condUpdateProdTrib := condUpdateProdTrib + ' and ';
                condUpdateProdTrib := condUpdateProdTrib + 'trib_prod_codi in (select codi from prod where codi_barra = '+''''+temp+''')';
                if condUpdateProdAdic <> '' then condUpdateProdAdic := condUpdateProdAdic + ' and ';
                condUpdateProdAdic := condUpdateProdAdic + 'adic_prod_codi in (select codi from prod where codi_barra = '+''''+temp+''')';
                if condUpdateProdCust <> '' then condUpdateProdCust := condUpdateProdCust + ' and ';
                condUpdateProdCust := condUpdateProdCust + 'cust_prod_codi in (select codi from prod where codi_barra = '+''''+temp+''')';
                if condUpdateItens <> '' then condUpdateItens := condUpdateItens + ' and ';
                condUpdateItens := condUpdateItens + 'cod_prod in (select codi from prod where codi_barra = '+''''+temp+''')';
              end
              else begin
                if dadosUpdateProd <> '' then dadosUpdateProd := dadosUpdateProd + ', ';
                dadosUpdateProd := dadosUpdateProd + 'codi_barra=' + '''' + temp + '''';
              end;
            end
            //CODI_BARRA_COM (Codigo de barras embalagem)
            else if (LowerCase(StringGrid1.Cells[i,0])='codi_barra_com') then
            begin
              temp := UpperCase(RemoveAcento(StringGrid1.Cells[i,k]));
              temp := stringreplace(temp, ',', ' ',[rfReplaceAll, rfIgnoreCase]);
              colProd := colProd + ',codi_barra_com';
              dadosProd := dadosProd + ',''' + temp + '''';

              //Testa se é Update
              if VerificaUpdate('codi_barra_com') = 1 then begin
                if condUpdateProd <> '' then condUpdateProd := condUpdateProd + ' and ';
                condUpdateProd := condUpdateProd + 'codi_barra_com='+''''+temp+'''';
                if condUpdateProdTrib <> '' then condUpdateProdTrib := condUpdateProdTrib + ' and ';
                condUpdateProdTrib := condUpdateProdTrib + 'trib_prod_codi in (select codi from prod where codi_barra_com = '+''''+temp+''')';
                if condUpdateProdAdic <> '' then condUpdateProdAdic := condUpdateProdAdic + ' and ';
                condUpdateProdAdic := condUpdateProdAdic + 'adic_prod_codi in (select codi from prod where codi_barra_com = '+''''+temp+''')';
                if condUpdateProdCust <> '' then condUpdateProdCust := condUpdateProdCust + ' and ';
                condUpdateProdCust := condUpdateProdCust + 'cust_prod_codi in (select codi from prod where codi_barra_com = '+''''+temp+''')';
                if condUpdateItens <> '' then condUpdateItens := condUpdateItens + ' and ';
                condUpdateItens := condUpdateItens + 'cod_prod in (select codi from prod where codi_barra_com = '+''''+temp+''')';
              end
              else begin
                if dadosUpdateProd <> '' then dadosUpdateProd := dadosUpdateProd + ', ';
                dadosUpdateProd := dadosUpdateProd + 'codi_barra_com=' + '''' + temp + '''';
              end;
            end
            //OBS (Observação)
            else if (LowerCase(StringGrid1.Cells[i,0])='obs') then
            begin
              colProd := colProd + ',obs';
              temp := StringGrid1.Cells[i,k];
              dadosProd := dadosProd + ',''' + temp + '''';
              //Testa se é Update
              if VerificaUpdate('obs') = 1 then begin
                if condUpdateProd <> '' then condUpdateProd := condUpdateProd + ' and ';
                condUpdateProd := condUpdateProd + 'obs='+''''+temp+'''';
                if condUpdateProdTrib <> '' then condUpdateProdTrib := condUpdateProdTrib + ' and ';
                condUpdateProdTrib := condUpdateProdTrib + 'trib_prod_codi in (select codi from prod where obs = '+''''+temp+''')';
                if condUpdateProdAdic <> '' then condUpdateProdAdic := condUpdateProdAdic + ' and ';
                condUpdateProdAdic := condUpdateProdAdic + 'adic_prod_codi in (select codi from prod where obs = '+''''+temp+''')';
                if condUpdateProdCust <> '' then condUpdateProdCust := condUpdateProdCust + ' and ';
                condUpdateProdCust := condUpdateProdCust + 'cust_prod_codi in (select codi from prod where obs = '+''''+temp+''')';
                if condUpdateItens <> '' then condUpdateItens := condUpdateItens + ' and ';
                condUpdateItens := condUpdateItens + 'cod_prod in (select codi from prod where obs = '+''''+temp+''')';
              end
              else begin
                if dadosUpdateProd <> '' then dadosUpdateProd := dadosUpdateProd + ', ';
                dadosUpdateProd := dadosUpdateProd + 'obs=' + '''' + temp + '''';
              end;
            end
            //NCM
            else if (LowerCase(StringGrid1.Cells[i,0])='ncm') then
            begin
              colProd := colProd + ',ncm';
              temp := stringreplace(StringGrid1.Cells[i,k], '''', '',[rfReplaceAll, rfIgnoreCase]);
              temp := stringreplace(temp, ',', '',[rfReplaceAll, rfIgnoreCase]);
              temp := stringreplace(temp, '.', '',[rfReplaceAll, rfIgnoreCase]);
              temp := (Copy(temp,1,10));
              dadosProd := dadosProd + ',''' + UpperCase(RemoveAcento(temp)) + '''';
              //Testa se é Update
              if VerificaUpdate('ncm') = 1 then begin
                if condUpdateProd <> '' then condUpdateProd := condUpdateProd + ' and ';
                condUpdateProd := condUpdateProd + 'ncm='+''''+temp+'''';
                if condUpdateProdTrib <> '' then condUpdateProdTrib := condUpdateProdTrib + ' and ';
                condUpdateProdTrib := condUpdateProdTrib + 'trib_prod_codi in (select codi from prod where ncm = '+''''+temp+''')';
                if condUpdateProdAdic <> '' then condUpdateProdAdic := condUpdateProdAdic + ' and ';
                condUpdateProdAdic := condUpdateProdAdic + 'adic_prod_codi in (select codi from prod where ncm = '+''''+temp+''')';
                if condUpdateProdCust <> '' then condUpdateProdCust := condUpdateProdCust + ' and ';
                condUpdateProdCust := condUpdateProdCust + 'cust_prod_codi in (select codi from prod where ncm = '+''''+temp+''')';
                if condUpdateItens <> '' then condUpdateItens := condUpdateItens + ' and ';
                condUpdateItens := condUpdateItens + 'cod_prod in (select codi from prod where ncm = '+''''+temp+''')';
              end
              else begin
                if dadosUpdateProd <> '' then dadosUpdateProd := dadosUpdateProd + ', ';
                dadosUpdateProd := dadosUpdateProd + 'ncm=' + '''' + temp + '''';
              end;
            end
            //CEST
            else if (LowerCase(StringGrid1.Cells[i,0])='cest') then
            begin
              colProd := colProd + ',cest';
              temp := stringreplace(StringGrid1.Cells[i,k], '''', '',[rfReplaceAll, rfIgnoreCase]);
              temp := stringreplace(temp, ',', '',[rfReplaceAll, rfIgnoreCase]);
              temp := stringreplace(temp, '.', '',[rfReplaceAll, rfIgnoreCase]);
              temp := (Copy(temp,1,8));
              dadosProd := dadosProd + ',''' + UpperCase(RemoveAcento(temp)) + '''';
              //Testa se é Update
              if VerificaUpdate('cest') = 1 then begin
                if condUpdateProd <> '' then condUpdateProd := condUpdateProd + ' and ';
                condUpdateProd := condUpdateProd + 'cest='+''''+temp+'''';
                if condUpdateProdTrib <> '' then condUpdateProdTrib := condUpdateProdTrib + ' and ';
                condUpdateProdTrib := condUpdateProdTrib + 'trib_prod_codi in (select codi from prod where cest = '+''''+temp+''')';
                if condUpdateProdAdic <> '' then condUpdateProdAdic := condUpdateProdAdic + ' and ';
                condUpdateProdAdic := condUpdateProdAdic + 'adic_prod_codi in (select codi from prod where cest = '+''''+temp+''')';
                if condUpdateProdCust <> '' then condUpdateProdCust := condUpdateProdCust + ' and ';
                condUpdateProdCust := condUpdateProdCust + 'cust_prod_codi in (select codi from prod where cest = '+''''+temp+''')';
                if condUpdateItens <> '' then condUpdateItens := condUpdateItens + ' and ';
                condUpdateItens := condUpdateItens + 'cod_prod in (select codi from prod where cest = '+''''+temp+''')';
              end
              else begin
                if dadosUpdateProd <> '' then dadosUpdateProd := dadosUpdateProd + ', ';
                dadosUpdateProd := dadosUpdateProd + 'cest=' + '''' + temp + '''';
              end;
            end
            //UNID (Unidade de medida)
            else if (LowerCase(StringGrid1.Cells[i,0])='unid') then
            begin
              temp := UpperCase(RemoveAcento(StringGrid1.Cells[i,k]));
              temp := stringreplace(temp, '''', ' ',[rfReplaceAll, rfIgnoreCase]);
              temp := (Copy(temp,1,12));
              colProd := colProd + ',unid';
              dadosProd := dadosProd + ',''' + temp + '''';
              //Testa se é Update
              if VerificaUpdate('unid') = 1 then begin
                if condUpdateProd <> '' then condUpdateProd := condUpdateProd + ' and ';
                condUpdateProd := condUpdateProd + 'unid='+''''+temp+'''';
                if condUpdateProdTrib <> '' then condUpdateProdTrib := condUpdateProdTrib + ' and ';
                condUpdateProdTrib := condUpdateProdTrib + 'trib_prod_codi in (select codi from prod where unid = '+''''+temp+''')';
                if condUpdateProdAdic <> '' then condUpdateProdAdic := condUpdateProdAdic + ' and ';
                condUpdateProdAdic := condUpdateProdAdic + 'adic_prod_codi in (select codi from prod where unid = '+''''+temp+''')';
                if condUpdateProdCust <> '' then condUpdateProdCust := condUpdateProdCust + ' and ';
                condUpdateProdCust := condUpdateProdCust + 'cust_prod_codi in (select codi from prod where unid = '+''''+temp+''')';
                if condUpdateItens <> '' then condUpdateItens := condUpdateItens + ' and ';
                condUpdateItens := condUpdateItens + 'cod_prod in (select codi from prod where unid = '+''''+temp+''')';
              end
              else begin
                if dadosUpdateProd <> '' then dadosUpdateProd := dadosUpdateProd + ', ';
                dadosUpdateProd := dadosUpdateProd + 'unid=' + '''' + temp + '''';
              end;
            end
            //PESL (Peso Líquido)
            else if (LowerCase(StringGrid1.Cells[i,0])='pesl') then
            begin
              colProd := colProd + ',pesl';
              if StringGrid1.Cells[i,k]='' then
              begin
                temp := '0';
              end
              else begin
                temp := StringGrid1.Cells[i,k];
              end;
              temp := corrigeFloat(temp);
              dadosProd := dadosProd + ',' + temp;
              //Testa se é Update
              if VerificaUpdate('pesl') = 1 then begin
                if condUpdateProd <> '' then condUpdateProd := condUpdateProd + ' and ';
                condUpdateProd := condUpdateProd + 'pesl='+''''+temp+'''';
                if condUpdateProdTrib <> '' then condUpdateProdTrib := condUpdateProdTrib + ' and ';
                condUpdateProdTrib := condUpdateProdTrib + 'trib_prod_codi in (select codi from prod where pesl = '+''''+temp+''')';
                if condUpdateProdAdic <> '' then condUpdateProdAdic := condUpdateProdAdic + ' and ';
                condUpdateProdAdic := condUpdateProdAdic + 'adic_prod_codi in (select codi from prod where pesl = '+''''+temp+''')';
                if condUpdateProdCust <> '' then condUpdateProdCust := condUpdateProdCust + ' and ';
                condUpdateProdCust := condUpdateProdCust + 'cust_prod_codi in (select codi from prod where pesl = '+''''+temp+''')';
                if condUpdateItens <> '' then condUpdateItens := condUpdateItens + ' and ';
                condUpdateItens := condUpdateItens + 'cod_prod in (select codi from prod where pesl = '+''''+temp+''')';
              end
              else begin
                if dadosUpdateProd <> '' then dadosUpdateProd := dadosUpdateProd + ', ';
                dadosUpdateProd := dadosUpdateProd + 'pesl=' + '''' + temp + '''';
              end;
            end
            //PESB (Peso Bruto)
            else if (LowerCase(StringGrid1.Cells[i,0])='pesb') then
            begin
              colProd := colProd + ',pesb';
              if StringGrid1.Cells[i,k]='' then
              begin
                temp := '0';
              end
              else begin
                temp := StringGrid1.Cells[i,k];
              end;
              temp := corrigeFloat(temp);
              dadosProd := dadosProd + ',' + temp;
              //Testa se é Update
              if VerificaUpdate('pesb') = 1 then begin
                if condUpdateProd <> '' then condUpdateProd := condUpdateProd + ' and ';
                condUpdateProd := condUpdateProd + 'pesb='+''''+temp+'''';
                if condUpdateProdTrib <> '' then condUpdateProdTrib := condUpdateProdTrib + ' and ';
                condUpdateProdTrib := condUpdateProdTrib + 'trib_prod_codi in (select codi from prod where pesb = '+''''+temp+''')';
                if condUpdateProdAdic <> '' then condUpdateProdAdic := condUpdateProdAdic + ' and ';
                condUpdateProdAdic := condUpdateProdAdic + 'adic_prod_codi in (select codi from prod where pesb = '+''''+temp+''')';
                if condUpdateProdCust <> '' then condUpdateProdCust := condUpdateProdCust + ' and ';
                condUpdateProdCust := condUpdateProdCust + 'cust_prod_codi in (select codi from prod where pesb = '+''''+temp+''')';
                if condUpdateItens <> '' then condUpdateItens := condUpdateItens + ' and ';
                condUpdateItens := condUpdateItens + 'cod_prod in (select codi from prod where pesb = '+''''+temp+''')';
              end
              else begin
                if dadosUpdateProd <> '' then dadosUpdateProd := dadosUpdateProd + ', ';
                dadosUpdateProd := dadosUpdateProd + 'pesb=' + '''' + temp + '''';
              end;
            end
            //FATOR_CONV (Fator de Conversão)
            else if (LowerCase(StringGrid1.Cells[i,0])='fator_conv') then
            begin
              colProd := colProd + ',fator_conv';
              if StringGrid1.Cells[i,k]='' then
              begin
                temp := '0';
              end
              else begin
                temp := StringGrid1.Cells[i,k];
              end;
              temp := corrigeFloat(temp);
              dadosProd := dadosProd + ',' + temp;
            end
            //QTD_MINIMA (Quantidade Mínima)
            else if (LowerCase(StringGrid1.Cells[i,0])='qtd_minima') then
            begin
              colProdAdic := colProdAdic + ',adic_qtd_minima';
              if StringGrid1.Cells[i,k]='' then
              begin
                temp := '0';
              end
              else begin
                temp := StringGrid1.Cells[i,k];
              end;
              temp := corrigeFloat(temp);
              dadosProdAdic := dadosProdAdic + ',' + temp;
            end
            //CUSTO (Custo)
            else if (LowerCase(StringGrid1.Cells[i,0])='custo') then
            begin
              colProdCust := colProdCust + ',cust_custo';
              if StringGrid1.Cells[i,k]='' then
              begin
                temp := '0';
              end
              else begin
                temp := StringGrid1.Cells[i,k];
              end;
              temp := stringreplace(temp, 'R', '',[rfReplaceAll, rfIgnoreCase]);
              temp := stringreplace(temp, '$', '',[rfReplaceAll, rfIgnoreCase]);
              temp := Trim(temp);
              temp := corrigeFloat(temp);
              dadosProdCust := dadosProdCust + ',' + temp;
              //Testar se existe o custo_real, se não joga o custo mesmo
              if (BuscaColuna(StringGrid1,'custo_real')=-1) then
              begin
                colProdCust := colProdCust + ',cust_custo_real';
                dadosProdCust := dadosProdCust + ',' + temp;
              end;
              //Testa se é Update
              if VerificaUpdate('custo') = 1 then begin
                if condUpdateProdCust <> '' then condUpdateProdCust := condUpdateProdCust + ' and ';
                condUpdateProdCust := condUpdateProdCust + 'cust_custo='+''''+temp+'''';
                if condUpdateProdTrib <> '' then condUpdateProdTrib := condUpdateProdTrib + ' and ';
                condUpdateProdTrib := condUpdateProdTrib + 'trib_prod_codi in (select cust_prod_codi from prod_custos where cust_custo = '+''''+temp+''')';
                if condUpdateProdAdic <> '' then condUpdateProdAdic := condUpdateProdAdic + ' and ';
                condUpdateProdAdic := condUpdateProdAdic + 'adic_prod_codi in (select cust_prod_codi from prod_custos where cust_custo = '+''''+temp+''')';
                if condUpdateProd <> '' then condUpdateProd := condUpdateProd + ' and ';
                condUpdateProd := condUpdateProd + 'codi in (select cust_prod_codi from prod_custos where cust_custo = '+''''+temp+''')';
                if condUpdateItens <> '' then condUpdateItens := condUpdateItens + ' and ';
                condUpdateItens := condUpdateItens + 'cod_prod in (select cust_prod_codi from prod_custos where cust_custo = '+''''+temp+''')';
              end
              else begin
                if dadosUpdateProdCust <> '' then dadosUpdateProdCust := dadosUpdateProdCust + ', ';
                dadosUpdateProdCust := dadosUpdateProdCust + 'cust_custo=' + '''' + temp + '''';
              end;
            end
            //CUSTO_MEDIO (Custo Medio)
            else if (LowerCase(StringGrid1.Cells[i,0])='custo_medio') then
            begin
              colProdCust := colProdCust + ',cust_custo_medio';
              if StringGrid1.Cells[i,k]='' then
              begin
                temp := '0';
              end
              else begin
                temp := StringGrid1.Cells[i,k];
              end;
              temp := corrigeFloat(temp);
              dadosProdCust := dadosProdCust + ',' + temp;
              //Testa se é Update
              if VerificaUpdate('custo_medio') = 1 then begin
                if condUpdateProdCust <> '' then condUpdateProdCust := condUpdateProdCust + ' and ';
                condUpdateProdCust := condUpdateProdCust + 'cust_custo_medio='+''''+temp+'''';
                if condUpdateProdTrib <> '' then condUpdateProdTrib := condUpdateProdTrib + ' and ';
                condUpdateProdTrib := condUpdateProdTrib + 'trib_prod_codi in (select cust_prod_codi from prod_custos where cust_custo_medio = '+''''+temp+''')';
                if condUpdateProdAdic <> '' then condUpdateProdAdic := condUpdateProdAdic + ' and ';
                condUpdateProdAdic := condUpdateProdAdic + 'adic_prod_codi in (select cust_prod_codi from prod_custos where cust_custo_medio = '+''''+temp+''')';
                if condUpdateProd <> '' then condUpdateProd := condUpdateProd + ' and ';
                condUpdateProd := condUpdateProd + 'codi in (select cust_prod_codi from prod_custos where cust_custo_medio = '+''''+temp+''')';
                if condUpdateItens <> '' then condUpdateItens := condUpdateItens + ' and ';
                condUpdateItens := condUpdateItens + 'cod_prod in (select cust_prod_codi from prod_custos where cust_custo_medio = '+''''+temp+''')';
              end
              else begin
                if dadosUpdateProdCust <> '' then dadosUpdateProdCust := dadosUpdateProdCust + ', ';
                dadosUpdateProdCust := dadosUpdateProdCust + 'cust_custo_medio=' + '''' + temp + '''';
              end;
            end
            //IPI (IPI agregado ao custo)
            else if (LowerCase(StringGrid1.Cells[i,0])='ipi') then
            begin
              colProdCust := colProdCust + ',cust_ipi';
              if StringGrid1.Cells[i,k]='' then
              begin
                temp := '0';
              end
              else begin
                temp := StringGrid1.Cells[i,k];
              end;
              temp := stringreplace(temp, '%', '',[rfReplaceAll, rfIgnoreCase]);
              temp := corrigeFloat(temp);
              dadosProdCust := dadosProdCust + ',' + temp;
              //Testa se é Update
              if VerificaUpdate('ipi') = 1 then begin
                if condUpdateProdCust <> '' then condUpdateProdCust := condUpdateProdCust + ' and ';
                condUpdateProdCust := condUpdateProdCust + 'cust_ipi='+''''+temp+'''';
                if condUpdateProdTrib <> '' then condUpdateProdTrib := condUpdateProdTrib + ' and ';
                condUpdateProdTrib := condUpdateProdTrib + 'trib_prod_codi in (select cust_prod_codi from prod_custos where cust_ipi = '+''''+temp+''')';
                if condUpdateProdAdic <> '' then condUpdateProdAdic := condUpdateProdAdic + ' and ';
                condUpdateProdAdic := condUpdateProdAdic + 'adic_prod_codi in (select cust_prod_codi from prod_custos where cust_ipi = '+''''+temp+''')';
                if condUpdateProd <> '' then condUpdateProd := condUpdateProd + ' and ';
                condUpdateProd := condUpdateProd + 'codi in (select cust_prod_codi from prod_custos where cust_ipi = '+''''+temp+''')';
                if condUpdateItens <> '' then condUpdateItens := condUpdateItens + ' and ';
                condUpdateItens := condUpdateItens + 'cod_prod in (select cust_prod_codi from prod_custos where cust_ipi = '+''''+temp+''')';
              end
              else begin
                if dadosUpdateProdCust <> '' then dadosUpdateProdCust := dadosUpdateProdCust + ', ';
                dadosUpdateProdCust := dadosUpdateProdCust + 'cust_ipi=' + '''' + temp + '''';
              end;
            end
            //PIS (PIS agregado ao custo)
            else if (LowerCase(StringGrid1.Cells[i,0])='pis') then
            begin
              colProdCust := colProdCust + ',cust_pis';
              if StringGrid1.Cells[i,k]='' then
              begin
                temp := '0';
              end
              else begin
                temp := StringGrid1.Cells[i,k];
              end;
              temp := stringreplace(temp, '%', '',[rfReplaceAll, rfIgnoreCase]);
              temp := corrigeFloat(temp);
              dadosProdCust := dadosProdCust + ',' + temp;
              //Testa se é Update
              if VerificaUpdate('pis') = 1 then begin
                if condUpdateProdCust <> '' then condUpdateProdCust := condUpdateProdCust + ' and ';
                condUpdateProdCust := condUpdateProdCust + 'cust_pis='+''''+temp+'''';
                if condUpdateProdTrib <> '' then condUpdateProdTrib := condUpdateProdTrib + ' and ';
                condUpdateProdTrib := condUpdateProdTrib + 'trib_prod_codi in (select cust_prod_codi from prod_custos where cust_pis = '+''''+temp+''')';
                if condUpdateProdAdic <> '' then condUpdateProdAdic := condUpdateProdAdic + ' and ';
                condUpdateProdAdic := condUpdateProdAdic + 'adic_prod_codi in (select cust_prod_codi from prod_custos where cust_pis = '+''''+temp+''')';
                if condUpdateProd <> '' then condUpdateProd := condUpdateProd + ' and ';
                condUpdateProd := condUpdateProd + 'codi in (select cust_prod_codi from prod_custos where cust_pis = '+''''+temp+''')';
                if condUpdateItens <> '' then condUpdateItens := condUpdateItens + ' and ';
                condUpdateItens := condUpdateItens + 'cod_prod in (select cust_prod_codi from prod_custos where cust_pis = '+''''+temp+''')';
              end
              else begin
                if dadosUpdateProdCust <> '' then dadosUpdateProdCust := dadosUpdateProdCust + ', ';
                dadosUpdateProdCust := dadosUpdateProdCust + 'cust_pis=' + '''' + temp + '''';
              end;
            end
            //COFINS (COFINS agregado ao custo)
            else if (LowerCase(StringGrid1.Cells[i,0])='cofins') then
            begin
              colProdCust := colProdCust + ',cust_cofins';
              if StringGrid1.Cells[i,k]='' then
              begin
                temp := '0';
              end
              else begin
                temp := StringGrid1.Cells[i,k];
              end;
              temp := stringreplace(temp, '%', '',[rfReplaceAll, rfIgnoreCase]);
              temp := corrigeFloat(temp);
              dadosProdCust := dadosProdCust + ',' + temp;
              //Testa se é Update
              if VerificaUpdate('cofins') = 1 then begin
                if condUpdateProdCust <> '' then condUpdateProdCust := condUpdateProdCust + ' and ';
                condUpdateProdCust := condUpdateProdCust + 'cust_cofins='+''''+temp+'''';
                if condUpdateProdTrib <> '' then condUpdateProdTrib := condUpdateProdTrib + ' and ';
                condUpdateProdTrib := condUpdateProdTrib + 'trib_prod_codi in (select cust_prod_codi from prod_custos where cust_cofins = '+''''+temp+''')';
                if condUpdateProdAdic <> '' then condUpdateProdAdic := condUpdateProdAdic + ' and ';
                condUpdateProdAdic := condUpdateProdAdic + 'adic_prod_codi in (select cust_prod_codi from prod_custos where cust_cofins = '+''''+temp+''')';
                if condUpdateProd <> '' then condUpdateProd := condUpdateProd + ' and ';
                condUpdateProd := condUpdateProd + 'codi in (select cust_prod_codi from prod_custos where cust_cofins = '+''''+temp+''')';
                if condUpdateItens <> '' then condUpdateItens := condUpdateItens + ' and ';
                condUpdateItens := condUpdateItens + 'cod_prod in (select cust_prod_codi from prod_custos where cust_cofins = '+''''+temp+''')';
              end
              else begin
                if dadosUpdateProdCust <> '' then dadosUpdateProdCust := dadosUpdateProdCust + ', ';
                dadosUpdateProdCust := dadosUpdateProdCust + 'cust_cofins=' + '''' + temp + '''';
              end;
            end
            //ICMS (ICMS agregado ao custo)
            else if (LowerCase(StringGrid1.Cells[i,0])='icms') then
            begin
              colProdCust := colProdCust + ',cust_icms';
              if StringGrid1.Cells[i,k]='' then
              begin
                temp := '0';
              end
              else begin
                temp := StringGrid1.Cells[i,k];
              end;
              temp := stringreplace(temp, '%', '',[rfReplaceAll, rfIgnoreCase]);
              temp := corrigeFloat(temp);
              dadosProdCust := dadosProdCust + ',' + temp;
              //Testa se é Update
              if VerificaUpdate('icms') = 1 then begin
                if condUpdateProdCust <> '' then condUpdateProdCust := condUpdateProdCust + ' and ';
                condUpdateProdCust := condUpdateProdCust + 'cust_icms='+''''+temp+'''';
                if condUpdateProdTrib <> '' then condUpdateProdTrib := condUpdateProdTrib + ' and ';
                condUpdateProdTrib := condUpdateProdTrib + 'trib_prod_codi in (select cust_prod_codi from prod_custos where cust_icms = '+''''+temp+''')';
                if condUpdateProdAdic <> '' then condUpdateProdAdic := condUpdateProdAdic + ' and ';
                condUpdateProdAdic := condUpdateProdAdic + 'adic_prod_codi in (select cust_prod_codi from prod_custos where cust_icms = '+''''+temp+''')';
                if condUpdateProd <> '' then condUpdateProd := condUpdateProd + ' and ';
                condUpdateProd := condUpdateProd + 'codi in (select cust_prod_codi from prod_custos where cust_icms = '+''''+temp+''')';
                if condUpdateItens <> '' then condUpdateItens := condUpdateItens + ' and ';
                condUpdateItens := condUpdateItens + 'cod_prod in (select cust_prod_codi from prod_custos where cust_icms = '+''''+temp+''')';
              end
              else begin
                if dadosUpdateProdCust <> '' then dadosUpdateProdCust := dadosUpdateProdCust + ', ';
                dadosUpdateProdCust := dadosUpdateProdCust + 'cust_icms=' + '''' + temp + '''';
              end;
            end
            //FRETE
            else if (LowerCase(StringGrid1.Cells[i,0])='frete') then
            begin
              colProdCust := colProdCust + ',cust_frete';
              if StringGrid1.Cells[i,k]='' then
              begin
                temp := '0';
              end
              else begin
                temp := StringGrid1.Cells[i,k];
              end;
              temp := stringreplace(temp, '%', '',[rfReplaceAll, rfIgnoreCase]);
              temp := corrigeFloat(temp);
              dadosProdCust := dadosProdCust + ',' + temp;
              //Testa se é Update
              if VerificaUpdate('frete') = 1 then begin
                if condUpdateProdCust <> '' then condUpdateProdCust := condUpdateProdCust + ' and ';
                condUpdateProdCust := condUpdateProdCust + 'cust_frete='+''''+temp+'''';
                if condUpdateProdTrib <> '' then condUpdateProdTrib := condUpdateProdTrib + ' and ';
                condUpdateProdTrib := condUpdateProdTrib + 'trib_prod_codi in (select cust_prod_codi from prod_custos where cust_frete = '+''''+temp+''')';
                if condUpdateProdAdic <> '' then condUpdateProdAdic := condUpdateProdAdic + ' and ';
                condUpdateProdAdic := condUpdateProdAdic + 'adic_prod_codi in (select cust_prod_codi from prod_custos where cust_frete = '+''''+temp+''')';
                if condUpdateProd <> '' then condUpdateProd := condUpdateProd + ' and ';
                condUpdateProd := condUpdateProd + 'codi in (select cust_prod_codi from prod_custos where cust_frete = '+''''+temp+''')';
                if condUpdateItens <> '' then condUpdateItens := condUpdateItens + ' and ';
                condUpdateItens := condUpdateItens + 'cod_prod in (select cust_prod_codi from prod_custos where cust_frete = '+''''+temp+''')';
              end
              else begin
                if dadosUpdateProdCust <> '' then dadosUpdateProdCust := dadosUpdateProdCust + ', ';
                dadosUpdateProdCust := dadosUpdateProdCust + 'cust_frete=' + '''' + temp + '''';
              end;
            end
            //CUSTO_REAL (Custo Real)
            else if (LowerCase(StringGrid1.Cells[i,0])='custo_real') then
            begin
              colProdCust := colProdCust + ',cust_custo_real';
              if StringGrid1.Cells[i,k]='' then
              begin
                temp := '0';
              end
              else begin
                temp := StringGrid1.Cells[i,k];
              end;
              temp := corrigeFloat(temp);
              dadosProdCust := dadosProdCust + ',' + temp;
              //Testa se é Update
              if VerificaUpdate('custo_real') = 1 then begin
                if condUpdateProdCust <> '' then condUpdateProdCust := condUpdateProdCust + ' and ';
                condUpdateProdCust := condUpdateProdCust + 'cust_custo_real='+''''+temp+'''';
                if condUpdateProdTrib <> '' then condUpdateProdTrib := condUpdateProdTrib + ' and ';
                condUpdateProdTrib := condUpdateProdTrib + 'trib_prod_codi in (select cust_prod_codi from prod_custos where cust_custo_real = '+''''+temp+''')';
                if condUpdateProdAdic <> '' then condUpdateProdAdic := condUpdateProdAdic + ' and ';
                condUpdateProdAdic := condUpdateProdAdic + 'adic_prod_codi in (select cust_prod_codi from prod_custos where cust_custo_real = '+''''+temp+''')';
                if condUpdateProd <> '' then condUpdateProd := condUpdateProd + ' and ';
                condUpdateProd := condUpdateProd + 'codi in (select cust_prod_codi from prod_custos where cust_custo_real = '+''''+temp+''')';
                if condUpdateItens <> '' then condUpdateItens := condUpdateItens + ' and ';
                condUpdateItens := condUpdateItens + 'cod_prod in (select cust_prod_codi from prod_custos where cust_custo_real = '+''''+temp+''')';
              end
              else begin
                if dadosUpdateProdCust <> '' then dadosUpdateProdCust := dadosUpdateProdCust + ', ';
                dadosUpdateProdCust := dadosUpdateProdCust + 'cust_custo_real=' + '''' + temp + '''';
              end;
            end
            //PRECO_PRAZO (Preço a Prazo)
            else if (LowerCase(StringGrid1.Cells[i,0])='preco_prazo') then
            begin
              colProdCust := colProdCust + ',cust_preco_prazo';
              if StringGrid1.Cells[i,k]='' then
              begin
                temp := '0';
              end
              else begin
                temp := StringGrid1.Cells[i,k];
              end;
              temp := corrigeFloat(temp);
              dadosProdCust := dadosProdCust + ',' + temp;
              //Testar se existe o preco a vista, se não joga o a prazo mesmo
              if (BuscaColuna(StringGrid1,'preco_vista')=-1) then
              begin
                colProdCust := colProdCust + ',cust_preco_vista';
                dadosProdCust := dadosProdCust + ',' + temp;
              end;
              //Testa se é Update
              if VerificaUpdate('preco_prazo') = 1 then begin
                if condUpdateProdCust <> '' then condUpdateProdCust := condUpdateProdCust + ' and ';
                condUpdateProdCust := condUpdateProdCust + 'cust_preco_prazo='+''''+temp+'''';
                if condUpdateProdTrib <> '' then condUpdateProdTrib := condUpdateProdTrib + ' and ';
                condUpdateProdTrib := condUpdateProdTrib + 'trib_prod_codi in (select cust_prod_codi from prod_custos where cust_preco_prazo = '+''''+temp+''')';
                if condUpdateProdAdic <> '' then condUpdateProdAdic := condUpdateProdAdic + ' and ';
                condUpdateProdAdic := condUpdateProdAdic + 'adic_prod_codi in (select cust_prod_codi from prod_custos where cust_preco_prazo = '+''''+temp+''')';
                if condUpdateProd <> '' then condUpdateProd := condUpdateProd + ' and ';
                condUpdateProd := condUpdateProd + 'codi in (select cust_prod_codi from prod_custos where cust_preco_prazo = '+''''+temp+''')';
                if condUpdateItens <> '' then condUpdateItens := condUpdateItens + ' and ';
                condUpdateItens := condUpdateItens + 'cod_prod in (select cust_prod_codi from prod_custos where cust_preco_prazo = '+''''+temp+''')';
              end
              else begin
                if dadosUpdateProdCust <> '' then dadosUpdateProdCust := dadosUpdateProdCust + ', ';
                dadosUpdateProdCust := dadosUpdateProdCust + 'cust_preco_prazo=' + '''' + temp + '''';
              end;
            end
            //PRECO_VISTA (Preço a Vista)
            else if (LowerCase(StringGrid1.Cells[i,0])='preco_vista') then
            begin
              colProdCust := colProdCust + ',cust_preco_vista';
              if StringGrid1.Cells[i,k]='' then
              begin
                temp := '0';
              end
              else begin
                temp := StringGrid1.Cells[i,k];
              end;
              temp := corrigeFloat(temp);
              dadosProdCust := dadosProdCust + ',' + temp;
              //Testar se existe o preco a prazo, se não joga o a vista mesmo
              if (BuscaColuna(StringGrid1,'preco_prazo')=-1) then
              begin
                colProdCust := colProdCust + ',cust_preco_prazo';
                dadosProdCust := dadosProdCust + ',' + temp;
              end;
              //Testa se é Update
              if VerificaUpdate('preco_vista') = 1 then begin
                if condUpdateProdCust <> '' then condUpdateProdCust := condUpdateProdCust + ' and ';
                condUpdateProdCust := condUpdateProdCust + 'cust_preco_vista='+''''+temp+'''';
                if condUpdateProdTrib <> '' then condUpdateProdTrib := condUpdateProdTrib + ' and ';
                condUpdateProdTrib := condUpdateProdTrib + 'trib_prod_codi in (select cust_prod_codi from prod_custos where cust_preco_vista = '+''''+temp+''')';
                if condUpdateProdAdic <> '' then condUpdateProdAdic := condUpdateProdAdic + ' and ';
                condUpdateProdAdic := condUpdateProdAdic + 'adic_prod_codi in (select cust_prod_codi from prod_custos where cust_preco_vista = '+''''+temp+''')';
                if condUpdateProd <> '' then condUpdateProd := condUpdateProd + ' and ';
                condUpdateProd := condUpdateProd + 'codi in (select cust_prod_codi from prod_custos where cust_preco_vista = '+''''+temp+''')';
                if condUpdateItens <> '' then condUpdateItens := condUpdateItens + ' and ';
                condUpdateItens := condUpdateItens + 'cod_prod in (select cust_prod_codi from prod_custos where cust_preco_vista = '+''''+temp+''')';
              end
              else begin
                if dadosUpdateProdCust <> '' then dadosUpdateProdCust := dadosUpdateProdCust + ', ';
                dadosUpdateProdCust := dadosUpdateProdCust + 'cust_preco_vista=' + '''' + temp + '''';
              end;
            end
            //MARGEM (Margem de Valor)
            else if (LowerCase(StringGrid1.Cells[i,0])='margem') then
            begin
              colProdCust := colProdCust + ',cust_margem1';
              if StringGrid1.Cells[i,k]='' then
              begin
                temp := '0';
              end
              else begin
                temp := StringGrid1.Cells[i,k];
              end;
              temp := stringreplace(temp, '%', '',[rfReplaceAll, rfIgnoreCase]);
              temp := corrigeFloat(temp);
              temp := stringreplace(temp, '.', ',',[rfReplaceAll, rfIgnoreCase]);

              //Testar se precisa multiplicar por 100
              if StrToFloat(temp) < 1 then
                temp := FloatToStr( StrToFloat(temp) * 100 );

              temp := corrigeFloat(temp);
              dadosProdCust := dadosProdCust + ',' + temp;

              //Testa se é Update
              if VerificaUpdate('margem') = 1 then begin
                if condUpdateProdCust <> '' then condUpdateProdCust := condUpdateProdCust + ' and ';
                condUpdateProdCust := condUpdateProdCust + 'cust_margem1='+''''+temp+'''';
                if condUpdateProdTrib <> '' then condUpdateProdTrib := condUpdateProdTrib + ' and ';
                condUpdateProdTrib := condUpdateProdTrib + 'trib_prod_codi in (select cust_prod_codi from prod_custos where cust_margem1 = '+''''+temp+''')';
                if condUpdateProdAdic <> '' then condUpdateProdAdic := condUpdateProdAdic + ' and ';
                condUpdateProdAdic := condUpdateProdAdic + 'adic_prod_codi in (select cust_prod_codi from prod_custos where cust_margem1 = '+''''+temp+''')';
                if condUpdateProd <> '' then condUpdateProd := condUpdateProd + ' and ';
                condUpdateProd := condUpdateProd + 'codi in (select cust_prod_codi from prod_custos where cust_margem1 = '+''''+temp+''')';
                if condUpdateItens <> '' then condUpdateItens := condUpdateItens + ' and ';
                condUpdateItens := condUpdateItens + 'cod_prod in (select cust_prod_codi from prod_custos where cust_margem1 = '+''''+temp+''')';
              end
              else begin
                if dadosUpdateProdCust <> '' then dadosUpdateProdCust := dadosUpdateProdCust + ', ';
                dadosUpdateProdCust := dadosUpdateProdCust + 'cust_margem1=' + '''' + temp + '''';
              end;
            end
            //CSOSN
            else if (LowerCase(StringGrid1.Cells[i,0])='csosn') then
            begin
              if StringGrid1.Cells[i,k]='' then begin
                temp := '900';
              end
              else begin
                temp := StringGrid1.Cells[i,k];
              end;
              colProdTrib := colProdTrib + ',TRIB_SN_CSOSN_ESTADUAL';
              dadosProdTrib := dadosProdTrib + ',''' + temp + '''';
              colProdTrib := colProdTrib + ',TRIB_SN_CSOSN_INTERESTADUAL';
              dadosProdTrib := dadosProdTrib + ',''' + temp + '''';
              colProdTrib := colProdTrib + ',TRIB_SN_CSOSN_ESTA_CF';
              dadosProdTrib := dadosProdTrib + ',''' + temp + '''';
              colProdTrib := colProdTrib + ',TRIB_SN_CSOSN_INTER_CF';
              dadosProdTrib := dadosProdTrib + ',''' + temp + '''';

              //Testa se é Update
              if VerificaUpdate('csosn') = 1 then begin
                if condUpdateProdCust <> '' then condUpdateProdCust := condUpdateProdCust + ' and ';
                condUpdateProdCust := condUpdateProdCust + 'cust_prod_codi in (select trib_prod_codi from prod_tributos where TRIB_SN_CSOSN_ESTADUAL = '+''''+temp+''')';
                if condUpdateProdTrib <> '' then condUpdateProdTrib := condUpdateProdTrib + ' and ';
                condUpdateProdTrib := condUpdateProdTrib + 'TRIB_SN_CSOSN_ESTADUAL='+''''+temp+'''';
                if condUpdateProdAdic <> '' then condUpdateProdAdic := condUpdateProdAdic + ' and ';
                condUpdateProdAdic := condUpdateProdAdic + 'adic_prod_codi in (select trib_prod_codi from prod_tributos where TRIB_SN_CSOSN_ESTADUAL = '+''''+temp+''')';
                if condUpdateProd <> '' then condUpdateProd := condUpdateProd + ' and ';
                condUpdateProd := condUpdateProd + 'codi in (select trib_prod_codi from prod_tributos where TRIB_SN_CSOSN_ESTADUAL = '+''''+temp+''')';
                if condUpdateItens <> '' then condUpdateItens := condUpdateItens + ' and ';
                condUpdateItens := condUpdateItens + 'cod_prod in (select trib_prod_codi from prod_tributos where TRIB_SN_CSOSN_ESTADUAL = '+''''+temp+''')';
              end
              else begin
                if dadosUpdateProdTrib <> '' then dadosUpdateProdTrib := dadosUpdateProdTrib + ', ';
                dadosUpdateProdTrib := dadosUpdateProdTrib + 'TRIB_SN_CSOSN_ESTADUAL=' + '''' + temp + '''';
                dadosUpdateProdTrib := dadosUpdateProdTrib + ',TRIB_SN_CSOSN_INTERESTADUAL=' + '''' + temp + '''';
                dadosUpdateProdTrib := dadosUpdateProdTrib + ',TRIB_SN_CSOSN_ESTA_CF=' + '''' + temp + '''';
                dadosUpdateProdTrib := dadosUpdateProdTrib + ',TRIB_SN_CSOSN_INTER_CF=' + '''' + temp + '''';
              end;
            end
            //CSOSN ESTADUAL
            else if (LowerCase(StringGrid1.Cells[i,0])='csosn_esta') then
            begin
              if StringGrid1.Cells[i,k]='' then begin
                temp := '900';
              end
              else begin
                temp := StringGrid1.Cells[i,k];
              end;
              colProdTrib := colProdTrib + ',TRIB_SN_CSOSN_ESTADUAL';
              dadosProdTrib := dadosProdTrib + ',''' + temp + '''';
              colProdTrib := colProdTrib + ',TRIB_SN_CSOSN_ESTA_CF';
              dadosProdTrib := dadosProdTrib + ',''' + temp + '''';

              //Testa se é Update
              if VerificaUpdate('csosn_esta') = 1 then begin
                if condUpdateProdCust <> '' then condUpdateProdCust := condUpdateProdCust + ' and ';
                condUpdateProdCust := condUpdateProdCust + 'cust_prod_codi in (select trib_prod_codi from prod_tributos where TRIB_SN_CSOSN_ESTADUAL = '+''''+temp+''')';
                if condUpdateProdTrib <> '' then condUpdateProdTrib := condUpdateProdTrib + ' and ';
                condUpdateProdTrib := condUpdateProdTrib + 'TRIB_SN_CSOSN_ESTADUAL='+''''+temp+'''';
                if condUpdateProdAdic <> '' then condUpdateProdAdic := condUpdateProdAdic + ' and ';
                condUpdateProdAdic := condUpdateProdAdic + 'adic_prod_codi in (select trib_prod_codi from prod_tributos where TRIB_SN_CSOSN_ESTADUAL = '+''''+temp+''')';
                if condUpdateProd <> '' then condUpdateProd := condUpdateProd + ' and ';
                condUpdateProd := condUpdateProd + 'codi in (select trib_prod_codi from prod_tributos where TRIB_SN_CSOSN_ESTADUAL = '+''''+temp+''')';
                if condUpdateItens <> '' then condUpdateItens := condUpdateItens + ' and ';
                condUpdateItens := condUpdateItens + 'cod_prod in (select trib_prod_codi from prod_tributos where TRIB_SN_CSOSN_ESTADUAL = '+''''+temp+''')';
              end
              else begin
                if dadosUpdateProdTrib <> '' then dadosUpdateProdTrib := dadosUpdateProdTrib + ', ';
                dadosUpdateProdTrib := dadosUpdateProdTrib + 'TRIB_SN_CSOSN_ESTADUAL=' + '''' + temp + '''';
                dadosUpdateProdTrib := dadosUpdateProdTrib + ',TRIB_SN_CSOSN_ESTA_CF=' + '''' + temp + '''';
              end;
            end
            //CSOSN INTERESTADUAL
            else if (LowerCase(StringGrid1.Cells[i,0])='csosn_inter') then
            begin
              if StringGrid1.Cells[i,k]='' then begin
                temp := '900';
              end
              else begin
                temp := StringGrid1.Cells[i,k];
              end;
              colProdTrib := colProdTrib + ',TRIB_SN_CSOSN_INTERESTADUAL';
              dadosProdTrib := dadosProdTrib + ',''' + temp + '''';
              colProdTrib := colProdTrib + ',TRIB_SN_CSOSN_INTER_CF';
              dadosProdTrib := dadosProdTrib + ',''' + temp + '''';

              //Testa se é Update
              if VerificaUpdate('csosn_inter') = 1 then begin
                if condUpdateProdCust <> '' then condUpdateProdCust := condUpdateProdCust + ' and ';
                condUpdateProdCust := condUpdateProdCust + 'cust_prod_codi in (select trib_prod_codi from prod_tributos where TRIB_SN_CSOSN_INTERESTADUAL = '+''''+temp+''')';
                if condUpdateProdTrib <> '' then condUpdateProdTrib := condUpdateProdTrib + ' and ';
                condUpdateProdTrib := condUpdateProdTrib + 'TRIB_SN_CSOSN_INTERESTADUAL='+''''+temp+'''';
                if condUpdateProdAdic <> '' then condUpdateProdAdic := condUpdateProdAdic + ' and ';
                condUpdateProdAdic := condUpdateProdAdic + 'adic_prod_codi in (select trib_prod_codi from prod_tributos where TRIB_SN_CSOSN_INTERESTADUAL = '+''''+temp+''')';
                if condUpdateProd <> '' then condUpdateProd := condUpdateProd + ' and ';
                condUpdateProd := condUpdateProd + 'codi in (select trib_prod_codi from prod_tributos where TRIB_SN_CSOSN_INTERESTADUAL = '+''''+temp+''')';
                if condUpdateItens <> '' then condUpdateItens := condUpdateItens + ' and ';
                condUpdateItens := condUpdateItens + 'cod_prod in (select trib_prod_codi from prod_tributos where TRIB_SN_CSOSN_INTERESTADUAL = '+''''+temp+''')';
              end
              else begin
                if dadosUpdateProdTrib <> '' then dadosUpdateProdTrib := dadosUpdateProdTrib + ', ';
                dadosUpdateProdTrib := dadosUpdateProdTrib + 'TRIB_SN_CSOSN_INTERESTADUAL=' + '''' + temp + '''';
                dadosUpdateProdTrib := dadosUpdateProdTrib + ',TRIB_SN_CSOSN_INTER_CF=' + '''' + temp + '''';
              end;
            end
            //CST
            else if (LowerCase(StringGrid1.Cells[i,0])='cst') then
            begin
              if StringGrid1.Cells[i,k]='' then begin
                temp := '90';
              end
              else begin
                temp := StringGrid1.Cells[i,k];
              end;
              colProdTrib := colProdTrib + ',TRIB_CST_ICMS_ESTADUAL';
              dadosProdTrib := dadosProdTrib + ',''' + temp + '''';
              colProdTrib := colProdTrib + ',TRIB_CST_ICMS_INTERESTADUAL';
              dadosProdTrib := dadosProdTrib + ',''' + temp + '''';
              colProdTrib := colProdTrib + ',TRIB_CST_ICMS_ESTA_CF';
              dadosProdTrib := dadosProdTrib + ',''' + temp + '''';
              colProdTrib := colProdTrib + ',TRIB_CST_ICMS_INTER_CF';
              dadosProdTrib := dadosProdTrib + ',''' + temp + '''';

              //Testa se é Update
              if VerificaUpdate('cst') = 1 then begin
                if condUpdateProdCust <> '' then condUpdateProdCust := condUpdateProdCust + ' and ';
                condUpdateProdCust := condUpdateProdCust + 'cust_prod_codi in (select trib_prod_codi from prod_tributos where TRIB_CST_ICMS_ESTADUAL = '+''''+temp+''')';
                if condUpdateProdTrib <> '' then condUpdateProdTrib := condUpdateProdTrib + ' and ';
                condUpdateProdTrib := condUpdateProdTrib + 'TRIB_CST_ICMS_ESTADUAL='+''''+temp+'''';
                if condUpdateProdAdic <> '' then condUpdateProdAdic := condUpdateProdAdic + ' and ';
                condUpdateProdAdic := condUpdateProdAdic + 'adic_prod_codi in (select trib_prod_codi from prod_tributos where TRIB_CST_ICMS_ESTADUAL = '+''''+temp+''')';
                if condUpdateProd <> '' then condUpdateProd := condUpdateProd + ' and ';
                condUpdateProd := condUpdateProd + 'codi in (select trib_prod_codi from prod_tributos where TRIB_CST_ICMS_ESTADUAL = '+''''+temp+''')';
                if condUpdateItens <> '' then condUpdateItens := condUpdateItens + ' and ';
                condUpdateItens := condUpdateItens + 'cod_prod in (select trib_prod_codi from prod_tributos where TRIB_CST_ICMS_ESTADUAL = '+''''+temp+''')';
              end
              else begin
                if dadosUpdateProdTrib <> '' then dadosUpdateProdTrib := dadosUpdateProdTrib + ', ';
                dadosUpdateProdTrib := dadosUpdateProdTrib + 'TRIB_CST_ICMS_ESTADUAL=' + '''' + temp + '''';
                dadosUpdateProdTrib := dadosUpdateProdTrib + ',TRIB_CST_ICMS_INTERESTADUAL=' + '''' + temp + '''';
                dadosUpdateProdTrib := dadosUpdateProdTrib + ',TRIB_CST_ICMS_ESTA_CF=' + '''' + temp + '''';
                dadosUpdateProdTrib := dadosUpdateProdTrib + ',TRIB_CST_ICMS_INTER_CF=' + '''' + temp + '''';
              end;
            end
            //CST ESTADUAL
            else if (LowerCase(StringGrid1.Cells[i,0])='cst_esta') then
            begin
              if StringGrid1.Cells[i,k]='' then begin
                temp := '90';
              end
              else begin
                temp := StringGrid1.Cells[i,k];
              end;
              colProdTrib := colProdTrib + ',TRIB_CST_ICMS_ESTADUAL';
              dadosProdTrib := dadosProdTrib + ',''' + temp + '''';
              colProdTrib := colProdTrib + ',TRIB_CST_ICMS_ESTA_CF';
              dadosProdTrib := dadosProdTrib + ',''' + temp + '''';

              //Testa se é Update
              if VerificaUpdate('cst_esta') = 1 then begin
                if condUpdateProdCust <> '' then condUpdateProdCust := condUpdateProdCust + ' and ';
                condUpdateProdCust := condUpdateProdCust + 'cust_prod_codi in (select trib_prod_codi from prod_tributos where TRIB_CST_ICMS_ESTADUAL = '+''''+temp+''')';
                if condUpdateProdTrib <> '' then condUpdateProdTrib := condUpdateProdTrib + ' and ';
                condUpdateProdTrib := condUpdateProdTrib + 'TRIB_CST_ICMS_ESTADUAL='+''''+temp+'''';
                if condUpdateProdAdic <> '' then condUpdateProdAdic := condUpdateProdAdic + ' and ';
                condUpdateProdAdic := condUpdateProdAdic + 'adic_prod_codi in (select trib_prod_codi from prod_tributos where TRIB_CST_ICMS_ESTADUAL = '+''''+temp+''')';
                if condUpdateProd <> '' then condUpdateProd := condUpdateProd + ' and ';
                condUpdateProd := condUpdateProd + 'codi in (select trib_prod_codi from prod_tributos where TRIB_CST_ICMS_ESTADUAL = '+''''+temp+''')';
                if condUpdateItens <> '' then condUpdateItens := condUpdateItens + ' and ';
                condUpdateItens := condUpdateItens + 'cod_prod in (select trib_prod_codi from prod_tributos where TRIB_CST_ICMS_ESTADUAL = '+''''+temp+''')';
              end
              else begin
                if dadosUpdateProdTrib <> '' then dadosUpdateProdTrib := dadosUpdateProdTrib + ', ';
                dadosUpdateProdTrib := dadosUpdateProdTrib + 'TRIB_CST_ICMS_ESTADUAL=' + '''' + temp + '''';
                dadosUpdateProdTrib := dadosUpdateProdTrib + ',TRIB_CST_ICMS_ESTA_CF=' + '''' + temp + '''';
              end;
            end
            //CST INTERESTADUAL
            else if (LowerCase(StringGrid1.Cells[i,0])='cst_inter') then
            begin
              if StringGrid1.Cells[i,k]='' then begin
                temp := '90';
              end
              else begin
                temp := StringGrid1.Cells[i,k];
              end;
              colProdTrib := colProdTrib + ',TRIB_CST_ICMS_INTERESTADUAL';
              dadosProdTrib := dadosProdTrib + ',''' + temp + '''';
              colProdTrib := colProdTrib + ',TRIB_CST_ICMS_INTER_CF';
              dadosProdTrib := dadosProdTrib + ',''' + temp + '''';

              //Testa se é Update
              if VerificaUpdate('cst_inter') = 1 then begin
                if condUpdateProdCust <> '' then condUpdateProdCust := condUpdateProdCust + ' and ';
                condUpdateProdCust := condUpdateProdCust + 'cust_prod_codi in (select trib_prod_codi from prod_tributos where TRIB_CST_ICMS_INTERESTADUAL = '+''''+temp+''')';
                if condUpdateProdTrib <> '' then condUpdateProdTrib := condUpdateProdTrib + ' and ';
                condUpdateProdTrib := condUpdateProdTrib + 'TRIB_CST_ICMS_INTERESTADUAL='+''''+temp+'''';
                if condUpdateProdAdic <> '' then condUpdateProdAdic := condUpdateProdAdic + ' and ';
                condUpdateProdAdic := condUpdateProdAdic + 'adic_prod_codi in (select trib_prod_codi from prod_tributos where TRIB_CST_ICMS_INTERESTADUAL = '+''''+temp+''')';
                if condUpdateProd <> '' then condUpdateProd := condUpdateProd + ' and ';
                condUpdateProd := condUpdateProd + 'codi in (select trib_prod_codi from prod_tributos where TRIB_CST_ICMS_INTERESTADUAL = '+''''+temp+''')';
                if condUpdateItens <> '' then condUpdateItens := condUpdateItens + ' and ';
                condUpdateItens := condUpdateItens + 'cod_prod in (select trib_prod_codi from prod_tributos where TRIB_CST_ICMS_INTERESTADUAL = '+''''+temp+''')';
              end
              else begin
                if dadosUpdateProdTrib <> '' then dadosUpdateProdTrib := dadosUpdateProdTrib + ', ';
                dadosUpdateProdTrib := dadosUpdateProdTrib + 'TRIB_CST_ICMS_INTERESTADUAL=' + '''' + temp + '''';
                dadosUpdateProdTrib := dadosUpdateProdTrib + ',TRIB_CST_ICMS_INTER_CF=' + '''' + temp + '''';
              end;
            end
            //ALIQ_ICMS (Alíquota de ICMS)
            else if (LowerCase(StringGrid1.Cells[i,0])='aliq_icms') then
            begin
              if StringGrid1.Cells[i,k]='' then begin
                colProdTrib := colProdTrib + ',TRIB_ALIQ_ICMS_ESTADUAL';
                dadosProdTrib := dadosProdTrib + ',''' + '0' + '''';
                temp := '0';
              end
              else begin
                temp := stringreplace(StringGrid1.Cells[i,k], '%', '',[rfReplaceAll, rfIgnoreCase]);
                temp := corrigeFloat(temp);
                colProdTrib := colProdTrib + ',TRIB_ALIQ_ICMS_ESTADUAL';
                dadosProdTrib := dadosProdTrib + ',''' + temp + '''';
              end;
              //Testa se é Update
              if VerificaUpdate('aliq_icms') = 1 then begin
                if condUpdateProdCust <> '' then condUpdateProdCust := condUpdateProdCust + ' and ';
                condUpdateProdCust := condUpdateProdCust + 'cust_prod_codi in (select trib_prod_codi from prod_tributos where TRIB_ALIQ_ICMS_ESTADUAL = '+''''+temp+''')';
                if condUpdateProdTrib <> '' then condUpdateProdTrib := condUpdateProdTrib + ' and ';
                condUpdateProdTrib := condUpdateProdTrib + 'TRIB_ALIQ_ICMS_ESTADUAL='+''''+temp+'''';
                if condUpdateProdAdic <> '' then condUpdateProdAdic := condUpdateProdAdic + ' and ';
                condUpdateProdAdic := condUpdateProdAdic + 'adic_prod_codi in (select trib_prod_codi from prod_tributos where TRIB_ALIQ_ICMS_ESTADUAL = '+''''+temp+''')';
                if condUpdateProd <> '' then condUpdateProd := condUpdateProd + ' and ';
                condUpdateProd := condUpdateProd + 'codi in (select trib_prod_codi from prod_tributos where TRIB_ALIQ_ICMS_ESTADUAL = '+''''+temp+''')';
                if condUpdateItens <> '' then condUpdateItens := condUpdateItens + ' and ';
                condUpdateItens := condUpdateItens + 'cod_prod in (select trib_prod_codi from prod_tributos where TRIB_ALIQ_ICMS_ESTADUAL = '+''''+temp+''')';
              end
              else begin
                if dadosUpdateProdTrib <> '' then dadosUpdateProdTrib := dadosUpdateProdTrib + ', ';
                dadosUpdateProdTrib := dadosUpdateProdTrib + 'TRIB_ALIQ_ICMS_ESTADUAL=' + '''' + temp + '''';
              end;
            end
            //REDU_ESTA (Redução da Alíquota de ICMS Estadual)
            else if (LowerCase(StringGrid1.Cells[i,0])='redu_esta') then
            begin
              if StringGrid1.Cells[i,k]='' then begin
                colProdTrib := colProdTrib + ',TRIB_REDU_ICMS_ESTADUAL';
                dadosProdTrib := dadosProdTrib + ',''' + '0' + '''';
                temp := '0';
              end
              else begin
                temp := stringreplace(StringGrid1.Cells[i,k], '%', '',[rfReplaceAll, rfIgnoreCase]);
                temp := corrigeFloat(temp);
                colProdTrib := colProdTrib + ',TRIB_REDU_ICMS_ESTADUAL';
                dadosProdTrib := dadosProdTrib + ',''' + temp + '''';
              end;
              //Testa se é Update
              if VerificaUpdate('redu_esta') = 1 then begin
                if condUpdateProdCust <> '' then condUpdateProdCust := condUpdateProdCust + ' and ';
                condUpdateProdCust := condUpdateProdCust + 'cust_prod_codi in (select trib_prod_codi from prod_tributos where TRIB_REDU_ICMS_ESTADUAL = '+''''+temp+''')';
                if condUpdateProdTrib <> '' then condUpdateProdTrib := condUpdateProdTrib + ' and ';
                condUpdateProdTrib := condUpdateProdTrib + 'TRIB_REDU_ICMS_ESTADUAL='+''''+temp+'''';
                if condUpdateProdAdic <> '' then condUpdateProdAdic := condUpdateProdAdic + ' and ';
                condUpdateProdAdic := condUpdateProdAdic + 'adic_prod_codi in (select trib_prod_codi from prod_tributos where TRIB_REDU_ICMS_ESTADUAL = '+''''+temp+''')';
                if condUpdateProd <> '' then condUpdateProd := condUpdateProd + ' and ';
                condUpdateProd := condUpdateProd + 'codi in (select trib_prod_codi from prod_tributos where TRIB_REDU_ICMS_ESTADUAL = '+''''+temp+''')';
                if condUpdateItens <> '' then condUpdateItens := condUpdateItens + ' and ';
                condUpdateItens := condUpdateItens + 'cod_prod in (select trib_prod_codi from prod_tributos where TRIB_REDU_ICMS_ESTADUAL = '+''''+temp+''')';
              end
              else begin
                if dadosUpdateProdTrib <> '' then dadosUpdateProdTrib := dadosUpdateProdTrib + ', ';
                dadosUpdateProdTrib := dadosUpdateProdTrib + 'TRIB_REDU_ICMS_ESTADUAL=' + '''' + temp + '''';
              end;
            end
            //REDU_INTER (Redução da Alíquota de ICMS Interestadual)
            else if (LowerCase(StringGrid1.Cells[i,0])='redu_inter') then
            begin
              if StringGrid1.Cells[i,k]='' then begin
                colProdTrib := colProdTrib + ',TRIB_REDU_ICMS_INTERESTADUAL';
                dadosProdTrib := dadosProdTrib + ',''' + '0' + '''';
                temp := '';
              end
              else begin
                temp := stringreplace(StringGrid1.Cells[i,k], '%', '',[rfReplaceAll, rfIgnoreCase]);
                temp := corrigeFloat(temp);
                colProdTrib := colProdTrib + ',TRIB_REDU_ICMS_INTERESTADUAL';
                dadosProdTrib := dadosProdTrib + ',''' + temp + '''';
              end;
              //Testa se é Update
              if VerificaUpdate('redu_inter') = 1 then begin
                if condUpdateProdCust <> '' then condUpdateProdCust := condUpdateProdCust + ' and ';
                condUpdateProdCust := condUpdateProdCust + 'cust_prod_codi in (select trib_prod_codi from prod_tributos where TRIB_REDU_ICMS_INTERESTADUAL = '+''''+temp+''')';
                if condUpdateProdTrib <> '' then condUpdateProdTrib := condUpdateProdTrib + ' and ';
                condUpdateProdTrib := condUpdateProdTrib + 'TRIB_REDU_ICMS_INTERESTADUAL='+''''+temp+'''';
                if condUpdateProdAdic <> '' then condUpdateProdAdic := condUpdateProdAdic + ' and ';
                condUpdateProdAdic := condUpdateProdAdic + 'adic_prod_codi in (select trib_prod_codi from prod_tributos where TRIB_REDU_ICMS_INTERESTADUAL = '+''''+temp+''')';
                if condUpdateProd <> '' then condUpdateProd := condUpdateProd + ' and ';
                condUpdateProd := condUpdateProd + 'codi in (select trib_prod_codi from prod_tributos where TRIB_REDU_ICMS_INTERESTADUAL = '+''''+temp+''')';
                if condUpdateItens <> '' then condUpdateItens := condUpdateItens + ' and ';
                condUpdateItens := condUpdateItens + 'cod_prod in (select trib_prod_codi from prod_tributos where TRIB_REDU_ICMS_INTERESTADUAL = '+''''+temp+''')';
              end
              else begin
                if dadosUpdateProdTrib <> '' then dadosUpdateProdTrib := dadosUpdateProdTrib + ', ';
                dadosUpdateProdTrib := dadosUpdateProdTrib + 'TRIB_REDU_ICMS_INTERESTADUAL=' + '''' + temp + '''';
              end;
            end
            //CST_IPI (Código de CST IPI)
            else if (LowerCase(StringGrid1.Cells[i,0])='cst_ipi') then
            begin
              if StringGrid1.Cells[i,k]='' then begin
                colProdTrib := colProdTrib + ',TRIB_CST_IPI';
                dadosProdTrib := dadosProdTrib + ',''' + '0' + '''';
              end
              else begin
                colProdTrib := colProdTrib + ',TRIB_CST_IPI';
                dadosProdTrib := dadosProdTrib + ',''' + StringGrid1.Cells[i,k] + '''';
              end;
              //Testa se é Update
              if VerificaUpdate('cst_ipi') = 1 then begin
                if condUpdateProdCust <> '' then condUpdateProdCust := condUpdateProdCust + ' and ';
                condUpdateProdCust := condUpdateProdCust + 'cust_prod_codi in (select trib_prod_codi from prod_tributos where TRIB_CST_IPI = '+''''+temp+''')';
                if condUpdateProdTrib <> '' then condUpdateProdTrib := condUpdateProdTrib + ' and ';
                condUpdateProdTrib := condUpdateProdTrib + 'TRIB_CST_IPI='+''''+StringGrid1.Cells[i,k]+'''';
                if condUpdateProdAdic <> '' then condUpdateProdAdic := condUpdateProdAdic + ' and ';
                condUpdateProdAdic := condUpdateProdAdic + 'adic_prod_codi in (select trib_prod_codi from prod_tributos where TRIB_CST_IPI = '+''''+temp+''')';
                if condUpdateProd <> '' then condUpdateProd := condUpdateProd + ' and ';
                condUpdateProd := condUpdateProd + 'codi in (select trib_prod_codi from prod_tributos where TRIB_CST_IPI = '+''''+temp+''')';
                if condUpdateItens <> '' then condUpdateItens := condUpdateItens + ' and ';
                condUpdateItens := condUpdateItens + 'cod_prod in (select trib_prod_codi from prod_tributos where TRIB_CST_IPI = '+''''+temp+''')';
              end
              else begin
                if dadosUpdateProdTrib <> '' then dadosUpdateProdTrib := dadosUpdateProdTrib + ', ';
                dadosUpdateProdTrib := dadosUpdateProdTrib + ',TRIB_CST_IPI=' + '''' + StringGrid1.Cells[i,k] + '''';
              end;
            end
            //ALIQ_IPI (Alíquota de IPI)
            else if (LowerCase(StringGrid1.Cells[i,0])='aliq_ipi') then
            begin
              if StringGrid1.Cells[i,k]='' then begin
                colProdTrib := colProdTrib + ',TRIB_ALIQ_IPI';
                dadosProdTrib := dadosProdTrib + ',''' + '0' + '''';
              end
              else begin
                temp := stringreplace(StringGrid1.Cells[i,k], '%', '',[rfReplaceAll, rfIgnoreCase]);
                temp := corrigeFloat(temp);
                colProdTrib := colProdTrib + ',TRIB_ALIQ_IPI';
                dadosProdTrib := dadosProdTrib + ',''' + temp + '''';
              end;
              //Testa se é Update
              if VerificaUpdate('aliq_ipi') = 1 then begin
                if condUpdateProdCust <> '' then condUpdateProdCust := condUpdateProdCust + ' and ';
                condUpdateProdCust := condUpdateProdCust + 'cust_prod_codi in (select trib_prod_codi from prod_tributos where TRIB_ALIQ_IPI = '+''''+temp+''')';
                if condUpdateProdTrib <> '' then condUpdateProdTrib := condUpdateProdTrib + ' and ';
                condUpdateProdTrib := condUpdateProdTrib + 'TRIB_ALIQ_IPI='+''''+temp+'''';
                if condUpdateProdAdic <> '' then condUpdateProdAdic := condUpdateProdAdic + ' and ';
                condUpdateProdAdic := condUpdateProdAdic + 'adic_prod_codi in (select trib_prod_codi from prod_tributos where TRIB_ALIQ_IPI = '+''''+temp+''')';
                if condUpdateProd <> '' then condUpdateProd := condUpdateProd + ' and ';
                condUpdateProd := condUpdateProd + 'codi in (select trib_prod_codi from prod_tributos where TRIB_ALIQ_IPI = '+''''+temp+''')';
                if condUpdateItens <> '' then condUpdateItens := condUpdateItens + ' and ';
                condUpdateItens := condUpdateItens + 'cod_prod in (select trib_prod_codi from prod_tributos where TRIB_ALIQ_IPI = '+''''+temp+''')';
              end
              else begin
                if dadosUpdateProdTrib <> '' then dadosUpdateProdTrib := dadosUpdateProdTrib + ', ';
                dadosUpdateProdTrib := dadosUpdateProdTrib + 'TRIB_ALIQ_IPI=' + '''' + temp + '''';
              end;
            end
            //CST_PIS (Código de CST PIS)
            else if (LowerCase(StringGrid1.Cells[i,0])='cst_pis') then
            begin
              if StringGrid1.Cells[i,k]='' then begin
                colProdTrib := colProdTrib + ',TRIB_CST_PIS';
                dadosProdTrib := dadosProdTrib + ',''' + '0' + '''';
              end
              else begin
                colProdTrib := colProdTrib + ',TRIB_CST_PIS';
                dadosProdTrib := dadosProdTrib + ',''' + StringGrid1.Cells[i,k] + '''';
              end;
              //Testa se é Update
              if VerificaUpdate('cst_pis') = 1 then begin
                if condUpdateProdCust <> '' then condUpdateProdCust := condUpdateProdCust + ' and ';
                condUpdateProdCust := condUpdateProdCust + 'cust_prod_codi in (select trib_prod_codi from prod_tributos where TRIB_CST_PIS = '+''''+temp+''')';
                if condUpdateProdTrib <> '' then condUpdateProdTrib := condUpdateProdTrib + ' and ';
                condUpdateProdTrib := condUpdateProdTrib + 'TRIB_CST_PIS='+''''+StringGrid1.Cells[i,k]+'''';
                if condUpdateProdAdic <> '' then condUpdateProdAdic := condUpdateProdAdic + ' and ';
                condUpdateProdAdic := condUpdateProdAdic + 'adic_prod_codi in (select trib_prod_codi from prod_tributos where TRIB_CST_PIS = '+''''+temp+''')';
                if condUpdateProd <> '' then condUpdateProd := condUpdateProd + ' and ';
                condUpdateProd := condUpdateProd + 'codi in (select trib_prod_codi from prod_tributos where TRIB_CST_PIS = '+''''+temp+''')';
                if condUpdateItens <> '' then condUpdateItens := condUpdateItens + ' and ';
                condUpdateItens := condUpdateItens + 'cod_prod in (select trib_prod_codi from prod_tributos where TRIB_CST_PIS = '+''''+temp+''')';
              end
              else begin
                if dadosUpdateProdTrib <> '' then dadosUpdateProdTrib := dadosUpdateProdTrib + ', ';
                dadosUpdateProdTrib := dadosUpdateProdTrib + 'TRIB_CST_PIS=' + '''' + StringGrid1.Cells[i,k] + '''';
              end;
            end
            //ALIQ_PIS (Alíquota de PIS)
            else if (LowerCase(StringGrid1.Cells[i,0])='aliq_pis') then
            begin
              if StringGrid1.Cells[i,k]='' then begin
                colProdTrib := colProdTrib + ',TRIB_ALIQ_PIS';
                dadosProdTrib := dadosProdTrib + ',''' + '0' + '''';
                temp := '0';
              end
              else begin
                temp := stringreplace(StringGrid1.Cells[i,k], '%', '',[rfReplaceAll, rfIgnoreCase]);
                temp := corrigeFloat(temp);
                colProdTrib := colProdTrib + ',TRIB_ALIQ_PIS';
                dadosProdTrib := dadosProdTrib + ',''' + temp + '''';
              end;
              //Testa se é Update
              if VerificaUpdate('aliq_pis') = 1 then begin
                if condUpdateProdCust <> '' then condUpdateProdCust := condUpdateProdCust + ' and ';
                condUpdateProdCust := condUpdateProdCust + 'cust_prod_codi in (select trib_prod_codi from prod_tributos where TRIB_ALIQ_PIS = '+''''+temp+''')';
                if condUpdateProdTrib <> '' then condUpdateProdTrib := condUpdateProdTrib + ' and ';
                condUpdateProdTrib := condUpdateProdTrib + 'TRIB_ALIQ_PIS='+''''+temp+'''';
                if condUpdateProdAdic <> '' then condUpdateProdAdic := condUpdateProdAdic + ' and ';
                condUpdateProdAdic := condUpdateProdAdic + 'adic_prod_codi in (select trib_prod_codi from prod_tributos where TRIB_ALIQ_PIS = '+''''+temp+''')';
                if condUpdateProd <> '' then condUpdateProd := condUpdateProd + ' and ';
                condUpdateProd := condUpdateProd + 'codi in (select trib_prod_codi from prod_tributos where TRIB_ALIQ_PIS = '+''''+temp+''')';
                if condUpdateItens <> '' then condUpdateItens := condUpdateItens + ' and ';
                condUpdateItens := condUpdateItens + 'cod_prod in (select trib_prod_codi from prod_tributos where TRIB_ALIQ_PIS = '+''''+temp+''')';
              end
              else begin
                if dadosUpdateProdTrib <> '' then dadosUpdateProdTrib := dadosUpdateProdTrib + ', ';
                dadosUpdateProdTrib := dadosUpdateProdTrib + 'TRIB_ALIQ_PIS=' + '''' + temp + '''';
              end;
            end
            //CST_COFINS (Código de CST COFINS)
            else if (LowerCase(StringGrid1.Cells[i,0])='cst_cofins') then
            begin
              if StringGrid1.Cells[i,k]='' then begin
                colProdTrib := colProdTrib + ',TRIB_CST_COFINS';
                dadosProdTrib := dadosProdTrib + ',''' + '0' + '''';
              end
              else begin
                colProdTrib := colProdTrib + ',TRIB_CST_COFINS';
                dadosProdTrib := dadosProdTrib + ',''' + StringGrid1.Cells[i,k] + '''';
              end;
              //Testa se é Update
              if VerificaUpdate('cst_cofins') = 1 then begin
                if condUpdateProdCust <> '' then condUpdateProdCust := condUpdateProdCust + ' and ';
                condUpdateProdCust := condUpdateProdCust + 'cust_prod_codi in (select trib_prod_codi from prod_tributos where TRIB_CST_COFINS = '+''''+temp+''')';
                if condUpdateProdTrib <> '' then condUpdateProdTrib := condUpdateProdTrib + ' and ';
                condUpdateProdTrib := condUpdateProdTrib + 'TRIB_CST_COFINS='+''''+StringGrid1.Cells[i,k]+'''';
                if condUpdateProdAdic <> '' then condUpdateProdAdic := condUpdateProdAdic + ' and ';
                condUpdateProdAdic := condUpdateProdAdic + 'adic_prod_codi in (select trib_prod_codi from prod_tributos where TRIB_CST_COFINS = '+''''+temp+''')';
                if condUpdateProd <> '' then condUpdateProd := condUpdateProd + ' and ';
                condUpdateProd := condUpdateProd + 'codi in (select trib_prod_codi from prod_tributos where TRIB_CST_COFINS = '+''''+temp+''')';
                if condUpdateItens <> '' then condUpdateItens := condUpdateItens + ' and ';
                condUpdateItens := condUpdateItens + 'cod_prod in (select trib_prod_codi from prod_tributos where TRIB_CST_COFINS = '+''''+temp+''')';
              end
              else begin
                if dadosUpdateProdTrib <> '' then dadosUpdateProdTrib := dadosUpdateProdTrib + ', ';
                dadosUpdateProdTrib := dadosUpdateProdTrib + 'TRIB_CST_COFINS=' + '''' + StringGrid1.Cells[i,k] + '''';
              end;
            end
            //ALIQ_COFINS (Alíquota de COFINS)
            else if (LowerCase(StringGrid1.Cells[i,0])='aliq_cofins') then
            begin
              if StringGrid1.Cells[i,k]='' then begin
                colProdTrib := colProdTrib + ',TRIB_ALIQ_COFINS';
                dadosProdTrib := dadosProdTrib + ',''' + '0' + '''';
                temp := '0';
              end
              else begin
                temp := stringreplace(StringGrid1.Cells[i,k], '%', '',[rfReplaceAll, rfIgnoreCase]);
                temp := corrigeFloat(temp);
                colProdTrib := colProdTrib + ',TRIB_ALIQ_COFINS';
                dadosProdTrib := dadosProdTrib + ',''' + temp + '''';
              end;
              //Testa se é Update
              if VerificaUpdate('aliq_cofins') = 1 then begin
                if condUpdateProdCust <> '' then condUpdateProdCust := condUpdateProdCust + ' and ';
                condUpdateProdCust := condUpdateProdCust + 'cust_prod_codi in (select trib_prod_codi from prod_tributos where TRIB_ALIQ_COFINS = '+''''+temp+''')';
                if condUpdateProdTrib <> '' then condUpdateProdTrib := condUpdateProdTrib + ' and ';
                condUpdateProdTrib := condUpdateProdTrib + 'TRIB_ALIQ_COFINS='+''''+temp+'''';
                if condUpdateProdAdic <> '' then condUpdateProdAdic := condUpdateProdAdic + ' and ';
                condUpdateProdAdic := condUpdateProdAdic + 'adic_prod_codi in (select trib_prod_codi from prod_tributos where TRIB_ALIQ_COFINS = '+''''+temp+''')';
                if condUpdateProd <> '' then condUpdateProd := condUpdateProd + ' and ';
                condUpdateProd := condUpdateProd + 'codi in (select trib_prod_codi from prod_tributos where TRIB_ALIQ_COFINS = '+''''+temp+''')';
                if condUpdateItens <> '' then condUpdateItens := condUpdateItens + ' and ';
                condUpdateItens := condUpdateItens + 'cod_prod in (select trib_prod_codi from prod_tributos where TRIB_ALIQ_COFINS = '+''''+temp+''')';
              end
              else begin
                if dadosUpdateProdTrib <> '' then dadosUpdateProdTrib := dadosUpdateProdTrib + ', ';
                dadosUpdateProdTrib := dadosUpdateProdTrib + 'TRIB_ALIQ_COFINS=' + '''' + temp + '''';
              end;
            end
            //ATIVO
            else if (LowerCase(StringGrid1.Cells[i,0])='ativo') then
            begin
              if StringGrid1.Cells[i,k]='' then begin
                colProd := colProd + ',ATIVO';
                temp := 'S';
                dadosProd := dadosProd + ',''' + temp + '''';
              end
              else begin
                colProd := colProd + ',ATIVO';
                temp := UpperCase(StringGrid1.Cells[i,k]);
                if (temp='ATIVO') or
                   (temp='ATIVAR') or
                   (temp='1') or
                   (temp='SIM') or
                   (temp='S') or
                   (temp='OK')
                then begin
                  temp := 'S';
                end
                else if (temp='INATIVO') or
                        (temp='INATIVAR') or
                        (temp='0') or
                        (temp='2') or
                        (temp='NAO') or
                        (temp='N') or
                        (temp='NÃO')
                then begin
                  temp := 'N';
                end
                else begin
                  ShowMessage('Tratar valor da coluna ATIVO: '+temp);
                  status := 0;
                  Exit; //Quebra o for
                end;

                dadosProd := dadosProd + ',''' + temp + '''';
              end;
              //Testa se é Update
              if VerificaUpdate('ativo') = 1 then begin
                if condUpdateProd <> '' then condUpdateProd := condUpdateProd + ' and ';
                condUpdateProd := condUpdateProd + 'ATIVO='+''''+temp+'''';
                if condUpdateProdTrib <> '' then condUpdateProdTrib := condUpdateProdTrib + ' and ';
                condUpdateProdTrib := condUpdateProdTrib + 'trib_prod_codi in (select codi from prod where ATIVO = '+''''+temp+''')';
                if condUpdateProdAdic <> '' then condUpdateProdAdic := condUpdateProdAdic + ' and ';
                condUpdateProdAdic := condUpdateProdAdic + 'adic_prod_codi in (select codi from prod where ATIVO = '+''''+temp+''')';
                if condUpdateProdCust <> '' then condUpdateProdCust := condUpdateProdCust + ' and ';
                condUpdateProdCust := condUpdateProdCust + 'cust_prod_codi in (select codi from prod where ATIVO = '+''''+temp+''')';
                if condUpdateItens <> '' then condUpdateItens := condUpdateItens + ' and ';
                condUpdateItens := condUpdateItens + 'cod_prod in (select codi from prod where ATIVO = '+''''+temp+''')';
              end
              else begin
                if dadosUpdateProd <> '' then dadosUpdateProd := dadosUpdateProd + ', ';
                dadosUpdateProd := dadosUpdateProd + 'ATIVO=' + '''' + temp + '''';
              end;
            end
            ;

          //Fim do for
          end;

          //----------------------------------------
          //Gravar no banco de dados
          if UpperCase( ExtractFileExt(DBPath.Text) ) = '.FDB' then begin
            try
              try
                //Abrir conexoes
                conDestino.Open;
                SQL := TSQLDataSet.Create(Nil);
                SQL.SQLConnection := conDestino;

                //Se for INSERT
                if colUpdateCount <= 0 then begin

                  //Executar INSERTs
                  frmImportando.atualizaStatus('Inserindo dados na tabela PROD.');
                  SQL.CommandText := 'insert into prod ('+ colProd +') values ' + '(' + dadosProd + ');';
                  SQL.ExecSQL;

                  //Criar registros em todas as empresas
                  {
                    CUST_PROD_EMPR: Empresa onde foi criado
                    CUST_EMPR: Empresa que irá aparecer, por isso tem esse FOR
                  }
                  j := BuscaColuna(StringGrid1,'empr');
                  //Se nao achar seta padrão
                  if j = -1 then temp := '1'
                  //Se achar recebe valor no temp
                  else temp := StringGrid1.Cells[j,k];

                  //Criar registros em todas as empresas
                  {
                    CUST_PROD_EMPR: Empresa onde foi criado
                    CUST_EMPR: Empresa que irá aparecer, por isso tem esse FOR
                  }

                  for i := 1 to qtdEmpr do begin
                    //Testa se é a empresa onde o produto foi cadastrado
                    if i = StrToInt(temp) then begin
                      frmImportando.atualizaStatus('Inserindo dados na tabela PROD_TRIBUTOS.');
                      SQL.CommandText := 'insert into prod_tributos ('+ colProdTrib +') values ' + '(' + dadosProdTrib + ');';
                      SQL.ExecSQL;
                      frmImportando.atualizaStatus('Inserindo dados na tabela PROD_ADICIONAIS.');
                      SQL.CommandText := 'insert into prod_adicionais ('+ colProdAdic +') values ' + '(' + dadosProdAdic + ');';
                      SQL.ExecSQL;
                      frmImportando.atualizaStatus('Inserindo dados na tabela PROD_CUSTOS.');
                      SQL.CommandText := 'insert into prod_custos ('+ colProdCust +') values ' + '(' + dadosProdCust + ');';
                      SQL.ExecSQL;
                      frmImportando.atualizaStatus('Inserindo dados na tabela MVA.');
                      SQL.CommandText := 'insert into mva ('+ colMVA +') values ' + '(' + dadosMVA + ');';
                      SQL.ExecSQL;
                      frmImportando.atualizaStatus('Inserindo dados na tabela ITENS.');
                      SQL.CommandText := 'insert into itens ('+ colItens +') values ' + '(' + dadosItens + ');';
                      SQL.ExecSQL;
                      frmImportando.atualizaStatus('Inserindo dados na tabela PROD_FORN.');
                      SQL.CommandText := 'insert into prod_forn ('+ colProdForn +') values ' + '(' + dadosProdForn + ');';
                      SQL.ExecSQL;
                    end
                    //Se não, cria registro em branco na outra empresa
                    else begin
                      frmImportando.atualizaStatus('Inserindo registro na tabela PROD_TRIBUTOS para Empresa '+IntToStr(i));
                      SQL.CommandText := 'insert into prod_tributos ('+ colRegistroProdTrib + ',trib_empr) values ' + '(' + dadosRegistroProdTrib + ','+IntToStr(i)+');';
                      SQL.ExecSQL;
                      frmImportando.atualizaStatus('Inserindo registro na tabela PROD_ADICIONAIS para Empresa '+IntToStr(i));
                      SQL.CommandText := 'insert into prod_adicionais ('+ colRegistroProdAdic +',adic_empr) values ' + '(' + dadosRegistroProdAdic + ','+IntToStr(i)+ ');';
                      SQL.ExecSQL;
                      frmImportando.atualizaStatus('Inserindo registro na tabela PROD_CUSTOS para Empresa '+IntToStr(i));
                      SQL.CommandText := 'insert into prod_custos ('+ colRegistroProdCust +',cust_empr) values ' + '(' + dadosRegistroProdCust + ','+IntToStr(i)+ ');';
                      SQL.ExecSQL;
                      frmImportando.atualizaStatus('Inserindo registro na tabela MVA para Empresa '+IntToStr(i));
                      SQL.CommandText := 'insert into mva ('+ colRegistroMVA +',mva_empr) values ' + '(' + dadosRegistroMVA + ','+IntToStr(i)+ ');';
                      SQL.ExecSQL;
                    end;
                  end;

                end
                //Se for UPDATE
                else begin
                  //Executar UPDATE
                  if dadosUpdateProd <> '' then begin
                    SQL.CommandText := 'update prod set '+ dadosUpdateProd +' where ' + condUpdateProd + ';';
                    SQL.ExecSQL;
                  end;
                  if dadosUpdateProdTrib <> '' then begin
                    SQL.CommandText := 'update prod_tributos set '+ dadosUpdateProdTrib +' where ' + condUpdateProdTrib + ';';
                    SQL.ExecSQL;
                  end;
                  if dadosUpdateProdAdic <> '' then begin
                    SQL.CommandText := 'update prod_adicionais set '+ dadosUpdateProdAdic +' where ' + condUpdateProdAdic + ';';
                    SQL.ExecSQL;
                  end;
                  if dadosUpdateProdCust <> '' then begin
                    SQL.CommandText := 'update prod_custos set '+ dadosUpdateProdCust +' where ' + condUpdateProdCust + ';';
                    SQL.ExecSQL;
                  end;
                  if dadosUpdateItens <> '' then begin
                    SQL.CommandText := dadosUpdateItens +' and ' + condUpdateItens + ';';
                    SQL.ExecSQL;
                  end;
                end;
              except
                on e: exception do
                begin
                  Mensagem('Erro SQL: '+e.message+sLineBreak+SQL.CommandText,mtCustom,[],[],'Erro SQL Produtos');
                  //ShowMessage('Erro SQL: '+e.message+sLineBreak+SQL.CommandText);
                  status := 0;
                  break; //Quebra o for
                end;
              end;

            finally
              SQL.Free;
              conDestino.Close;
            end;
          end
          //Gravar comandos em TXT
          else if (UpperCase( ExtractFileExt(DBPath.Text) ) = '.TXT') or
                  (UpperCase( ExtractFileExt(DBPath.Text) ) = '.SQL')
          then begin
            try
              try
                //Carregar arquivo TXT
                AssignFile(fileTXT, DBPath.Text);
                if not FileExists(DBPath.Text) then ReWrite(fileTXT)
                else append(fileTXT);

                frmImportando.atualizaStatus('Comandos da PROD.');
                WriteLn(fileTXT, '----------Comandos da PROD----------');

                //Se for INSERT
                if colUpdateCount <= 0 then begin

                  frmImportando.atualizaStatus('Inserindo dados na tabela PROD.');
                  WriteLn(fileTXT, 'insert into prod ('+ colProd +') values ' + '(' + dadosProd + ');');
                  WriteLn(fileTXT, 'COMMIT WORK;');

                  //Criar registros em todas as empresas
                  {
                    CUST_PROD_EMPR: Empresa onde foi criado
                    CUST_EMPR: Empresa que irá aparecer, por isso tem esse FOR
                  }
                  j := BuscaColuna(StringGrid1,'empr');
                  //Se nao achar seta padrão
                  if j = -1 then temp := '1'
                  //Se achar recebe valor no temp
                  else temp := StringGrid1.Cells[j,k];

                  //Criar registros em todas as empresas
                  {
                    CUST_PROD_EMPR: Empresa onde foi criado
                    CUST_EMPR: Empresa que irá aparecer, por isso tem esse FOR
                  }

                  for i := 1 to qtdEmpr do begin
                    //Testa se é a empresa onde o produto foi cadastrado
                    if i = StrToInt(temp) then begin
                      frmImportando.atualizaStatus('Inserindo dados na tabela PROD_TRIBUTOS.');
                      WriteLn(fileTXT, 'insert into prod_tributos ('+ colProdTrib +') values ' + '(' + dadosProdTrib + ');');
                      WriteLn(fileTXT, 'COMMIT WORK;');
                      frmImportando.atualizaStatus('Inserindo dados na tabela PROD_ADICIONAIS.');
                      WriteLn(fileTXT, 'insert into prod_adicionais ('+ colProdAdic +') values ' + '(' + dadosProdAdic + ');');
                      WriteLn(fileTXT, 'COMMIT WORK;');
                      frmImportando.atualizaStatus('Inserindo dados na tabela PROD_CUSTOS.');
                      WriteLn(fileTXT, 'insert into prod_custos ('+ colProdCust +') values ' + '(' + dadosProdCust + ');');
                      WriteLn(fileTXT, 'COMMIT WORK;');
                      frmImportando.atualizaStatus('Inserindo dados na tabela MVA.');
                      WriteLn(fileTXT, 'insert into mva ('+ colMVA +') values ' + '(' + dadosMVA + ');');
                      WriteLn(fileTXT, 'COMMIT WORK;');
                      frmImportando.atualizaStatus('Inserindo dados na tabela ITENS.');
                      WriteLn(fileTXT, 'insert into itens ('+ colItens +') values ' + '(' + dadosItens + ');');
                      WriteLn(fileTXT, 'COMMIT WORK;');
                      frmImportando.atualizaStatus('Inserindo dados na tabela PROD_FORN.');
                      WriteLn(fileTXT, 'insert into prod_forn ('+ colProdForn +') values ' + '(' + dadosProdForn + ');');
                      WriteLn(fileTXT, 'COMMIT WORK;');
                    end
                    //Se não, cria registro em branco na outra empresa
                    else begin
                      frmImportando.atualizaStatus('Inserindo registro na tabela PROD_TRIBUTOS para Empresa '+IntToStr(i));
                      WriteLn(fileTXT, 'insert into prod_tributos ('+ colRegistroProdTrib + ',trib_empr) values ' + '(' + dadosRegistroProdTrib + ','+IntToStr(i)+');');
                      WriteLn(fileTXT, 'COMMIT WORK;');
                      frmImportando.atualizaStatus('Inserindo registro na tabela PROD_ADICIONAIS para Empresa '+IntToStr(i));
                      WriteLn(fileTXT, 'insert into prod_adicionais ('+ colRegistroProdAdic +',adic_empr) values ' + '(' + dadosRegistroProdAdic + ','+IntToStr(i)+ ');');
                      WriteLn(fileTXT, 'COMMIT WORK;');
                      frmImportando.atualizaStatus('Inserindo registro na tabela PROD_CUSTOS para Empresa '+IntToStr(i));
                      WriteLn(fileTXT, 'insert into prod_custos ('+ colRegistroProdCust +',cust_empr) values ' + '(' + dadosRegistroProdCust + ','+IntToStr(i)+ ');');
                      WriteLn(fileTXT, 'COMMIT WORK;');
                      frmImportando.atualizaStatus('Inserindo registro na tabela MVA para Empresa '+IntToStr(i));
                      WriteLn(fileTXT, 'insert into mva ('+ colRegistroMVA +',mva_empr) values ' + '(' + dadosRegistroMVA + ','+IntToStr(i)+ ');');
                      WriteLn(fileTXT, 'COMMIT WORK;');
                    end;
                  end;
                end

                //Se for UPDATE
                else begin
                  frmImportando.atualizaStatus('Atualizando dados na tabela PROD.');

                  //Executar UPDATE
                  if dadosUpdateProd <> '' then begin
                    WriteLn(fileTXT, 'update prod set '+ dadosUpdateProd +' where ' + condUpdateProd + ';');
                    WriteLn(fileTXT, 'COMMIT WORK;');
                  end;
                  if dadosUpdateProdTrib <> '' then begin
                    WriteLn(fileTXT, 'update prod_tributos set '+ dadosUpdateProdTrib +' where ' + condUpdateProdTrib + ';');
                    WriteLn(fileTXT, 'COMMIT WORK;');
                  end;
                  if dadosUpdateProdAdic <> '' then begin
                    WriteLn(fileTXT, 'update prod_adicionais set '+ dadosUpdateProdAdic +' where ' + condUpdateProdAdic + ';');
                    WriteLn(fileTXT, 'COMMIT WORK;');
                  end;
                  if dadosUpdateProdCust <> '' then begin
                    WriteLn(fileTXT, 'update prod_custos set '+ dadosUpdateProdCust +' where ' + condUpdateProdCust + ';');
                    WriteLn(fileTXT, 'COMMIT WORK;');
                  end;
                  if dadosUpdateItens <> '' then begin
                    WriteLn(fileTXT, dadosUpdateItens +' and ' + condUpdateItens + ';');
                    WriteLn(fileTXT, 'COMMIT WORK;');
                  end;
                end;
              except
                on e: exception do
                begin
                  ShowMessage('Erro TXT: '+e.message);
                  status := 0;
                  CloseFile(fileTXT);
                  break; //Quebra o for
                end;
              end;
            finally
              CloseFile(fileTXT);
            end;
          end;

        end

        //----------------------------------------------------------------------------
        //Importar Grupos
        else if SelectImport.Text = 'Grupos' then
        begin
          //ShowMessage('Importar Grupos');

          frmImportando.atualizaStatus('Grupo '+IntToStr(k));

          colGrupo := '';
          dadosGrupo := '';

          //Carregar informações para importar
          //-------------------------------------------------------

          //Codigo é obrigatório, se não tiver preenche com o generator
          //CODI (CODIGO)
          i:=BuscaColuna(StringGrid1,'codi');
          if (i<>-1) then
          begin
            colGrupo := colGrupo + 'codi';
            StringGrid1.Cells[i,k] := stringreplace(StringGrid1.Cells[i,k], '.', '',[rfReplaceAll, rfIgnoreCase]);
            dadosGrupo := dadosGrupo + '''' + StringGrid1.Cells[i,k] + '''';
          end
          else begin
            colGrupo := colGrupo + 'codi';
            dadosGrupo := dadosGrupo + 'gen_id(gen_grup_prod_id,1)';
          end;

          //Empresa é obrigatório, se não tiver preenche com 1
          //EMPR (EMPRESA)
          i:=BuscaColuna(StringGrid1,'empr');
          if (i<>-1) then
          begin
            colGrupo := colGrupo + ',empr';
            dadosGrupo := dadosGrupo + ',''' + StringGrid1.Cells[i,k] + '''';
          end
          else begin
            colGrupo := colGrupo + ',empr';
            dadosGrupo := dadosGrupo + ',''' + '1' + '''';
          end;


          for i := 0 to StringGrid1.ColCount-1 do
          begin
            //DESCR (DESCRICAO)
            if (LowerCase(StringGrid1.Cells[i,0])='descr') then
            begin
              colGrupo := colGrupo + ',descr';
              temp := UpperCase(RemoveAcento(StringGrid1.Cells[i,k]));
              temp := stringreplace(temp, '''', ' ',[rfReplaceAll, rfIgnoreCase]);
              temp := (Copy(temp,1,30));
              dadosGrupo := dadosGrupo + ',''' + temp + '''';
            end
            ;

          //Fim do For das colunas
          end;

          //----------------------------------------
          //Gravar no banco de GRUP_PROD
          if UpperCase( ExtractFileExt(DBPath.Text) ) = '.FDB' then begin
            try
              try
                //Abrir conexoes
                conDestino.Open;
                SQL := TSQLDataSet.Create(Nil);
                SQL.SQLConnection := conDestino;

                //Executar INSERT
                frmImportando.atualizaStatus('Inserindo dados na tabela GRUP_PROD.');
                SQL.CommandText := 'insert into grup_prod ('+ colGrupo +') values ' + '(' + dadosGrupo + ');';
                SQL.ExecSQL;

              except
                on e: exception do
                begin
                  ShowMessage('Erro SQL: '+e.message+sLineBreak+SQL.CommandText);
                  status := 0;
                  break; //Quebra o for
                end;
              end;

            finally
              SQL.Free;
              conDestino.Close;
            end;
          end
          //Gravar comandos em TXT
          else if (UpperCase( ExtractFileExt(DBPath.Text) ) = '.TXT') or
                  (UpperCase( ExtractFileExt(DBPath.Text) ) = '.SQL')
          then begin
            try
              try
                //Carregar arquivo TXT
                AssignFile(fileTXT, DBPath.Text);
                if not FileExists(DBPath.Text) then ReWrite(fileTXT)
                else append(fileTXT);

                frmImportando.atualizaStatus('Comandos da GRUP_PROD.');
                WriteLn(fileTXT, '----------Comandos da GRUP_PROD----------');

                WriteLn(fileTXT, 'insert into grup_prod ('+ colGrupo +') values ' + '(' + dadosGrupo + ');');
                WriteLn(fileTXT, 'COMMIT WORK;');
              except
                on e: exception do
                begin
                  ShowMessage('Erro TXT: '+e.message);
                  status := 0;
                  CloseFile(fileTXT);
                  break; //Quebra o for
                end;
              end;
            finally
              CloseFile(fileTXT);
            end;
          end;

        end

        //----------------------------------------------------------------------------
        //Importar SubGrupos
        else if SelectImport.Text = 'SubGrupos' then
        begin
          //ShowMessage('Importar SubGrupos');

          frmImportando.atualizaStatus('SubGrupo '+IntToStr(k));

          colSubGrupo := '';
          dadosSubGrupo := '';

          //Carregar informações para importar
          //-------------------------------------------------------

          //Codigo é obrigatório, se não tiver preenche com o generator
          //CODI (CODIGO)
          i:=BuscaColuna(StringGrid1,'codi');
          if (i<>-1) then
          begin
            colSubGrupo := colSubGrupo + 'codi';
            StringGrid1.Cells[i,k] := stringreplace(StringGrid1.Cells[i,k], '.', '',[rfReplaceAll, rfIgnoreCase]);
            dadosSubGrupo := dadosSubGrupo + '''' + StringGrid1.Cells[i,k] + '''';
          end
          else begin
            colSubGrupo := colSubGrupo + 'codi';
            dadosSubGrupo := dadosSubGrupo + 'gen_id(gen_sub_grup_prod_id,1)';
          end;

          //Empresa é obrigatório, se não tiver preenche com 1
          //EMPR (EMPRESA)
          i:=BuscaColuna(StringGrid1,'empr');
          if (i<>-1) then
          begin
            colSubGrupo := colSubGrupo + ',empr';
            dadosSubGrupo := dadosSubGrupo + ',''' + StringGrid1.Cells[i,k] + '''';
          end
          else begin
            colSubGrupo := colSubGrupo + ',empr';
            dadosSubGrupo := dadosSubGrupo + ',''' + '1' + '''';
          end;


          for i := 0 to StringGrid1.ColCount-1 do
          begin
            //DESCR (DESCRICAO)
            if (LowerCase(StringGrid1.Cells[i,0])='descr') then
            begin
              colSubGrupo := colSubGrupo + ',descr';
              temp := UpperCase(RemoveAcento(StringGrid1.Cells[i,k]));
              temp := stringreplace(temp, '''', ' ',[rfReplaceAll, rfIgnoreCase]);
              temp := (Copy(temp,1,30));
              dadosSubGrupo := dadosSubGrupo + ',''' + temp + '''';
            end
            ;

          //Fim do For das colunas
          end;

          //----------------------------------------
          //Gravar no banco de SUB_GRUP_PROD
          if UpperCase( ExtractFileExt(DBPath.Text) ) = '.FDB' then begin
            try
              try
                //Abrir conexoes
                conDestino.Open;
                SQL := TSQLDataSet.Create(Nil);
                SQL.SQLConnection := conDestino;

                //Executar INSERT
                frmImportando.atualizaStatus('Inserindo dados na tabela SUB_GRUP_PROD.');
                SQL.CommandText := 'insert into sub_grup_prod ('+ colSubGrupo +') values ' + '(' + dadosSubGrupo + ');';
                SQL.ExecSQL;

              except
                on e: exception do
                begin
                  ShowMessage('Erro SQL: '+e.message+sLineBreak+SQL.CommandText);
                  status := 0;
                  break; //Quebra o for
                end;
              end;

            finally
              SQL.Free;
              conDestino.Close;
            end;
          end
          //Gravar comandos em TXT
          else if (UpperCase( ExtractFileExt(DBPath.Text) ) = '.TXT') or
                  (UpperCase( ExtractFileExt(DBPath.Text) ) = '.SQL')
          then begin
            try
              try
                //Carregar arquivo TXT
                AssignFile(fileTXT, DBPath.Text);
                if not FileExists(DBPath.Text) then ReWrite(fileTXT)
                else append(fileTXT);

                frmImportando.atualizaStatus('Comandos da SUB_GRUP_PROD.');
                WriteLn(fileTXT, '----------Comandos da SUB_GRUP_PROD----------');

                WriteLn(fileTXT, 'insert into sub_grup_prod ('+ colSubGrupo +') values ' + '(' + dadosSubGrupo + ');');
                WriteLn(fileTXT, 'COMMIT WORK;');
              except
                on e: exception do
                begin
                  ShowMessage('Erro TXT: '+e.message);
                  status := 0;
                  CloseFile(fileTXT);
                  break; //Quebra o for
                end;
              end;
            finally
              CloseFile(fileTXT);
            end;
          end;

        end

        //----------------------------------------------------------------------------
        //Importar Marcas
        else if SelectImport.Text = 'Marcas' then
        begin
          //ShowMessage('Importar Marcas');

          frmImportando.atualizaStatus('Marca '+IntToStr(k));

          colMarca := '';
          dadosMarca := '';

          //Carregar informações para importar
          //-------------------------------------------------------

          //Codigo é obrigatório, se não tiver preenche com o generator
          //CODI (CODIGO)
          i:=BuscaColuna(StringGrid1,'codi');
          if (i<>-1) then
          begin
            colMarca := colMarca + 'codi';
            StringGrid1.Cells[i,k] := stringreplace(StringGrid1.Cells[i,k], '.', '',[rfReplaceAll, rfIgnoreCase]);
            dadosMarca := dadosMarca + '''' + StringGrid1.Cells[i,k] + '''';
          end
          else begin
            colMarca := colMarca + 'codi';
            dadosMarca := dadosMarca + 'gen_id(gen_marca_id,1)';
          end;


          for i := 0 to StringGrid1.ColCount-1 do
          begin
            //DESCR (DESCRICAO)
            if (LowerCase(StringGrid1.Cells[i,0])='descr') then
            begin
              colMarca := colMarca + ',descr';
              temp := UpperCase(RemoveAcento(StringGrid1.Cells[i,k]));
              temp := stringreplace(temp, '''', ' ',[rfReplaceAll, rfIgnoreCase]);
              temp := (Copy(temp,1,30));
              dadosMarca := dadosMarca + ',''' + temp + '''';
            end
            ;

          //Fim do For das colunas
          end;

          //----------------------------------------
          //Gravar no banco de MARCA
          if UpperCase( ExtractFileExt(DBPath.Text) ) = '.FDB' then begin
            try
              try
                //Abrir conexoes
                conDestino.Open;
                SQL := TSQLDataSet.Create(Nil);
                SQL.SQLConnection := conDestino;

                //Executar INSERT
                frmImportando.atualizaStatus('Inserindo dados na tabela MARCA.');
                SQL.CommandText := 'insert into marca ('+ colMarca +') values ' + '(' + dadosMarca + ');';
                SQL.ExecSQL;

              except
                on e: exception do
                begin
                  ShowMessage('Erro SQL: '+e.message+sLineBreak+SQL.CommandText);
                  status := 0;
                  break; //Quebra o for
                end;
              end;

            finally
              SQL.Free;
              conDestino.Close;
            end;
          end
          //Gravar comandos em TXT
          else if (UpperCase( ExtractFileExt(DBPath.Text) ) = '.TXT') or
                  (UpperCase( ExtractFileExt(DBPath.Text) ) = '.SQL')
          then begin
            try
              try
                //Carregar arquivo TXT
                AssignFile(fileTXT, DBPath.Text);
                if not FileExists(DBPath.Text) then ReWrite(fileTXT)
                else append(fileTXT);

                frmImportando.atualizaStatus('Comandos da MARCA.');
                WriteLn(fileTXT, '----------Comandos da MARCA----------');

                WriteLn(fileTXT, 'insert into marca ('+ colMarca +') values ' + '(' + dadosMarca + ');');
                WriteLn(fileTXT, 'COMMIT WORK;');
              except
                on e: exception do
                begin
                  ShowMessage('Erro TXT: '+e.message);
                  status := 0;
                  CloseFile(fileTXT);
                  break; //Quebra o for
                end;
              end;
            finally
              CloseFile(fileTXT);
            end;
          end;

        end

        //----------------------------------------------------------------------------
        //Importar Títulos a Pagar
        else if SelectImport.Text = 'Títulos a Pagar' then
        begin
          //ShowMessage('Importar Títulos a Pagar');

          frmImportando.atualizaStatus('Títulos a Pagar '+IntToStr(k));

          colTituP := '';
          dadosTituP := '';
          colBTitu := '';
          dadosBTitu := '';

          //Carregar informações para importar
          //-------------------------------------------------------

          //CODI (CODIGO)
          i:=BuscaColuna(StringGrid1,'codi');
          if (i<>-1) then
          begin
            StringGrid1.Cells[i,k] := stringreplace(StringGrid1.Cells[i,k], '.', '',[rfReplaceAll, rfIgnoreCase]);
            StringGrid1.Cells[i,k] := (Copy(StringGrid1.Cells[i,k],1,12));
            l := Length(StringGrid1.Cells[i,k]);
            //Testar se ja existir o código do título e inserir uma barra.
            count := 0;
            while (temCodTituloP(StringGrid1.Cells[i,k]) = True) do
            begin
              for j := 1 to count do
              begin
                StringGrid1.Cells[i,k] := stringreplace(StringGrid1.Cells[i,k], '/'+IntToStr(j), '',[rfReplaceAll, rfIgnoreCase]);
                StringGrid1.Cells[i,k] := (Copy(StringGrid1.Cells[i,k],1,l));
              end;

              count := count+1;
              StringGrid1.Cells[i,k] := StringGrid1.Cells[i,k] + '/' + IntToStr(count);
            end;

            colTituP := colTituP + 'codi';
            dadosTituP := dadosTituP + '''' + StringGrid1.Cells[i,k] + '''';
            colBTitu := colBTitu + 'codi';
            dadosBTitu := dadosBTitu + '''' + StringGrid1.Cells[i,k] + '''';
          end
          else begin
            colTituP := colTituP + 'codi';
            dadosTituP := dadosTituP + IntToStr(k);
            colBTitu := colBTitu + 'codi';
            dadosBTitu := dadosBTitu + IntToStr(k);
          end;

          //EMPR (EMPRESA)
          i:=BuscaColuna(StringGrid1,'empr');
          if (i<>-1) then
          begin
            colTituP := colTituP + ',empr';
            dadosTituP := dadosTituP + ',''' + StringGrid1.Cells[i,k] + '''';
            colBTitu := colBTitu + ',empr';
            dadosBTitu := dadosBTitu + ',''' + StringGrid1.Cells[i,k] + '''';
          end
          else begin
            colTituP := colTituP + ',empr';
            dadosTituP := dadosTituP + ',1';
            colBTitu := colBTitu + ',empr';
            dadosBTitu := dadosBTitu + ',1';
          end;

          //FORN (FORNECEDOR)
          i:=BuscaColuna(StringGrid1,'forn');
          if (i<>-1) then
          begin
            temp := UpperCase(RemoveAcento(StringGrid1.Cells[i,k]));
            temp := stringreplace(temp, '''', ' ',[rfReplaceAll, rfIgnoreCase]);
            temp := (Copy(temp,1,60));
            //Se for letras, buscar código.
            if not (IsNumeric(temp)) then
            begin
              temp2 := IntToStr(getCodiClieForn(''''+temp+''''));
              //Se não encontrar a string, cadastrar fornecedor
              if temp2='0' then begin
                temp2 := IntToStr(cadastraClieForn('nome',''''+temp+''''));
              end;
              colTituP := colTituP + ',forn';
              dadosTituP := dadosTituP + ',''' + temp2 + '''';
              colBTitu := colBTitu + ',forn';
              dadosBTitu := dadosBTitu + ',''' + temp2 + '''';
            end
            else begin
              //Se for números, considera como código
              temp2 := IntToStr(getCodiClieForn('(select c.nome from clieforn c where c.codi = '+temp+')'));
              //Antes buscamos se existe o código cadastrado, se não encontrar colocamos o generator mesmo
              if temp2='0' then begin
                colTituP := colTituP + ',forn';
                dadosTituP := dadosTituP + ',' + 'gen_id(gen_clieforn_id,0)';
                colBTitu := colBTitu + ',forn';
                dadosBTitu := dadosBTitu + ',' + 'gen_id(gen_clieforn_id,0)';
              end
              else begin
                //Se achar o código, usamos o código
                colTituP := colTituP + ',forn';
                dadosTituP := dadosTituP + ',''' + temp + '''';
                colBTitu := colBTitu + ',forn';
                dadosBTitu := dadosBTitu + ',''' + temp + '''';
              end;
            end;
          end
          else begin
            //Se não tiver fornecedor, colocar o generator.
            colTituP := colTituP + ',forn';
            dadosTituP := dadosTituP + ',' + 'gen_id(gen_clieforn_id,0)';
            colBTitu := colBTitu + ',forn';
            dadosBTitu := dadosBTitu + ',' + 'gen_id(gen_clieforn_id,0)';
          end;

          //LOCA_COBR (LOCAL DE COBRANÇA)
          i:=BuscaColuna(StringGrid1,'loca_cobr');
          if (i<>-1) then
          begin
            colTituP := colTituP + ',loca_cobr';
            dadosTituP := dadosTituP + ',''' + StringGrid1.Cells[i,k] + '''';
          end
          else begin
            colTituP := colTituP + ',loca_cobr';
            dadosTituP := dadosTituP + ',''' + '1' + '''';
          end;

          //CART (TIPO DE CARTEIRA)
          i:=BuscaColuna(StringGrid1,'cart');
          if (i<>-1) then
          begin
            colTituP := colTituP + ',cart';
            dadosTituP := dadosTituP + ',''' + StringGrid1.Cells[i,k] + '''';
          end
          else begin
            colTituP := colTituP + ',cart';
            dadosTituP := dadosTituP + ',''' + '1' + '''';
          end;

          //OPER (OPERAÇÃO DO PLANO DE CONTAS)
          i:=BuscaColuna(StringGrid1,'oper');
          if (i<>-1) then
          begin
            colTituP := colTituP + ',oper';
            dadosTituP := dadosTituP + ',''' + StringGrid1.Cells[i,k] + '''';
            colBTitu := colBTitu + ',oper';
            dadosBTitu := dadosBTitu + ',''' + StringGrid1.Cells[i,k] + '''';
          end
          else begin
            colTituP := colTituP + ',oper';
            dadosTituP := dadosTituP + ',''' + '101' + '''';
            colBTitu := colBTitu + ',oper';
            dadosBTitu := dadosBTitu + ',''' + '101' + '''';
          end;

          //C_FUNC (FUNCIONÁRIO)
          i:=BuscaColuna(StringGrid1,'c_func');
          if (i<>-1) then
          begin
            colTituP := colTituP + ',c_func';
            dadosTituP := dadosTituP + ',''' + StringGrid1.Cells[i,k] + '''';
            colBTitu := colBTitu + ',c_func';
            dadosBTitu := dadosBTitu + ',''' + StringGrid1.Cells[i,k] + '''';
          end
          else begin
            colTituP := colTituP + ',c_func';
            dadosTituP := dadosTituP + ',''' + '1' + '''';
            colBTitu := colBTitu + ',c_func';
            dadosBTitu := dadosBTitu + ',''' + '1' + '''';
          end;


          for i := 0 to StringGrid1.ColCount-1 do
          begin
            //DATA (Data de criação do título)
            if (LowerCase(StringGrid1.Cells[i,0])='data') then
            begin
              temp := Trim(StringGrid1.Cells[i,k]);
              temp := stringreplace(temp, '-', '',[rfReplaceAll, rfIgnoreCase]);
              temp := stringreplace(temp, '/', '',[rfReplaceAll, rfIgnoreCase]);
              temp := stringreplace(temp, '.', '',[rfReplaceAll, rfIgnoreCase]);
              if temp.Length >= 8 then
              begin
                temp := (Copy(temp,1,2)) +'.'+ (Copy(temp,3,2)) +'.'+ (Copy(temp,5,4));
                colTituP := colTituP + ',data';
                dadosTituP := dadosTituP + ',''' + temp + '''';
              end
              else if temp.Length = 6 then begin
                temp2 := (Copy(DateToStr(Date()),9,2));
                //Testa os dois ultimos caracteres da data atual com data do titulo
                //Se os caracteres da data do titulo forem maiores, significa que é um século antes
                if StrToInt(temp2)<StrToInt(Copy(temp,5,2)) then temp2 := IntToStr(StrToInt(temp2)-1);
                temp := (Copy(temp,1,2)) +'.'+ (Copy(temp,3,2)) +'.'+ temp2 + (Copy(temp,5,2));
                colTituP := colTituP + ',data';
                dadosTituP := dadosTituP + ',''' + temp + '''';
              end;
            end
            //VENC (Data de vencimento do título)
            else if (LowerCase(StringGrid1.Cells[i,0])='venc') then
            begin
              temp := Trim(StringGrid1.Cells[i,k]);
              temp := stringreplace(temp, '-', '',[rfReplaceAll, rfIgnoreCase]);
              temp := stringreplace(temp, '/', '',[rfReplaceAll, rfIgnoreCase]);
              temp := stringreplace(temp, '.', '',[rfReplaceAll, rfIgnoreCase]);
              if temp.Length >= 8 then
              begin
                temp := (Copy(temp,1,2)) +'.'+ (Copy(temp,3,2)) +'.'+ (Copy(temp,5,4));
                colTituP := colTituP + ',venc';
                dadosTituP := dadosTituP + ',''' + temp + '''';
              end
              else if temp.Length = 6 then begin
                temp2 := (Copy(DateToStr(Date()),9,2));
                //Testa os dois ultimos caracteres da data atual com data do titulo
                //Se os caracteres da data do titulo forem maiores, significa que é um século antes
                if StrToInt(temp2)<StrToInt(Copy(temp,5,2)) then temp2 := IntToStr(StrToInt(temp2)-1);
                temp := (Copy(temp,1,2)) +'.'+ (Copy(temp,3,2)) +'.'+ temp2 + (Copy(temp,5,2));
                colTituP := colTituP + ',venc';
                dadosTituP := dadosTituP + ',''' + temp + '''';
              end;
            end
            //VALO (Valor do título)
            else if (LowerCase(StringGrid1.Cells[i,0])='valo') then
            begin
              if StringGrid1.Cells[i,k]='' then
              begin
                temp := '0.0';
              end
              else begin
                temp := StringGrid1.Cells[i,k];
              end;
              temp := corrigeFloat(temp);
              colTituP := colTituP + ',valo';
              dadosTituP := dadosTituP + ',' + temp;
              colBTitu := colBTitu + ',valo';
              dadosBTitu := dadosBTitu + ',' + temp;
              colBTitu := colBTitu + ',tota';
              dadosBTitu := dadosBTitu + ',' + temp;

              //Testar se não existe coluna saldo, se não existir joga o valor da VALO
              count:=BuscaColuna(StringGrid1,'sald');
              if (count=-1) then
              begin
                colTituP := colTituP + ',sald';
                if StringGrid1.Cells[i,k]='' then
                begin
                  temp2 := '0.0';
                end
                else begin
                  temp2 := StringGrid1.Cells[i,k];
                end;
                temp2 := corrigeFloat(temp2);
                dadosTituP := dadosTituP + ',' + temp2;
                temp2 := stringreplace(temp2, '.', ',',[rfReplaceAll, rfIgnoreCase]);
                saldo := StrToFloat(temp2);
              end;
            end
            //SALDO (Saldo do título)
            else if (LowerCase(StringGrid1.Cells[i,0])='sald') then
            begin
              colTituP := colTituP + ',sald';
              if StringGrid1.Cells[i,k]='' then
              begin
                temp := '0.0';
              end
              else begin
                temp := StringGrid1.Cells[i,k];
              end;
              temp := corrigeFloat(temp);
              dadosTituP := dadosTituP + ',' + temp;
              temp := stringreplace(temp, '.', ',',[rfReplaceAll, rfIgnoreCase]);
              saldo := StrToFloat(temp);

              //Testar se não existe coluna valo, se não existir joga o valor da SALD
              count:=BuscaColuna(StringGrid1,'valo');
              if (count=-1) then
              begin
                if StringGrid1.Cells[i,k]='' then
                begin
                  temp2 := '0.0';
                end
                else begin
                  temp2 := StringGrid1.Cells[i,k];
                end;
                temp := corrigeFloat(temp);
                colTituP := colTituP + ',valo';
                dadosTituP := dadosTituP + ',' + temp2;
                colBTitu := colBTitu + ',valo';
                dadosBTitu := dadosBTitu + ',' + temp2;
                colBTitu := colBTitu + ',tota';
                dadosBTitu := dadosBTitu + ',' + temp2;
              end;
            end
            //HIST (HISTORICO)
            else if (LowerCase(StringGrid1.Cells[i,0])='hist') then
            begin
              temp := UpperCase(RemoveAcento(StringGrid1.Cells[i,k]));
              temp := stringreplace(temp, '''', ' ',[rfReplaceAll, rfIgnoreCase]);
              temp := (Copy(temp,1,150));
              colTituP := colTituP + ',hist';
              dadosTituP := dadosTituP + ',''' + temp + '''';
              colBTitu := colBTitu + ',hist';
              dadosBTitu := dadosBTitu + ',''' + temp + '''';
            end

            //Colunas extras para BTITUP
            //DATA_BAIXA (DATA DA BAIXA)
            else if (LowerCase(StringGrid1.Cells[i,0])='data_baixa') then
            begin
              colBTitu := colBTitu + ',data';
              temp := Trim(StringGrid1.Cells[i,k]);
              temp := stringreplace(temp, '-', '',[rfReplaceAll, rfIgnoreCase]);
              temp := stringreplace(temp, '/', '',[rfReplaceAll, rfIgnoreCase]);
              temp := stringreplace(temp, '.', '',[rfReplaceAll, rfIgnoreCase]);
              if temp.Length >= 8 then
              begin
                temp := (Copy(temp,1,2)) +'.'+ (Copy(temp,3,2)) +'.'+ (Copy(temp,5,4));
                dadosBTitu := dadosBTitu + ',''' + temp + '''';
              end
              else if temp.Length = 6 then begin
                temp2 := (Copy(DateToStr(Date()),9,2));
                //Testa os dois ultimos caracteres da data atual com data do titulo
                //Se os caracteres da data do titulo forem maiores, significa que é um século antes
                if StrToInt(temp2)<StrToInt(Copy(temp,5,2)) then temp2 := IntToStr(StrToInt(temp2)-1);
                temp := (Copy(temp,1,2)) +'.'+ (Copy(temp,3,2)) +'.'+ temp2 + (Copy(temp,5,2));
                dadosBTitu := dadosBTitu + ',''' + temp + '''';
              end;
            end
            ;

          //Fim do For das colunas
          end;

          //ID (ID DA BTITUP)
          colBTitu := colBTitu + ',id';
          dadosBTitu := dadosBTitu + ',' + 'gen_id(gen_btitup_id,1)';
          //JURO (JUROS)
          colBTitu := colBTitu + ',juro';
          dadosBTitu := dadosBTitu + ',''' + '0.0' + '''';
          //MULT (MULTA)
          colBTitu := colBTitu + ',mult';
          dadosBTitu := dadosBTitu + ',''' + '0.0' + '''';
          //DESCO (DESCONTO)
          colBTitu := colBTitu + ',desco';
          dadosBTitu := dadosBTitu + ',''' + '0.0' + '''';
          //CONT (CONTA)
          colBTitu := colBTitu + ',cont';
          dadosBTitu := dadosBTitu + ',''' + '1' + '''';
          //EMPR_BAIX (EMPRESA ONDE O TÍTULO FOI BAIXADO)
          colBTitu := colBTitu + ',empr_baix';
          dadosBTitu := dadosBTitu + ',''' + '1' + '''';

          //----------------------------------------
          //Gravar no banco de Títulos a Pagar
          if UpperCase( ExtractFileExt(DBPath.Text) ) = '.FDB' then begin
            try
              try
                //Abrir conexoes
                conDestino.Open;
                SQL := TSQLDataSet.Create(Nil);
                SQL.SQLConnection := conDestino;

                //Executar INSERT
                frmImportando.atualizaStatus('Inserindo dados na tabela TITUP.');
                SQL.CommandText := 'insert into titup ('+ colTituP +') values ' + '(' + dadosTituP + ');';
                SQL.ExecSQL;

                if saldo <= 0.0 then begin
                  //Inserir na BTITUP
                  frmImportando.atualizaStatus('Inserindo dados na tabela BTITUP.');
                  SQL.CommandText := 'insert into btitup ('+ colBTitu +') values ' + '(' + dadosBTitu +');';
                  SQL.ExecSQL;
                end;

              except
                on e: exception do
                begin
                  ShowMessage('Erro SQL: '+e.message+sLineBreak+SQL.CommandText);
                  status := 0;
                  break; //Quebra o for
                end;
              end;

            finally
              SQL.Free;
              conDestino.Close;
            end;
          end
          //Gravar comandos em TXT
          else if (UpperCase( ExtractFileExt(DBPath.Text) ) = '.TXT') or
                  (UpperCase( ExtractFileExt(DBPath.Text) ) = '.SQL')
          then begin
            try
              try
                //Carregar arquivo TXT
                AssignFile(fileTXT, DBPath.Text);
                if not FileExists(DBPath.Text) then ReWrite(fileTXT)
                else append(fileTXT);

                frmImportando.atualizaStatus('Comandos da TITUP.');
                WriteLn(fileTXT, '----------Comandos da TITUP----------');

                WriteLn(fileTXT, 'insert into TITUP ('+ colMarca +') values ' + '(' + dadosMarca + ');');
                WriteLn(fileTXT, 'COMMIT WORK;');

                if saldo <= 0.0 then begin
                  //Inserir na BTITUP
                  frmImportando.atualizaStatus('Comandos BTITUP.');
                  WriteLn(fileTXT, '----------Comandos da BTITUP----------');
                  WriteLn(fileTXT, 'insert into btitup ('+ colBTitu +') values ' + '(' + dadosBTitu +');');
                  WriteLn(fileTXT, 'COMMIT WORK;');
                end;
              except
                on e: exception do
                begin
                  ShowMessage('Erro TXT: '+e.message);
                  status := 0;
                  CloseFile(fileTXT);
                  break; //Quebra o for
                end;
              end;
            finally
              CloseFile(fileTXT);
            end;
          end;

        end

        //----------------------------------------------------------------------------
        //Importar Títulos a Receber
        else if SelectImport.Text = 'Títulos a Receber' then
        begin
          //ShowMessage('Importar Títulos a Receber');

          frmImportando.atualizaStatus('Títulos a Receber '+IntToStr(k));

          colTituR := '';
          dadosTituR := '';
          colBTitu := '';
          dadosBTitu := '';

          //Carregar informações para importar
          //-------------------------------------------------------

          //CODI (CODIGO)
          i:=BuscaColuna(StringGrid1,'codi');
          if (i<>-1) then
          begin
            StringGrid1.Cells[i,k] := stringreplace(StringGrid1.Cells[i,k], '.', '',[rfReplaceAll, rfIgnoreCase]);
            StringGrid1.Cells[i,k] := (Copy(StringGrid1.Cells[i,k],1,12));
            l := Length(StringGrid1.Cells[i,k]);
            //Testar se ja existir o código do título e inserir uma barra.
            count := 0;
            while (temCodTituloR(StringGrid1.Cells[i,k]) = True) do
            begin
              for j := 1 to count do
              begin
                StringGrid1.Cells[i,k] := stringreplace(StringGrid1.Cells[i,k], '/'+IntToStr(j), '',[rfReplaceAll, rfIgnoreCase]);
                StringGrid1.Cells[i,k] := (Copy(StringGrid1.Cells[i,k],1,l));
              end;

              count := count+1;
              StringGrid1.Cells[i,k] := StringGrid1.Cells[i,k] + '/' + IntToStr(count);
            end;

            colTituR := colTituR + 'codi';
            dadosTituR := dadosTituR + '''' + StringGrid1.Cells[i,k] + '''';
            colBTitu := colBTitu + 'codi';
            dadosBTitu := dadosBTitu + '''' + StringGrid1.Cells[i,k] + '''';
          end
          else begin
            colTituR := colTituR + 'codi';
            dadosTituR := dadosTituR + IntToStr(k);
            colBTitu := colBTitu + 'codi';
            dadosBTitu := dadosBTitu + IntToStr(k);
          end;

          //EMPR (EMPRESA)
          i:=BuscaColuna(StringGrid1,'empr');
          if (i<>-1) then
          begin
            colTituR := colTituR + ',empr';
            dadosTituR := dadosTituR + ',''' + StringGrid1.Cells[i,k] + '''';
            colBTitu := colBTitu + ',empr';
            dadosBTitu := dadosBTitu + ',''' + StringGrid1.Cells[i,k] + '''';
          end
          else begin
            colTituR := colTituR + ',empr';
            dadosTituR := dadosTituR + ',1';
            colBTitu := colBTitu + ',empr';
            dadosBTitu := dadosBTitu + ',1';
          end;

          //CLIE (CLIENTE)
          i:=BuscaColuna(StringGrid1,'clie');
          if (i<>-1) then
          begin
            temp := UpperCase(RemoveAcento(StringGrid1.Cells[i,k]));
            temp := stringreplace(temp, '''', ' ',[rfReplaceAll, rfIgnoreCase]);
            temp := (Copy(temp,1,60));
            //Se for letras, buscar código.
            if not (IsNumeric(temp)) then
            begin
              temp2 := IntToStr(getCodiClieForn(''''+temp+''''));
              //Se não encontrar a string, cadastrar cliente
              if temp2='0' then begin
                temp2 := IntToStr(cadastraClieForn('nome',''''+temp+''''));
              end;
              colTituR := colTituR + ',clie';
              dadosTituR := dadosTituR + ',''' + temp2 + '''';
              colBTitu := colBTitu + ',clie';
              dadosBTitu := dadosBTitu + ',''' + temp2 + '''';
            end
            else begin
              //Se for números, considera como código
              temp2 := IntToStr(getCodiClieForn('(select c.nome from clieforn c where c.codi = '+temp+')'));
              //Antes buscamos se existe o código cadastrado, se não encontrar colocamos o generator mesmo
              if temp2='0' then begin
                colTituR := colTituR + ',clie';
                dadosTituR := dadosTituR + ',' + 'gen_id(gen_clieforn_id,0)';
                colBTitu := colBTitu + ',clie';
                dadosBTitu := dadosBTitu + ',' + 'gen_id(gen_clieforn_id,0)';
              end
              else begin
                //Se achar o código, usamos o código
                colTituR := colTituR + ',clie';
                dadosTituR := dadosTituR + ',''' + temp + '''';
                colBTitu := colBTitu + ',clie';
                dadosBTitu := dadosBTitu + ',''' + temp + '''';
              end;
            end;
          end
          else begin
            //Se não tiver fornecedor, colocar o generator.
            colTituR := colTituR + ',clie';
            dadosTituR := dadosTituR + ',' + 'gen_id(gen_clieforn_id,0)';
            colBTitu := colBTitu + ',clie';
            dadosBTitu := dadosBTitu + ',' + 'gen_id(gen_clieforn_id,0)';
          end;

          //LOCA_COBR (LOCAL DE COBRANÇA)
          i:=BuscaColuna(StringGrid1,'loca_cobr');
          if (i<>-1) then
          begin
            colTituR := colTituR + ',loca_cobr';
            dadosTituR := dadosTituR + ',''' + StringGrid1.Cells[i,k] + '''';
          end
          else begin
            colTituR := colTituR + ',loca_cobr';
            dadosTituR := dadosTituR + ',''' + '1' + '''';
          end;

          //CART (TIPO DE CARTEIRA)
          i:=BuscaColuna(StringGrid1,'cart');
          if (i<>-1) then
          begin
            colTituR := colTituR + ',cart';
            dadosTituR := dadosTituR + ',''' + StringGrid1.Cells[i,k] + '''';
          end
          else begin
            colTituR := colTituR + ',cart';
            dadosTituR := dadosTituR + ',''' + '1' + '''';
          end;

          //OPER (OPERAÇÃO DO PLANO DE CONTAS)
          i:=BuscaColuna(StringGrid1,'oper');
          if (i<>-1) then
          begin
            colTituR := colTituR + ',oper';
            dadosTituR := dadosTituR + ',''' + StringGrid1.Cells[i,k] + '''';
            colBTitu := colBTitu + ',oper';
            dadosBTitu := dadosBTitu + ',''' + StringGrid1.Cells[i,k] + '''';
          end
          else begin
            colTituR := colTituR + ',oper';
            dadosTituR := dadosTituR + ',''' + '002' + '''';
            colBTitu := colBTitu + ',oper';
            dadosBTitu := dadosBTitu + ',''' + '002' + '''';
          end;

          //C_FUNC (FUNCIONÁRIO)
          i:=BuscaColuna(StringGrid1,'c_func');
          if (i<>-1) then
          begin
            colTituR := colTituR + ',c_func';
            dadosTituR := dadosTituR + ',''' + StringGrid1.Cells[i,k] + '''';
            colBTitu := colBTitu + ',c_func';
            dadosBTitu := dadosBTitu + ',''' + StringGrid1.Cells[i,k] + '''';
          end
          else begin
            colTituR := colTituR + ',c_func';
            dadosTituR := dadosTituR + ',''' + '1' + '''';
            colBTitu := colBTitu + ',c_func';
            dadosBTitu := dadosBTitu + ',''' + '1' + '''';
          end;


          for i := 0 to StringGrid1.ColCount-1 do
          begin
            //DATA (Data de criação do título)
            if (LowerCase(StringGrid1.Cells[i,0])='data') then
            begin
              temp := Trim(StringGrid1.Cells[i,k]);
              temp := stringreplace(temp, '-', '',[rfReplaceAll, rfIgnoreCase]);
              temp := stringreplace(temp, '/', '',[rfReplaceAll, rfIgnoreCase]);
              temp := stringreplace(temp, '.', '',[rfReplaceAll, rfIgnoreCase]);
              if temp.Length >= 8 then
              begin
                temp := (Copy(temp,1,2)) +'.'+ (Copy(temp,3,2)) +'.'+ (Copy(temp,5,4));
                colTituR := colTituR + ',data';
                dadosTituR := dadosTituR + ',''' + temp + '''';
              end
              else if temp.Length = 6 then begin
                temp2 := (Copy(DateToStr(Date()),9,2));
                //Testa os dois ultimos caracteres da data atual com data do titulo
                //Se os caracteres da data do titulo forem maiores, significa que é um século antes
                if StrToInt(temp2)<StrToInt(Copy(temp,5,2)) then temp2 := IntToStr(StrToInt(temp2)-1);
                temp := (Copy(temp,1,2)) +'.'+ (Copy(temp,3,2)) +'.'+ temp2 + (Copy(temp,5,2));
                colTituR := colTituR + ',data';
                dadosTituR := dadosTituR + ',''' + temp + '''';
              end;
            end
            //VENC (Data de vencimento do título)
            else if (LowerCase(StringGrid1.Cells[i,0])='venc') then
            begin
              temp := Trim(StringGrid1.Cells[i,k]);
              temp := stringreplace(temp, '-', '',[rfReplaceAll, rfIgnoreCase]);
              temp := stringreplace(temp, '/', '',[rfReplaceAll, rfIgnoreCase]);
              temp := stringreplace(temp, '.', '',[rfReplaceAll, rfIgnoreCase]);
              if temp.Length >= 8 then
              begin
                temp := (Copy(temp,1,2)) +'.'+ (Copy(temp,3,2)) +'.'+ (Copy(temp,5,4));
                colTituR := colTituR + ',venc';
                dadosTituR := dadosTituR + ',''' + temp + '''';
              end
              else if temp.Length = 6 then begin
                temp2 := (Copy(DateToStr(Date()),9,2));
                //Testa os dois ultimos caracteres da data atual com data do titulo
                //Se os caracteres da data do titulo forem maiores, significa que é um século antes
                if StrToInt(temp2)<StrToInt(Copy(temp,5,2)) then temp2 := IntToStr(StrToInt(temp2)-1);
                temp := (Copy(temp,1,2)) +'.'+ (Copy(temp,3,2)) +'.'+ temp2 + (Copy(temp,5,2));
                colTituR := colTituR + ',venc';
                dadosTituR := dadosTituR + ',''' + temp + '''';
              end;
            end
            //VALO (Valor do título)
            else if (LowerCase(StringGrid1.Cells[i,0])='valo') then
            begin
              if StringGrid1.Cells[i,k]='' then
              begin
                temp := '0.0';
              end
              else begin
                temp := StringGrid1.Cells[i,k];
              end;
              temp := corrigeFloat(temp);
              colTituR := colTituR + ',valo';
              dadosTituR := dadosTituR + ',' + temp;
              colBTitu := colBTitu + ',valo';
              dadosBTitu := dadosBTitu + ',' + temp;
              colBTitu := colBTitu + ',tota';
              dadosBTitu := dadosBTitu + ',' + temp;

              //Testar se não existe coluna saldo, se não existir joga o valor da VALO
              count:=BuscaColuna(StringGrid1,'sald');
              if (count=-1) then
              begin
                colTituR := colTituR + ',sald';
                if StringGrid1.Cells[i,k]='' then
                begin
                  temp2 := '0.0';
                end
                else begin
                  temp2 := StringGrid1.Cells[i,k];
                end;
                temp2 := corrigeFloat(temp2);
                dadosTituR := dadosTituR + ',' + temp2;
                temp2 := stringreplace(temp2, '.', ',',[rfReplaceAll, rfIgnoreCase]);
                saldo := StrToFloat(temp2);
              end;
            end
            //SALDO (Saldo do título)
            else if (LowerCase(StringGrid1.Cells[i,0])='sald') then
            begin
              colTituR := colTituR + ',sald';
              if StringGrid1.Cells[i,k]='' then
              begin
                temp := '0.0';
              end
              else begin
                temp := StringGrid1.Cells[i,k];
              end;
              temp := corrigeFloat(temp);
              dadosTituR := dadosTituR + ',' + temp;
              temp := stringreplace(temp, '.', ',',[rfReplaceAll, rfIgnoreCase]);
              saldo := StrToFloat(temp);

              //Testar se não existe coluna valo, se não existir joga o valor da SALD
              count:=BuscaColuna(StringGrid1,'valo');
              if (count=-1) then
              begin
                if StringGrid1.Cells[i,k]='' then
                begin
                  temp2 := '0.0';
                end
                else begin
                  temp2 := StringGrid1.Cells[i,k];
                end;
                temp2 := corrigeFloat(temp2);
                colTituR := colTituR + ',valo';
                dadosTituR := dadosTituR + ',' + temp2;
                colBTitu := colBTitu + ',valo';
                dadosBTitu := dadosBTitu + ',' + temp2;
                colBTitu := colBTitu + ',tota';
                dadosBTitu := dadosBTitu + ',' + temp2;
              end;
            end
            //HIST (HISTORICO)
            else if (LowerCase(StringGrid1.Cells[i,0])='hist') then
            begin
              colTituR := colTituR + ',hist';
              temp := UpperCase(RemoveAcento(StringGrid1.Cells[i,k]));
              temp := stringreplace(temp, '''', ' ',[rfReplaceAll, rfIgnoreCase]);
              temp := (Copy(temp,1,150));
              dadosTituR := dadosTituR + ',''' + temp + '''';
            end

            //Colunas extras para BTITUR
            //DATA_BAIXA (DATA DA BAIXA)
            else if (LowerCase(StringGrid1.Cells[i,0])='data_baixa') then
            begin
              colBTitu := colBTitu + ',data';
              temp := Trim(StringGrid1.Cells[i,k]);
              temp := stringreplace(temp, '-', '',[rfReplaceAll, rfIgnoreCase]);
              temp := stringreplace(temp, '/', '',[rfReplaceAll, rfIgnoreCase]);
              temp := stringreplace(temp, '.', '',[rfReplaceAll, rfIgnoreCase]);
              if temp.Length >= 8 then
              begin
                temp := (Copy(temp,1,2)) +'.'+ (Copy(temp,3,2)) +'.'+ (Copy(temp,5,4));
                dadosBTitu := dadosBTitu + ',''' + temp + '''';
              end
              else if temp.Length = 6 then begin
                temp2 := (Copy(DateToStr(Date()),9,2));
                //Testa os dois ultimos caracteres da data atual com data do titulo
                //Se os caracteres da data do titulo forem maiores, significa que é um século antes
                if StrToInt(temp2)<StrToInt(Copy(temp,5,2)) then temp2 := IntToStr(StrToInt(temp2)-1);
                temp := (Copy(temp,1,2)) +'.'+ (Copy(temp,3,2)) +'.'+ temp2 + (Copy(temp,5,2));
                dadosBTitu := dadosBTitu + ',''' + temp + '''';
              end;
            end
            ;

          //Fim do For das colunas
          end;

          //ID (ID DA BTITUR)
          colBTitu := colBTitu + ',id';
          dadosBTitu := dadosBTitu + ',' + 'gen_id(gen_btitur_id,1)';
          //JURO (JUROS)
          colBTitu := colBTitu + ',juro';
          dadosBTitu := dadosBTitu + ',''' + '0.0' + '''';
          //MULT (MULTA)
          colBTitu := colBTitu + ',mult';
          dadosBTitu := dadosBTitu + ',''' + '0.0' + '''';
          //DESCO (DESCONTO)
          colBTitu := colBTitu + ',desco';
          dadosBTitu := dadosBTitu + ',''' + '0.0' + '''';
          //CONT (CONTA)
          colBTitu := colBTitu + ',cont';
          dadosBTitu := dadosBTitu + ',''' + '1' + '''';
          //EMPR_BAIX (EMPRESA ONDE O TÍTULO FOI BAIXADO)
          colBTitu := colBTitu + ',empr_baix';
          dadosBTitu := dadosBTitu + ',''' + '1' + '''';

          //----------------------------------------
          //Gravar no banco de Títulos a Receber
          if UpperCase( ExtractFileExt(DBPath.Text) ) = '.FDB' then begin
            try
              try
                //Abrir conexoes
                conDestino.Open;
                SQL := TSQLDataSet.Create(Nil);
                SQL.SQLConnection := conDestino;

                //Executar INSERT
                frmImportando.atualizaStatus('Inserindo dados na tabela TITUR.');
                SQL.CommandText := 'insert into titur ('+ colTituR +') values ' + '(' + dadosTituR + ');';
                SQL.ExecSQL;

                if saldo <= 0.0 then begin
                  //Inserir na BTITUP
                  frmImportando.atualizaStatus('Inserindo dados na tabela BTITUR.');
                  SQL.CommandText := 'insert into btitur ('+ colBTitu +') values ' + '(' + dadosBTitu +');';
                  SQL.ExecSQL;
                end;

              except
                on e: exception do
                begin
                  ShowMessage('Erro SQL: '+e.message+sLineBreak+SQL.CommandText);
                  status := 0;
                  break; //Quebra o for
                end;
              end;

            finally
              SQL.Free;
              conDestino.Close;
            end;
          end
          //Gravar comandos em TXT
          else if (UpperCase( ExtractFileExt(DBPath.Text) ) = '.TXT') or
                  (UpperCase( ExtractFileExt(DBPath.Text) ) = '.SQL')
          then begin
            try
              try
                //Carregar arquivo TXT
                AssignFile(fileTXT, DBPath.Text);
                if not FileExists(DBPath.Text) then ReWrite(fileTXT)
                else append(fileTXT);

                frmImportando.atualizaStatus('Comandos da TITUR.');
                WriteLn(fileTXT, '----------Comandos da TITUR----------');

                WriteLn(fileTXT, 'insert into titur ('+ colTituR +') values ' + '(' + dadosTituR + ');');
                WriteLn(fileTXT, 'COMMIT WORK;');

                if saldo <= 0.0 then begin
                  //Inserir na BTITUP
                  frmImportando.atualizaStatus('Comandos BTITUR.');
                  WriteLn(fileTXT, '----------Comandos da BTITUR----------');
                  WriteLn(fileTXT, 'insert into btitur ('+ colBTitu +') values ' + '(' + dadosBTitu +');');
                  WriteLn(fileTXT, 'COMMIT WORK;');
                end;
              except
                on e: exception do
                begin
                  ShowMessage('Erro TXT: '+e.message);
                  status := 0;
                  CloseFile(fileTXT);
                  break; //Quebra o for
                end;
              end;
            finally
              CloseFile(fileTXT);
            end;
          end;

        end

        //----------------------------------------------------------------------------
        //OUTRAS OPÇÕES DE IMPORTAÇÃO COLOCAR AQUI

        ;


      //Fim do For das Linhas
      end;

      //------------------------------------------------------------------------------
      //COMANDOS PÓS IMPORTAÇÃO

      //Usando banco de dados FDB
      if UpperCase( ExtractFileExt(DBPath.Text) ) = '.FDB' then begin
        //Abrir conexoes
        conDestino.Open;
        SQL := TSQLDataSet.Create(Nil);
        SQL.SQLConnection := conDestino;

        if SelectImport.Text='Clie/Forn' then
        begin
          //Arrumar Generator dos Clientes e Fornecedores
          max := querySelect('select max(codi) from clieforn');
          if StrToInt(max) > 0 then
          begin
            frmImportando.atualizaStatus('Alterando generator do Clie/Forn.');
            SQL.CommandText := 'ALTER SEQUENCE GEN_CLIEFORN_ID RESTART WITH ' + max + ';';
            SQL.ExecSQL;
          end;
        end

        else if SelectImport.Text='Produtos' then
        begin
          //Arrumar Generator dos Produtos
          max := querySelect('select max(codi) from prod');
          if StrToInt(max) > 0 then
          begin
            frmImportando.atualizaStatus('Alterar Generator do Produto.');
            SQL.CommandText := 'ALTER SEQUENCE GEN_PROD_ID RESTART WITH ' + max + ';';
            SQL.ExecSQL;
          end;

          //Se for INSERT
          if colUpdateCount <= 0 then begin
            //Verificar se existe coluna margem, recalcular preços
            i:=BuscaColuna(StringGrid1,'margem');
            if (i<>-1) then
            begin
              frmImportando.atualizaStatus('Ajustando Preços.');
              SQL.CommandText := 'update prod_custos pc set pc.cust_preco_prazo = pc.cust_custo_real+(pc.cust_custo_real * pc.cust_margem1 /100) where pc.cust_custo_real>0;';
              SQL.ExecSQL;
              SQL.CommandText := 'update prod_custos pc set pc.cust_preco_vista = pc.cust_preco_prazo;';
              SQL.ExecSQL;
            end
            //Se não existir coluna margem, recalcular margem
            else begin
              //Atualizar MARGEM1
              frmImportando.atualizaStatus('Ajustando MARGENS.');
              SQL.CommandText := 'update prod_custos pc set pc.cust_margem1= abs(pc.cust_preco_prazo - pc.cust_custo_real)/pc.cust_custo_real where pc.cust_custo_real>0;';
              SQL.ExecSQL;
              SQL.CommandText := 'update prod_custos pc set pc.cust_margem1 = pc.cust_margem1 * 100;';
              SQL.ExecSQL;
            end;

            //Atualizar MARGEM2
            SQL.CommandText := 'update prod_custos pc set pc.cust_margem2 = (cast(pc.cust_preco_vista as numeric (18,2))/cast(pc.cust_preco_prazo as numeric (18,2)) -1)*100 where cast(pc.cust_preco_prazo as numeric (18,2))>0;';
            SQL.ExecSQL;
            //Criar registro na PROD_AJUS
            frmImportando.atualizaStatus('Inserindo dados na tabela PROD_AJUS.');
            SQL.CommandText := 'insert into prod_ajus (codi,data) values (gen_id(gen_prod_ajus_id,1),CURRENT_DATE);';
            SQL.ExecSQL;
          end
          //Se for UPDATE
          else begin
            if (dadosUpdateItens <> '') and (BuscaColuna(StringGrid1,'qtd') <> -1) then begin
              //Criar registro na PROD_AJUS somente se for feito update na QTD da Itens
              frmImportando.atualizaStatus('Inserindo dados na tabela PROD_AJUS.');
              SQL.CommandText := 'insert into prod_ajus (codi,data) values (gen_id(gen_prod_ajus_id,1),CURRENT_DATE);';
              SQL.ExecSQL;
            end;

            //Verificar se existe coluna margem, recalcular preços
            i:=BuscaColuna(StringGrid1,'margem');
            if (i<>-1) then
            begin
              frmImportando.atualizaStatus('Ajustando Preços.');
              SQL.CommandText := 'update prod_custos pc set pc.cust_preco_prazo = pc.cust_custo_real+(pc.cust_custo_real * pc.cust_margem1 /100) where pc.cust_custo_real>0;';
              SQL.ExecSQL;
              SQL.CommandText := 'update prod_custos pc set pc.cust_preco_vista = pc.cust_preco_prazo;';
              SQL.ExecSQL;;
            end
            //Se não existir coluna margem, ve se tem alguma coluna de preço e recalcular margem
            else begin
              //Preço A PRAZO
              i:=BuscaColuna(StringGrid1,'preco_prazo');
              if (i<>-1) then
              begin
                //Atualizar MARGEM1
                frmImportando.atualizaStatus('Ajustando MARGEM 1.');
                SQL.CommandText := 'update prod_custos pc set pc.cust_margem1= abs(pc.cust_preco_prazo - pc.cust_custo_real)/pc.cust_custo_real where pc.cust_custo_real>0;';
                SQL.ExecSQL;
                SQL.CommandText := 'update prod_custos pc set pc.cust_margem1 = pc.cust_margem1 * 100;';
                SQL.ExecSQL;
              end;
              //Preço A VISTA
              i:=BuscaColuna(StringGrid1,'preco_vista');
              if (i<>-1) then
              begin
                //Atualizar MARGEM2
                frmImportando.atualizaStatus('Ajustando MARGEM 2.');
                SQL.CommandText := 'update prod_custos pc set pc.cust_margem2= (pc.cust_preco_prazo - pc.cust_preco_vista)*100/pc.cust_preco_prazo where pc.cust_preco_prazo>0;';
                SQL.ExecSQL;
              end;
            end;
          end;

        end

        else if SelectImport.Text='Grupos' then
        begin
          //Arrumar Generator dos Grupos
          max := querySelect('select max(codi) from grup_prod');
          if StrToInt(max) > 0 then
          begin
            frmImportando.atualizaStatus('Alterar Generator dos Grupos.');
            SQL.CommandText := 'ALTER SEQUENCE GEN_GRUP_PROD_ID RESTART WITH ' + max + ';';
            SQL.ExecSQL;
          end;
        end

        else if SelectImport.Text='SubGrupos' then
        begin
          //Arrumar Generator dos SubGrupos
          max := querySelect('select max(codi) from sub_grup_prod');
          if StrToInt(max) > 0 then
          begin
            frmImportando.atualizaStatus('Alterar Generator dos SubGrupos.');
            SQL.CommandText := 'ALTER SEQUENCE GEN_SUB_GRUP_PROD_ID RESTART WITH ' + max + ';';
            SQL.ExecSQL;
          end;
        end

        else if SelectImport.Text='Marcas' then
        begin
          //Arrumar Generator das MARCAS
          max := querySelect('select max(codi) from marca');
          if StrToInt(max) > 0 then
          begin
            frmImportando.atualizaStatus('Alterar Generator das Marcas.');
            SQL.CommandText := 'ALTER SEQUENCE GEN_MARCA_ID RESTART WITH ' + max + ';';
            SQL.ExecSQL;
          end;
        end

        ;
        //Fechar conexoes
        SQL.Free;
        conDestino.Close;
      end

      //Usando arquivo TXT ou SQL
      else if (UpperCase( ExtractFileExt(DBPath.Text) ) = '.TXT') or
              (UpperCase( ExtractFileExt(DBPath.Text) ) = '.SQL')
      then begin
        //Carregar arquivo TXT ou SQL
        AssignFile(fileTXT, DBPath.Text);
        if not FileExists(DBPath.Text) then ReWrite(fileTXT)
        else append(fileTXT);

        WriteLn(fileTXT, '----------Comandos da PÓS-IMPORTAÇÃO----------');

        if SelectImport.Text='Clie/Forn' then
        begin
          frmImportando.atualizaStatus('Alterando generator do Clie/Forn.');
          WriteLn(fileTXT, 'select gen_id(gen_clieforn_id, abs((select max(CODI) from clieforn) - (select gen_id(gen_clieforn_id,0) from RDB$DATABASE)) ) from RDB$DATABASE;');
          WriteLn(fileTXT, 'COMMIT WORK;');
        end

        else if SelectImport.Text='Produtos' then
        begin
          //Se for INSERT
          if colUpdateCount <= 0 then begin
            //Arrumar Generator dos Produtos
            frmImportando.atualizaStatus('Alterar Generator do Produto.');
            WriteLn(fileTXT, 'select gen_id(gen_prod_id, abs((select max(CODI) from prod) - (select gen_id(gen_prod_id,0) from RDB$DATABASE)) ) from RDB$DATABASE;');
            WriteLn(fileTXT, 'COMMIT WORK;');

            //Verificar se existe coluna margem, recalcular preços
            i:=BuscaColuna(StringGrid1,'margem');
            if (i<>-1) then
            begin
              frmImportando.atualizaStatus('Ajustando Preços.');
              WriteLn(fileTXT, 'update prod_custos pc set pc.cust_preco_prazo = pc.cust_custo_real+(pc.cust_custo_real * pc.cust_margem1 /100) where pc.cust_custo_real>0;');
              WriteLn(fileTXT, 'COMMIT WORK;');
              WriteLn(fileTXT, 'update prod_custos pc set pc.cust_preco_vista = pc.cust_preco_prazo;');
              WriteLn(fileTXT, 'COMMIT WORK;');
            end
            //Se não existir coluna margem, recalcular margem
            else begin
              //Atualizar MARGEM1
              frmImportando.atualizaStatus('Ajustando MARGENS.');
              WriteLn(fileTXT, 'update prod_custos pc set pc.cust_margem1= abs(pc.cust_preco_prazo - pc.cust_custo_real)/pc.cust_custo_real where pc.cust_custo_real>0;');
              WriteLn(fileTXT, 'COMMIT WORK;');
              WriteLn(fileTXT, 'update prod_custos pc set pc.cust_margem1 = pc.cust_margem1 * 100;');
              WriteLn(fileTXT, 'COMMIT WORK;');
            end;

            //Atualizar MARGEM2
            WriteLn(fileTXT, 'update prod_custos pc set pc.cust_margem2 = (cast(pc.cust_preco_vista as numeric (18,2))/cast(pc.cust_preco_prazo as numeric (18,2)) -1)*100 where cast(pc.cust_preco_prazo as numeric (18,2))>0;');
            WriteLn(fileTXT, 'COMMIT WORK;');
            //Criar registro na PROD_AJUS
            frmImportando.atualizaStatus('Inserindo dados na tabela PROD_AJUS.');
            WriteLn(fileTXT, 'insert into prod_ajus (codi,data) values (gen_id(gen_prod_ajus_id,1),CURRENT_DATE);');
            WriteLn(fileTXT, 'COMMIT WORK;');
          end

          //Se for UPDATE
          else begin
            if (dadosUpdateItens <> '') and (BuscaColuna(StringGrid1,'qtd') <> -1) then begin
              //Criar registro na PROD_AJUS somente se for feito update na QTD da Itens
              frmImportando.atualizaStatus('Inserindo dados na tabela PROD_AJUS.');
              WriteLn(fileTXT, 'insert into prod_ajus (codi,data) values (gen_id(gen_prod_ajus_id,1),CURRENT_DATE);');
              WriteLn(fileTXT, 'COMMIT WORK;');
            end;

            //Verificar se existe coluna margem, recalcular preços
            i:=BuscaColuna(StringGrid1,'margem');
            if (i<>-1) then
            begin
              frmImportando.atualizaStatus('Ajustando Preços.');
              WriteLn(fileTXT, 'update prod_custos pc set pc.cust_preco_prazo = pc.cust_custo_real+(pc.cust_custo_real * pc.cust_margem1 /100) where pc.cust_custo_real>0;');
              WriteLn(fileTXT, 'COMMIT WORK;');
              WriteLn(fileTXT, 'update prod_custos pc set pc.cust_preco_vista = pc.cust_preco_prazo;');
              WriteLn(fileTXT, 'COMMIT WORK;');
            end
            //Se não existir coluna margem, ve se tem alguma coluna de preço e recalcular margem
            else begin
              //Preço A PRAZO
              i:=BuscaColuna(StringGrid1,'preco_prazo');
              if (i<>-1) then
              begin
                //Atualizar MARGEM1
                frmImportando.atualizaStatus('Ajustando MARGEM 1.');
                WriteLn(fileTXT, 'update prod_custos pc set pc.cust_margem1= abs(pc.cust_preco_prazo - pc.cust_custo_real)/pc.cust_custo_real where pc.cust_custo_real>0;');
                WriteLn(fileTXT, 'COMMIT WORK;');
                WriteLn(fileTXT, 'update prod_custos pc set pc.cust_margem1 = pc.cust_margem1 * 100;');
                WriteLn(fileTXT, 'COMMIT WORK;');
              end;
              //Preço A VISTA
              i:=BuscaColuna(StringGrid1,'preco_vista');
              if (i<>-1) then
              begin
                //Atualizar MARGEM2
                frmImportando.atualizaStatus('Ajustando MARGEM 2.');
                WriteLn(fileTXT, 'update prod_custos pc set pc.cust_margem2= (pc.cust_preco_prazo - pc.cust_preco_vista)*100/pc.cust_preco_prazo where pc.cust_preco_prazo>0;');
                WriteLn(fileTXT, 'COMMIT WORK;');
              end;
            end;
          end;
        end

        else if SelectImport.Text='Grupos' then
        begin
          //Arrumar Generator dos Grupos
          frmImportando.atualizaStatus('Alterar Generator dos Grupos.');
          WriteLn(fileTXT, 'select gen_id(gen_grup_prod_id, abs((select max(CODI) from grup_prod) - (select gen_id(gen_grup_prod_id,0) from RDB$DATABASE)) ) from RDB$DATABASE;');
          WriteLn(fileTXT, 'COMMIT WORK;');
        end

        else if SelectImport.Text='SubGrupos' then
        begin
          //Arrumar Generator dos SubGrupos
          frmImportando.atualizaStatus('Alterar Generator dos SubGrupos.');
          WriteLn(fileTXT, 'select gen_id(GEN_SUB_GRUP_PROD_ID, abs((select max(CODI) from sub_grup_prod) - (select gen_id(GEN_SUB_GRUP_PROD_ID,0) from RDB$DATABASE)) ) from RDB$DATABASE;');
          WriteLn(fileTXT, 'COMMIT WORK;');
        end

        else if SelectImport.Text='Marcas' then
        begin
          //Arrumar Generator das MARCAS
          frmImportando.atualizaStatus('Alterar Generator das Marcas.');
          WriteLn(fileTXT, 'select gen_id(GEN_MARCA_ID, abs((select max(CODI) from marca) - (select gen_id(GEN_MARCA_ID,0) from RDB$DATABASE)) ) from RDB$DATABASE;');
          WriteLn(fileTXT, 'COMMIT WORK;');
        end

        ;
        //Fechar arquivo
        CloseFile(fileTXT);
      end;

    except
      on e: exception do
      begin
        ShowMessage('Erro Interno: '+e.message+sLineBreak);
        status := 0;
      end;
    end;
  finally
    frmImportando.fim(status);

  end;

end;


//Função para salvar StringGrid em um arquivo Excel
function SaveAsExcelFile(stringGrid: TstringGrid; FileName: string): Boolean;
const
  xlWBATWorksheet = -4167;
var
  Row, Col: Integer;
  GridPrevFile: string;
  XLApp, Sheet: OLEVariant;

begin
  Screen.Cursor := crHourGlass;
  XLApp := CreateOleObject('Excel.Application');
  try
    XLApp.Visible := False;
    XLApp.Workbooks.Add(xlWBatWorkSheet);
    Sheet := XLApp.Workbooks[1].WorkSheets[1];

    Sheet.Name := 'String Grid';

    for col := 1 to stringGrid.ColCount - 1 do
    begin
      for row := 0 to stringGrid.RowCount - 1 do
      begin
        try
          Sheet.Cells[row + 1, col] := stringGrid.Cells[col, row];
        except
          on E:Exception do
          begin
            Mensagem('Erro gravando Excel. Verifique o arquivo resultante e se estiver com problemas tente salvar em CSV.'+#13+E.Message, mtCustom,[mbOK], ['Ok'], 'Erro salvando Excel.');
            Break;
          end;
        end;
      end;
    end;
    try
      Sheet.Columns.Autofit;
      XLApp.Workbooks[1].SaveAs(FileName);
      Result := True;
    except
      Result := False
    end;
  finally
    Screen.Cursor := crDefault;
    if not VarIsEmpty(XLApp) then
    begin
      XLApp.DisplayAlerts := False;
      XLApp.Quit;
      XLAPP := Unassigned;
      Sheet := Unassigned;
    end;
  end;
end;


//Função para salvar StringGrid em um arquivo CSV
function SaveAsCSVFile(Grid: TstringGrid; FileName: string):Boolean;
var
  i, j : Integer;
  CSV : TStrings;
  stream : string;

begin
  //Criar StringList
  CSV := TStringList.Create;

  Screen.Cursor := crHourGlass;
  CSV.Delimiter := ';';

  Try
    for i := 0 to Grid.RowCount - 1 do
    begin
      if Grid.ColCount >= 2 then
      begin
        stream := Grid.Cells[1,i];
      end
      else begin
        Exit;
      end;

      for j := 2 to Grid.ColCount -1 do
      begin
        stream := stream + ';' + Grid.Cells[j,i];
      end;
      CSV.Add(stream);
    end;

    try
      //Salvar no CSV
      CSV.SaveToFile(FileName);
      Result := True;
    except
      Result := False;
    end;
  Finally
    Screen.Cursor := crDefault;
    CSV.Free;
  End;
end;


//Botão Salvar StringGrid em planilha
procedure TfrmPrinc.btnSalvarClick(Sender: TObject);
var
  fileExt: string;

begin
  //Carregar extensão do arquivo
  fileExt := ExtractFileExt(FilePath.Text);

  //Sugerir extensão inicial
  SaveDialog1.Filter := 'EXCEL files (*.xlsx)|*.XLSX|CSV files (*.csv)|*.CSV';
  SaveDialog1.DefaultExt := 'xlsx';
  if (fileExt='.csv') then
  begin
    SaveDialog1.Filter := 'CSV files (*.csv)|*.CSV|EXCEL files (*.xlsx)|*.XLSX|';
    SaveDialog1.DefaultExt := 'csv';
  end;

  if SaveDialog1.Execute then
  begin
    //Carregar extensão do arquivo
    fileExt := LowerCase(ExtractFileExt(SaveDialog1.FileName));
    if fileExt='' then
    begin
      fileExt := '.'+LowerCase(SaveDialog1.DefaultExt);
    end;

    //Salvar arquivo de acordo com a extensão
    if (fileExt='.xls') or (fileExt='.xlsx') then
    begin
      //Salvar StringFrid em Excel
      if SaveAsExcelFile(StringGrid1, SaveDialog1.FileName) then begin
        ShowMessage(SaveDialog1.FileName+sLineBreak+'StringGrid salva com sucesso!');
      end
      else ShowMessage(SaveDialog1.FileName+sLineBreak+'Erro ao salvar StringGrid!');
    end
    else if (fileExt='.csv') then
    begin
      //Salvar StringGrid em CSV
      if SaveAsCSVFile(StringGrid1, SaveDialog1.FileName) then begin
        ShowMessage(SaveDialog1.FileName+sLineBreak+'StringGrid salva com sucesso!');
      end
      else ShowMessage(SaveDialog1.FileName+sLineBreak+'Erro ao salvar StringGrid!');
    end;

  end;
end;


procedure TfrmPrinc.btnTXTClick(Sender: TObject);
begin
  //Sugerir extensão inicial
  SaveDialog1.Filter := 'Text File(*.txt)|*.TXT|SQL File (*.sql)|*.SQL|';
  SaveDialog1.DefaultExt := 'txt';

  if SaveDialog1.Execute then
  begin
    DBPath.Text := SaveDialog1.FileName;
    conDestino.Params.Values['DataBase'] := '';
  end;

end;

//Função para salvar StringGrid em um array de string
function StringGridToArray(Grid: TStringGrid): Integer;
var
  i,j: integer;
begin
  //Redimensionar array
  SetLength(gridTemp,Grid.RowCount);
  for i := 0 to Grid.RowCount-1 do
  begin
    SetLength(gridTemp[i],Grid.ColCount);
  end;

  //Copiar da StringGrid para o array
  for i := 0 to Grid.RowCount-1 do
  begin
    for j := 0 to Grid.ColCount-1 do
    begin
      gridTemp[i,j] := Grid.Cells[j,i];
    end;
  end;

end;


//Mostrar quias as colunas estão disponíveis para importar
procedure TfrmPrinc.ColunasClick(Sender: TObject);
begin
  if SelectImport.Text = 'Tipo de Importação' then
  begin
    ShowMessage('Selecione o Tipo de Importação primeiro!');
  end
  else begin
    //Criar tela de colunas
    frmColunas.LabelTipoImp.Caption := SelectImport.Text;
    frmColunas.LabelTipoImp.Left := (frmColunas.Width - frmColunas.LabelTipoImp.Width ) div 2;
    frmColunas.Show;
  end;
end;


//Carregar Cabeçalho de outra tabela nesta tabela
procedure TfrmPrinc.Cabealho1Click(Sender: TObject);
var
  arquivo: string;

begin
  if opnDadosOrigem.Execute then
  begin
    ExtractFilePath(Application.ExeName);
    arquivo :=  opnDadosOrigem.FileName;

    StringGridToArray(StringGrid1);
    XlsHeaderLoad(StringGrid1,arquivo);

  end;
end;


//Limpar dados de clientes e fornecedores do banco
procedure TfrmPrinc.LimpaClieFornClick(Sender: TObject);
var
  SQL: TSQLDataSet;
begin
  //Abrir conexoes
  conDestino.Open;
  SQL := TSQLDataSet.Create(Nil);
  SQL.SQLConnection := conDestino;

  SQL.CommandText := 'delete from clieforn;';
  SQL.ExecSQL;

  SQL.CommandText := 'ALTER SEQUENCE GEN_CLIEFORN_ID RESTART WITH 0;';
  SQL.ExecSQL;

  ShowMessage('Limpado dados de clientes e fornecedores.');

  //Fechar conexoes
  SQL.Free;
  conDestino.Close;
end;


//Limpar dados de grupos do banco
procedure TfrmPrinc.LimpaGruposClick(Sender: TObject);
var
  SQL: TSQLDataSet;
begin
  //Abrir conexoes
  conDestino.Open;
  SQL := TSQLDataSet.Create(Nil);
  SQL.SQLConnection := conDestino;

  SQL.CommandText := 'delete from grup_prod;';
  SQL.ExecSQL;

  SQL.CommandText := 'ALTER SEQUENCE GEN_grup_prod_ID RESTART WITH 0;';
  SQL.ExecSQL;

  ShowMessage('Limpado dados de grupos.');

  //Fechar conexoes
  SQL.Free;
  conDestino.Close;
end;


//Limpar dados de marcas do banco
procedure TfrmPrinc.LimpaMarcasClick(Sender: TObject);
var
  SQL: TSQLDataSet;
begin
  //Abrir conexoes
  conDestino.Open;
  SQL := TSQLDataSet.Create(Nil);
  SQL.SQLConnection := conDestino;

  SQL.CommandText := 'delete from marca;';
  SQL.ExecSQL;

  SQL.CommandText := 'ALTER SEQUENCE GEN_MARCA_ID RESTART WITH 0;';
  SQL.ExecSQL;

  ShowMessage('Limpado dados de marcas.');

  //Fechar conexoes
  SQL.Free;
  conDestino.Close;
end;


//Limpar dados de produtos do banco
procedure TfrmPrinc.LimpaProdutosClick(Sender: TObject);
var
  SQL: TSQLDataSet;
begin
  //Abrir conexoes
  conDestino.Open;
  SQL := TSQLDataSet.Create(Nil);
  SQL.SQLConnection := conDestino;

  SQL.CommandText := 'delete from prod;';
  SQL.ExecSQL;
  SQL.CommandText := 'delete from prod_ajus;';
  SQL.ExecSQL;
  SQL.CommandText := 'delete from itens;';
  SQL.ExecSQL;

  SQL.CommandText := 'ALTER SEQUENCE GEN_ITENS_ID RESTART WITH 0;';
  SQL.ExecSQL;
  SQL.CommandText := 'ALTER SEQUENCE GEN_MVA_ID RESTART WITH 0;';
  SQL.ExecSQL;
  SQL.CommandText := 'ALTER SEQUENCE GEN_PROD_ADICIONAIS_ID RESTART WITH 0;';
  SQL.ExecSQL;
  SQL.CommandText := 'ALTER SEQUENCE GEN_PROD_AJUS_ID RESTART WITH 0;';
  SQL.ExecSQL;
  SQL.CommandText := 'ALTER SEQUENCE GEN_PROD_CUSTOS_ID RESTART WITH 0;';
  SQL.ExecSQL;
  SQL.CommandText := 'ALTER SEQUENCE GEN_PROD_FORN_ID RESTART WITH 0;';
  SQL.ExecSQL;
  SQL.CommandText := 'ALTER SEQUENCE GEN_PROD_ICMS_ST_ID RESTART WITH 0;';
  SQL.ExecSQL;
  SQL.CommandText := 'ALTER SEQUENCE GEN_PROD_ID RESTART WITH 0;';
  SQL.ExecSQL;
  SQL.CommandText := 'ALTER SEQUENCE GEN_PROD_TRIBUTOS_ID RESTART WITH 0;';
  SQL.ExecSQL;

  ShowMessage('Limpado dados de produtos.');

  //Fechar conexoes
  SQL.Free;
  conDestino.Close;
end;


//Limpar dados de subgrupos do banco
procedure TfrmPrinc.LimpaSubGruposClick(Sender: TObject);
var
  SQL: TSQLDataSet;
begin
  //Abrir conexoes
  conDestino.Open;
  SQL := TSQLDataSet.Create(Nil);
  SQL.SQLConnection := conDestino;

  SQL.CommandText := 'delete from sub_grup_prod;';
  SQL.ExecSQL;

  SQL.CommandText := 'ALTER SEQUENCE GEN_sub_grup_prod_ID RESTART WITH 0;';
  SQL.ExecSQL;

  ShowMessage('Limpado dados de subgrupos.');

  //Fechar conexoes
  SQL.Free;
  conDestino.Close;
end;


//Limpar dados de Titulos a pagar do banco
procedure TfrmPrinc.LimpaTituPClick(Sender: TObject);
var
  SQL: TSQLDataSet;
begin
  //Abrir conexoes
  conDestino.Open;
  SQL := TSQLDataSet.Create(Nil);
  SQL.SQLConnection := conDestino;

  SQL.CommandText := 'delete from titup;';
  SQL.ExecSQL;

  SQL.CommandText := 'delete from btitup;';
  SQL.ExecSQL;

  ShowMessage('Limpado dados de Títulos a Pagar.');

  //Fechar conexoes
  SQL.Free;
  conDestino.Close;
end;


//Limpar dados de Titulos a receber do banco
procedure TfrmPrinc.LimpaTituRClick(Sender: TObject);
var
  SQL: TSQLDataSet;
begin
  //Abrir conexoes
  conDestino.Open;
  SQL := TSQLDataSet.Create(Nil);
  SQL.SQLConnection := conDestino;

  SQL.CommandText := 'delete from titur;';
  SQL.ExecSQL;

  SQL.CommandText := 'delete from btitur;';
  SQL.ExecSQL;

  ShowMessage('Limpado dados de Títulos a Receber.');

  //Fechar conexoes
  SQL.Free;
  conDestino.Close;
end;


procedure TfrmPrinc.mnuSubstituirClick(Sender: TObject);
begin
  frmSubstituir.Show;
end;

//Deletar Linha da StringGrid
procedure TfrmPrinc.DeleteRow(Grid: TStringGrid; ARow: Integer);
var
  i: Integer;
begin
  for i := ARow to Grid.RowCount - 2 do
    Grid.Rows[i].Assign(Grid.Rows[i + 1]);
  Grid.RowCount := Grid.RowCount - 1;
end;


//Deletar coluna na StringGrid
procedure DeleteCol(Grid: TStringGrid; ACol: Integer);
var
  i: Integer;
begin
  for i := ACol to Grid.ColCount - 2 do
    Grid.Cols[i].Assign(Grid.Cols[i + 1]);
  Grid.ColCount := Grid.ColCount - 1;
end;


//Inserir coluna na StringGrid
procedure InsertCol(Grid: TStringGrid);
var
  i,j: Integer;
  temp: string;
begin
    Grid.ColCount := Grid.ColCount + 1;
    i:= Grid.ColCount;
    while i>Grid.Col do
    begin
      for j := 0 to Grid.RowCount do
      begin
        temp := Grid.Cells[i,j];
        Grid.Cells[i,j] := Grid.Cells[i-1,j];
      end;
      i:= i-1;
    end;
    for j := 0 to Grid.RowCount do
        Grid.Cells[i,j] := '';
  end;


//Inserir linha na StringGrid
procedure InsertRow(Grid: TStringGrid);
var
  i,j: Integer;
  temp: string;
begin
    Grid.RowCount := Grid.RowCount + 1;
    i:= Grid.RowCount;
    while i>Grid.Row do
    begin
      for j := 0 to Grid.ColCount do
      begin
        temp := Grid.Cells[j,i];
        Grid.Cells[j,i] := Grid.Cells[j,i-1];
      end;
      i:= i-1;
    end;
    for j := 0 to Grid.ColCount do
        Grid.Cells[j,i] := '';
  end;


//Evento ao apertar Botões do Teclado na StringGrid
procedure TfrmPrinc.StringGrid1KeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
var
  i,j,but: integer;
  temp: string;
begin

   //RECONHECER CTRL+H
   if ((Shift = [ssCtrl]) and (Key = $48)) then
   begin
    mnuSubstituir.Click;
   end;

   //RECONHECER CTRL+Z
   if ((Shift = [ssCtrl]) and (Key = 90)) then
   begin
    if Length(gridTemp) > 1 then
    begin
      StringGrid1.RowCount := Length(gridTemp);
      StringGrid1.ColCount := Length(gridTemp[0]);

      for i := 0 to Length(gridTemp)-1 do
      begin
        for j := 0 to Length(gridTemp[0])-1 do
        begin
          StringGrid1.Cells[j,i] := gridTemp[i,j];
        end;
      end;
    end;
    //Redimensionar colunas
    for i := 0 to StringGrid1.ColCount - 1 do
      AutoSizeCol(StringGrid1, i);
   end;

  //Se apertar 'Del'
  if (Key = VK_DELETE) then
  begin
    but := Mensagem('Deletar linha ou coluna', mtCustom, [mbYes, mbNo],['Linha','Coluna'], 'Deletar');
    if (but = 6) then
    begin
      //ShowMessage('Deletar Linha');
      StringGridToArray(StringGrid1);
      DeleteRow(StringGrid1, StringGrid1.Row);
    end
    else if (but = 7) then
    begin
      //ShowMessage('Deletar Coluna');
      StringGridToArray(StringGrid1);
      DeleteCol(StringGrid1, StringGrid1.Col);
      //Redimensionar colunas
      for i := 0 to StringGrid1.ColCount - 1 do
        AutoSizeCol(StringGrid1, i);
    end;
  end;

  //Teclas para voltar as linhas fixas
  if StringGrid1.Col=0 then
  begin
    if (Key=VK_TAB) or
     (Key=VK_RETURN) or
     (Key=VK_ESCAPE) or
     (Key=VK_LEFT) or
     (Key=VK_RIGHT) then
    begin
      if StringGrid1.FixedRows=0 then StringGrid1.Col:=1;
      StringGrid1.FixedRows:=1;
    end;
  end;

  //Teclas para voltar as colunas fixas
  if StringGrid1.Row=0 then
  begin
    if (Key=VK_TAB) or
     (Key=VK_RETURN) or
     (Key=VK_ESCAPE) or
     (Key=VK_LEFT) or
     (Key=VK_RIGHT) then
    begin
      if StringGrid1.FixedCols=0 then StringGrid1.Row:=1;
      StringGrid1.FixedCols:=1;
    end;
  end;

  //Inserir coluna
  if (Key=VK_F1) then
  begin
    StringGridToArray(StringGrid1);
    InsertCol(StringGrid1);

    //Redimensionar colunas
    for i := 0 to StringGrid1.ColCount - 1 do
      AutoSizeCol(StringGrid1, i);
  end;

  //Inserir Linha
  if (Key=VK_F3) then
  begin
    StringGridToArray(StringGrid1);
    InsertRow(StringGrid1);
  end;
end;


//Botão Adicionar Coluna na StringGrid
procedure TfrmPrinc.AdicionarColunaClick(Sender: TObject);
var
  i: Integer;
begin
  StringGridToArray(StringGrid1);
  InsertCol(StringGrid1);

  //Redimensionar colunas
  for i := 0 to StringGrid1.ColCount - 1 do
    AutoSizeCol(StringGrid1, i);
end;


//Botão Adicionar Linha na StringGrid
procedure TfrmPrinc.AdicionarLinhaClick(Sender: TObject);
begin
  StringGridToArray(StringGrid1);
  InsertRow(StringGrid1);
end;


//Botão Deletar Coluna na StringGrid
procedure TfrmPrinc.DeletarColunaClick(Sender: TObject);
var
  i: Integer;
begin
  StringGridToArray(StringGrid1);
  DeleteCol(StringGrid1, StringGrid1.Col);
  //Redimensionar colunas
  for i := 0 to StringGrid1.ColCount - 1 do
    AutoSizeCol(StringGrid1, i);
end;


//Botão Deletar Linha na StringGrid
procedure TfrmPrinc.DeletarLinhaClick(Sender: TObject);
begin
  StringGridToArray(StringGrid1);
  DeleteRow(StringGrid1, StringGrid1.Row);
end;


//Reconhecer Right Click na celula
procedure TfrmPrinc.StringGrid1MouseDown(Sender: TObject; Button: TMouseButton;
  Shift: TShiftState; X, Y: Integer);
var
  PMouse: TPoint;
  i, j, k, Col, Row, but, but2: integer;
  valor,temp: string;
begin
  //Right Click
  if Button = mbRight then
  begin
    //Testar qual coluna clicou
    PMouse := Mouse.CursorPos;
    PMouse := StringGrid1.ScreenToClient(PMouse);
    StringGrid1.MouseToCell(PMouse.x, PMouse.y, Col, Row);

    //Se for uma coluna não fixa
    if (((Col<>0) and (Row<>0)) or ((Col=0) and (Row<>0))) then
    begin
      //Setar focus
      StringGrid1.Col := Col;
      StringGrid1.Row := Row;

      but := Mensagem('Preencher coluna', mtCustom, [mbYes, mbNo],['Copiar','Serie'], 'Preencher');
      if (but = 6) then
      begin
        //ShowMessage('Copiar valor');
        StringGridToArray(StringGrid1);
        valor := StringGrid1.Cells[Col,Row];
        for i := 1 to StringGrid1.RowCount do
        begin
          StringGrid1.Cells[Col,i] := valor;
        end;
      end
      else if (but = 7) then
      begin
        //ShowMessage('Preencher serie');
        StringGridToArray(StringGrid1);
        valor := StringGrid1.Cells[Col,Row];
        j:=1;
        for i := Row+1 to StringGrid1.RowCount do
        begin
          StringGrid1.Cells[Col,i] := IntToStr(StrToInt(valor)+j);
          j:=j+1;
        end;
      end;
    end
    //Se for uma fixa pergunta se deseja mesclar ou copiar coluna
    else if Row=0 then
    begin
      but := Mensagem('Mesclar ou Copiar coluna ou marcar coluna como Update', mtCustom, [mbYes, mbNo, mbIgnore],['Mesclar','Copiar','Update'], 'Mesclar - Copiar - Marcar Update');
      if (but = 6) then
      begin
        //ShowMessage('Mesclar Coluna');
        but2 := Mensagem('Mesclar com a coluna', mtCustom, [mbYes, mbNo],['À Esquerda','À Direita'], 'Mesclar colunas');
        if (but2 = 6) then
        begin
          if Col=0 then
          begin
            ShowMessage('Não existem mais colunas à esquerda.');
          end
          else begin
            StringGridToArray(StringGrid1);
            for i := 0 to StringGrid1.RowCount-1 do
            begin
              StringGrid1.Cells[Col-1,i] := StringGrid1.Cells[Col-1,i] + StringGrid1.Cells[Col,i];
            end;
            DeleteCol(StringGrid1, Col);
          end;
          //Redimensionar colunas
          for i := 0 to StringGrid1.ColCount - 1 do
            AutoSizeCol(StringGrid1, i);
        end
        else if (but2 = 7) then
        begin
          if Col=StringGrid1.ColCount then
          begin
            ShowMessage('Não existem mais colunas à direita.');
          end
          else begin
            StringGridToArray(StringGrid1);
            for i := 0 to StringGrid1.RowCount-1 do
            begin
              StringGrid1.Cells[Col+1,i] := StringGrid1.Cells[Col,i] + StringGrid1.Cells[Col+1,i];
            end;
            DeleteCol(StringGrid1, Col);
          end;
        end;
        //Redimensionar colunas
        for i := 0 to StringGrid1.ColCount - 1 do
          AutoSizeCol(StringGrid1, i);
      end
      else if (but = 7) then
      begin
        //ShowMessage('Copiar Coluna');
        StringGridToArray(StringGrid1);
        StringGrid1.ColCount := StringGrid1.ColCount + 1;
        i:= StringGrid1.ColCount;
        while i>Col do
        begin
          for j := 0 to StringGrid1.RowCount do
          begin
            temp := StringGrid1.Cells[i,j];
            StringGrid1.Cells[i,j] := StringGrid1.Cells[i-1,j];
          end;
          i:= i-1;
        end;
      end
      else if (but = 5) then
      begin
        //ShowMessage('Marcar coluna como Update');

        //Testa se selecionou um tipo de importação
        if SelectImport.Text = 'Tipo de Importação' then begin
          ShowMessage('Selecione um tipo de Importação.');
          Exit;
        end;

        //Verificar se ja existe nos marcados como Update
        j := -1; //j recebera a posicao encontrada
        for i := 0 to colUpdateCount-1 do begin
          temp := StringGrid1.Cells[Col,0];
          temp := colUpdate[i];
          if colUpdate[i] = StringGrid1.Cells[Col,0] then begin
            j := i; //Achou
            Break;
          end;
        end;
        //Se achou deve remover dos Updates
        if j <> -1 then begin
          for i := j+1 to colUpdateCount-1 do begin
            colUpdate[i-1] := colUpdate[i];
          end;
          colUpdateCount := colUpdateCount - 1;
          SetLength(colUpdate,colUpdateCount);
        end
        //Se não achou adiciona aos Updates
        else begin
          //Testar se é uma coluna válida para adicionar nos updates
          k := 0; //K é um flag, se ficar 0 depois do FOR da EXIT
          frmColunas.LabelTipoImp.Caption := SelectImport.Text;
          frmColunas.MostrarColunas;
          for i := 0 to frmColunas.ListColunas.Count-1 do begin
            if StringGrid1.Cells[Col,0] = '' then
              Continue;
            if LowerCase(frmColunas.ListColunas.Items[i]) = LowerCase(StringGrid1.Cells[Col,0]) then begin
              k := 1;
              Break;
            end;
          end;
          if k=0 then begin
            ShowMessage('Coluna não pode ser usada como Update.');
            Exit;
          end;

          colUpdateCount := colUpdateCount + 1;
          SetLength(colUpdate,colUpdateCount);
          colUpdate[colUpdateCount-1] := StringGrid1.Cells[Col,0];
        end;
        //Preencher a label
        lblColUpdate.Caption := 'Colunas Update:';
        for i := 0 to colUpdateCount-1 do begin
          lblColUpdate.Caption := lblColUpdate.Caption + ' '+colUpdate[i];
        end;
        //Aciona visibilidade da label se tem pelo menos 1 valor nos updates
        if colUpdateCount > 0 then lblColUpdate.Visible := True
        else lblColUpdate.Visible := False;
        //Atualizar coluna
        StringGrid1DrawCell(StringGrid1, Col, Row, StringGrid1.CellRect(Col,Row), [gdFixed,gdSelected,gdFocused,gdRowSelected,gdHotTrack,gdPressed]);
      end;

      //Redimensionar colunas
      for i := 0 to StringGrid1.ColCount - 1 do
        AutoSizeCol(StringGrid1, i);
    end;
  end
  else //Left Click
  if Button = mbLeft then
  begin
    //Testar qual coluna clicou
    PMouse := Mouse.CursorPos;
    PMouse := StringGrid1.ScreenToClient(PMouse);
    StringGrid1.MouseToCell(PMouse.x, PMouse.y, Col, Row);

    //Voltar as celulas fixas após clicar fora
    if Row<>0 then
    begin
      StringGrid1.FixedRows:=1;
      //Setar focus
      StringGrid1.Row := Row;
    end;
    if Col<>0 then
    begin
      StringGrid1.FixedCols:=1;
      //Setar focus
      StringGrid1.Col := Col;
    end;
  end;
end;


procedure TfrmPrinc.StringGrid1DblClick(Sender: TObject);
var
  PMouse: TPoint;
  Col, Row: integer;
begin

  //Desabilitar celulas fixas ao dar dois cliques
  PMouse := Mouse.CursorPos;
  PMouse := StringGrid1.ScreenToClient(PMouse);

  StringGrid1.MouseToCell(PMouse.x, PMouse.y, Col, Row);

  if Row=0 then
  begin
    StringGrid1.FixedRows:=0;
    //Setar focus
    StringGrid1.Col := Col;
    StringGrid1.Row := Row;
  end;
  if Col=0 then
  begin
    StringGrid1.FixedCols:=0;
    //Setar focus
    StringGrid1.Col := Col;
    StringGrid1.Row := Row;
  end;

end;


procedure TfrmPrinc.StringGrid1DrawCell(Sender: TObject; ACol, ARow: Integer;
  Rect: TRect; State: TGridDrawState);
var
  i, CellLeftMargin, CellTopMargin: Integer;
begin
  with (Sender as TStringGrid) do
  begin
    Canvas.Font.Color := clBlack;
    Canvas.Brush.Color := clWhite;
    // Don't change color for first Column, first row
    if (ARow <> 0) and (ACol <> 0) then begin
      // Draw the Band
      if ARow mod 2 = 0 then
        Canvas.Brush.Color := $00E1FFF9
      else
        Canvas.Brush.Color := $00FFEBDF;
    end;
    for i := 0 to colUpdateCount-1 do begin
      if StringGrid1.Cells[Acol,Arow] = colUpdate[i] then
        Canvas.Font.Color := clBlue;
    end;
    Canvas.TextRect(Rect, Rect.Left + 2, Rect.Top + 2, cells[acol, arow]);
    Canvas.FrameRect(Rect);
  end;
end;


//Botão abrir cadastro da empresa
procedure TfrmPrinc.DadosEmprClick(Sender: TObject);
begin
  if DBPath.Text = 'Caminho da base de dados - FDB' then
  begin
    ShowMessage('Selecione a base de dados primeiro!');
  end
  else begin
    //Criar tela de loading
    frmEmpr.Show;
  end;
end;


//Verificar se coluna é Update ou não
function TfrmPrinc.VerificaUpdate(coluna: String): Integer;
var
  i: Integer;
begin
  Result := 0;
  for i := 0 to colUpdateCount-1 do begin
    if LowerCase(coluna) = LowerCase(colUpdate[i]) then begin
      Result := 1;
      Break;
    end;
  end;
end;

{$R *.dfm}

initialization
SetLength(gridTemp,1);
SetLength(gridTemp[0],1);
SetLength(colUpdate,1);
colUpdateCount := 0;
end.
